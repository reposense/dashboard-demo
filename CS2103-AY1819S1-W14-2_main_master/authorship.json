[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d ThanePark"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "image:https://travis-ci.org/CS2103-AY1819S1-W14-2/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/CS2103-AY1819S1-W14-2/main\"]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image:https://coveralls.io/repos/github/CS2103-AY1819S1-W14-2/main/badge.svg?branch\u003dmaster\u0026service\u003dgithub][\"Coverage Status\", link\u003d\"https://coveralls.io/github/CS2103-AY1819S1-W14-2/main\"]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* ThanePark is a command-line application that streamlines theme park management in tracking queue status of rides."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* It takes away the pain from your management worries."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d Target user profile"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Works at a attraction/theme park as an operator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Need to manage crowds and update status of park"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Highly proficient with keyboard"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d Information"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* This is a desktop theme park management application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "** A more sophisticated GUI that includes a list  panel and an in-built Browser."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "** More test cases, including automated GUI testing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5], https://github.com/tipsy/j2html[j2html]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 15,
      "-": 28
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "      \"githubId\": \"keenlok\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "      \"displayName\": \"LAI K...N LOK\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "      \"authorNames\": [\"keenlok\", \"Keen Lok\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "      \"githubId\": \"leongengsea\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "      \"displayName\": \"LEONG...G SEA\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "      \"authorNames\": [\"leongengsea\", \"leong eng sea\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "      \"githubId\": \"jiajunteo\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "      \"displayName\": \"TEO J...A JUN\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "      \"authorNames\": [\"jiajunteo\", \"NEW-DGU39GCO4DB\\teoji\", \"Teo Jia Jun\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "      \"githubId\": \"YuPeiHenry\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "      \"displayName\": \"YU PE...HENRY\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "      \"authorNames\": [\"YuPeiHenry\", \"Yu Pei Henry\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 22,
      "leongengsea": 1,
      "YuPeiHenry": 2
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "mainClassName \u003d \u0027seedu.thanepark.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    compile \u0027com.j2html:j2html:1.3.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    archiveName \u003d \u0027thanepark.jar\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            test.include \u0027seedu/thanepark/**\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            test.include \u0027seedu/thanepark/ui/**\u0027"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            test.exclude \u0027seedu/thanepark/ui/**\u0027"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u0027site-name\u0027: \u0027ThanePark\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-W14-2/main\u0027,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        include \u0027images/ui_screenshots/*\u0027"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        include \u0027ShortHelpWindow.html\u0027"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        include \u0027AboutUsWindow.html\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "YuPeiHenry": 6,
      "-": 240
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "ThanePark was developed by the https://github.com/CS2103-AY1819S1-W14-2[CS2103-AY1819S1-W14-2] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Yu Pei, Henry"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image::yupeihenry.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{empty}[https://github.com/YuPeiHenry[github]] [\u003c\u003cyupeihenry#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Role: Team Lead, Code Quality, Deliverables and Deadlines, Integration +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Teo Jia Jun"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image::jiajunteo.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "{empty}[https://github.com/jiajunteo[github]] [\u003c\u003cjiajunteo#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Role: Documentation +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Lai Keen Lok"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image::keenlok.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "{empty}[https://github.com/keenlok[github]] [\u003c\u003ckeenlok#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Role: Testing +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "\u003d\u003d\u003d Leong Eng Sea"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image::leongengsea.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "{empty}[https://github.com/leongengsea[github]] [\u003c\u003cleongengsea#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Role: Scheduling and Tracking +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "jiajunteo": 1,
      "YuPeiHenry": 16,
      "leongengsea": 1,
      "-": 27
    }
  },
  {
    "path": "docs/AboutUsWindow.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":no-site-header:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "include::AboutUs.adoc[]"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-W14-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d ThanePark - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W14-2/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "By: `CS2103-AY1819S1-W14-2`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Welcome to ThanePark!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "The purpose of this documentation is to assist you in your transition to begin developmental work on ThanePark."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "If you are a developer looking to adopt ThanePark for your own uses, go to \u003c\u003cSetting up, *`Setting up`*\u003e\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "If you wish to contribute to ThanePark, go to \u003c\u003cDev Ops, *`Developing the application`*\u003e\u003e."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "If you wish to update documentation of ThanePark, go to \u003c\u003cDocumentation,*`Documentation`*\u003e\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d About"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "ThanePark is a desktop application for theme park management. The application is optimized for keyboard-oriented"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "users and retains user-friendly graphics that informs users of their decisions in a glance."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Before you get started on development on the application, you will need to complete the following steps below."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Checking Software Prerequisites"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "To ensure a smooth transition into your development, check that the following software versions are installed:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *JDK `9`* or later"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *IntelliJ* IDE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "After you have installed the correct software, follow the steps below to setup your development environment locally:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/zone/storage/XmlAdaptedRide.java[`XmlAdaptedRide.java`] and link:{repoURL}/src/main/java/seedu/zone/ui/MainWindow.java[`MainWindow.java`] and check for any code errors."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/zone/commons/util/XmlUtilTest.java[`XmlUtilTest.java`]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "and link:{repoURL}/src/test/java/seedu/zone/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Verifying the Setup"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "It is recommended that you verify the setup by trying the following actions:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": ". Run the `seedu.thanepark.MainApp` and try a few commands"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Configuring your Integrated Development Environment"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Some configurations of your Integrated Development Environment need to be set:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[Tips]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "After you fork the repo, the documentation will still have the CS2103-W14-2 branding and refer to the `CS2103-W14-2/main` repo."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `CS2103-W14-2/main`), you should do the following:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "When you are ready to start coding:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "This section will help you better understand the software architecture of ThanePark."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "image::Architecture.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "It shows the various interactions between \u003c\u003cDesign-Main,*`Main`*\u003e\u003e and 4 other components:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c\u003cDesign-Ui,*`UI`*\u003e\u003e, \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c\u003cDesign-Model,*`Model`*\u003e\u003e and \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Given below is a quick overview of each component:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[[Design-Main]]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Main component"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keenlok"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/zone/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *`Commons`* represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Note how the `Model` simply raises a `ThaneParkChangedEvent` when the Thane Park data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The `UI` component is responsible for any UI-related functionality of the App."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "keenlok"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/zone/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `RideListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "keenlok"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/zone/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The `Logic` component is responsible for handling and executing command logic."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "keenlok"
        },
        "content": "link:{repoURL}/src/main/java/seedu/zone/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ".  `Logic` uses the `ThaneParkParser` class to parse the user command."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a ride) and/or raise events."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The `Model` component stores an internal representation of the state of the application in memory."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "keenlok"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/zone/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* stores the Thane Park data."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cRide\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "keenlok"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Thane Park`, which `Ride` can reference. This would allow `Thane Park` to only require one `Tag` object per unique `Tag`, instead of each `Ride` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The `Storage` component is responsible for reading data from, and writing data to, the hard disk."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "keenlok"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/zone/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* can save the Thane Park data in xml format and read it back."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "keenlok"
        },
        "content": "//tag::filter[]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003d\u003d\u003d Filter Feature"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "keenlok"
        },
        "content": "This section documents how `filter` is implemented and how it works."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "keenlok"
        },
        "content": "The execution of the `filter` command is simple and linear as the following activity diagram would show:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "keenlok"
        },
        "content": ".Activity Diagram for the Filter Feature"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "keenlok"
        },
        "content": "image::FilterActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "keenlok"
        },
        "content": "The following sequence diagram will show how the `filter` command works: +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "keenlok"
        },
        "content": ".Sequence Diagram for the Filter Feature"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "keenlok"
        },
        "content": "image::FilterSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "keenlok"
        },
        "content": "The feature is implemented with the help of `FilterCommand` and `AttributePredicate` class. When the"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "keenlok"
        },
        "content": "`ThaneParkParser` parses the user input and finds the filter command word `filter` it calls a new `FilterCommandParser` to"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "keenlok"
        },
        "content": "parse the arguments from the user input."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "keenlok"
        },
        "content": "It checks if there are any of the maintenance or waiting time prefix in the arguments. If any of the prefixes are present,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "keenlok"
        },
        "content": "an `AttributePredicate` is created with the operator (‘\u003c\u0027, ‘\u003e’, \u0027\u003c \u003d\u0027 or \u0027\u003e \u003d\u0027 or \u0027\u003d\u003d\u0027) and the `NumericAttribute` they"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "keenlok"
        },
        "content": "are checking for (ie `Maintenance` or `WaitTime`). The ``AttributePredicate``s are added to a list. The user can add any"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "keenlok"
        },
        "content": "amount of predicates that they want, like 3 predicates e.g. `filter w/\u003c 50 w/ \u003e 5 m/\u003e10` and the list would contain 3"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "keenlok"
        },
        "content": "predicates and if the user decides to input only one predicate, the list will only contain one. +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "keenlok"
        },
        "content": "A new `RideContainsConditionPredicate` is instantiated with the list of ``AttributePredicate``s. The `FilterCommandParser` will"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "keenlok"
        },
        "content": "return a new `FilterCommand` with the `RideContainsConditionPredicate` in it."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "keenlok"
        },
        "content": "The `LogicManager` executes the command, and the `RideContainsConditionPredicate` will be set as the predicate to filter"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "keenlok"
        },
        "content": "the list of rides and it will check if the ride fulfils the required predicate(s). The `RideContainsConditionPredicate`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "keenlok"
        },
        "content": "will test if each ride fulfills the required conditions using this method:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "keenlok"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "keenlok"
        },
        "content": "----"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean test(Ride ride) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return attributePredicates.stream().allMatch(p -\u003e {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            NumericAttribute attributeToTest \u003d p.getAttribute();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            NumericAttribute rideAttributeToTest \u003d ride.getAttribute(attributeToTest);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return p.test(rideAttributeToTest);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        });"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "keenlok"
        },
        "content": "----"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "keenlok"
        },
        "content": "So it should be pretty simple to add new ``NumericAttribute``s to the rides like ratings if you wish to with minimal"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "keenlok"
        },
        "content": "changes to other classes, as long as relevant methods are added to `FilterCommandParser` to handle the new ``NumericAttribute``s."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "keenlok"
        },
        "content": "After all of the rides in the application are tested, a list of filtered rides would be returned and shown to the user."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support filter commands"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* **Alternative 1(Current Choice):** Abstract attributes that contain numeric values into a separate class and create a"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "AttributePredicate to test the attribute"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "keenlok"
        },
        "content": "** Pros: More numeric attributes can be easily added  and minimal changes are required to filter new attributes"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "keenlok"
        },
        "content": "** Cons: More classes would need to be implemented to handle this feature"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* **Alternative 2:** Give the entire string condition to the RideContainsConditionPredicate to test."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "keenlok"
        },
        "content": "** Pros: Classes do not need to abstracted, and thus would be easier to implement"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "** Cons: RideContainsConditionPredicate would carry out parsing functions which would make it less cohesive"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "keenlok"
        },
        "content": "// end::filter[]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Command Management Feature"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "// tag::commandManagement[]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The Command Management feature is responsible for making ThanePark application easier to use."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "It can be decomposed into the following segments: +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* \u003c\u003caccessibility_help, *Help*\u003e\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* \u003c\u003caccessibility_autocomplete, *Autocomplete*\u003e\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* \u003c\u003caccessibility_history, *Command History retrieval*\u003e\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[#accessibility_help]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Help"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The *help* mechanism is facilitated by the `ShowHelpRequestEvent`."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "When the user executes a `HelpCommand`, the required level of help is encoded in `ShowHelpRequest`."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "This event type is subscribed to by `MainWindow`, which will load the respective help page in the required window"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "(`BrowserPanel` or `HelpWindow`). Most of these classes belong to the User Interface (UI) component."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "These interactions are illustrated in the class diagram below:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ".Class Diagram of help mechanism"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image::HelpClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[#accessibility_autocomplete]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Autocomplete"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The *autocomplete* mechanism is facilitated by `SuggestCommand`."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "It extends `Command` and serves as a special kind of `Command` that cannot be directly invoked by the `LogicManager`."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "A new instance of `SuggestCommand` is created whenever `ThaneParkParser` fails to find a matching CommandWord,"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "or when kbd:[TAB] is pressed inside the *Command Box*. See the 2 figures below:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ".Activity Diagram of user executing command"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "image::AutocompleteSuggestActivityDiagram1.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ".Activity Diagram of user pressing tab"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "image::AutocompleteSuggestActivityDiagram2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The application will then proceed with executing the `SuggestCommand`, which returns prefix-matched `Command` s."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "These matching `Command` s are reflected in both `CommandResult` and `ShowHelpRequestEvent`, which will in turn update"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "`ResultDisplay` and `CommandBox` text. See figure below:"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ".Activity Diagram of user pressing tab"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "image::AutocompleteSuggestActivityDiagram3.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "You can easily add other pattern matching heuristics such as `nearest word distance` by implementing the following interface, `PatternMatcher`:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "----"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public interface PatternMatcher {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Matches a list of items as Strings against a given pattern."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String[] matchPattern(String[] items, String pattern);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "----"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "A possible implementation of a prefix matcher is shown below:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "----"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class PrefixMatcher implements PatternMatcher {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String PATTERN_PREFIX \u003d \"^%1$s.*\";"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Default constructor"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public PrefixMatcher() {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String[] matchPattern(String[] items, String pattern) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return Arrays.stream(items).filter(s"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            -\u003e s.matches(String.format(PATTERN_PREFIX, pattern))).toArray(String[]::new);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "----"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[#accessibility_history]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d History"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The *history* mechanism is facilitated by `CommandHistory` and `CommandsLogCenter`."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "`CommandHistory` maintains the history as a list of user inputs during the session,"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "and interfaces with `CommandsLogCenter` to handle the retrieval and persistent storage"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "of user inputs executed across sessions."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Given below are 2 example usage scenarios to illustrate the behavior of the *history* mechanism."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Example scenario 1: User requests for current session\u0027s history. +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Step 1. User executes `history`. +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Step 2. The list of user inputs in the current session is retrieved from `CommandHistory`. +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Step 3. A `NewResultAvailableEvent` is raised within the `Logic` component."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Step 4. The result panel displays the list of user inputs upon notification by the event."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Example scenario 2: User requests for cumulative history. +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "When the cumulative history of all commands is requested through `history more` command, a `HTML` report is generated."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The process of generating a `HTML` report upon execution of `history more` is illustrated in the Sequence Diagram below."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ".Sequence Diagram of HTML report generation since command"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image::HistorySequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Handling UI interactions in help"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* **Alternative 1 (current choice):** Subscribe `MainWindow` to `ShowHelpRequestEvent`."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Pros: Cohesive. Every `UI` component affected by `ShowHelpRequestEvent` are handled through `MainWindow`."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Cons: Difficult to implement. Interactions between `MainWindow` and its child `UI` components must be carefully handled."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Easy to cause bugs if not handled appropriately."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* **Alternative 2:** Subscribe `BrowserPanel`, `HelpWindow` and `RideListPanel` to `ShowHelpRequestEvent`."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Pros: Easy to implement. These `UI` components can directly perform whatever is required."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Cons: High dependency. When a modification to `ShowHelpRequestEvent` is required, all of these classes may need to be modified."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Handling autocomplete text replacement"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* **Alternative 1 (current choice):** Handle autocomplete text replacement through `SuggestCommandEvent`."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Pros: Flexible. Easy to modify text replacement behavior through `SuggestCommandEvent`. Can be used by"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "both kbd:[Tab] and kbd:[Enter]. Open for extension to other keystrokes or actions that lead to autocompletion."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Cons: Difficult to implement as it requires some understanding of the `EventsCenter` and handling of the various"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Event types in the application."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* **Alternative 2:** Handle autocomplete through the existing `NewResultAvailableEvent`."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Pros: Easy to implement. Can modify `NewResultAvailableEvent` to easily satisfy most requirements."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Cons: Difficult to extend. When modifying behavior of text autocompletion, modification of"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "both `CommandBox` and `ResultDisplay` may be required."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Storing command history"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* **Alternative 1 (current choice):** Store every command entry in a separate xml file."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Pros: Flexible. Able to format the file with little constraint to meet storage requirements."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Cons: Low code reuse. Does not utilise the existing `LogsCenter` for ThanePark."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* **Alternative 2:** Store command entries using the existing `LogsCenter` for ThanePark."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Pros: High code reuse. Developers know that all logging within the ThanePark is done by `LogsCenter`."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Cons: High dependency and difficult to implement. When a modification to `LogsCenter` is required,"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "the modification of command history storage may be required. Additionally, the parsing of command history"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "from the existing `LogsCenter` logs may require substantial modifications."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "// end::commandManagement[]"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "// tag::viewstatus[]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d View Status Feature"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "This section documents how `viewstatus` is being implemented."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "The view status feature is implemented with the help of `ViewStatusCommand` and `RideStatusPredicate` classes."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "As seen in the sequence diagram below, when the `ThaneParkParser` class parses the user input of `viewstatus`,"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "it calls a new `ViewStatusCommandParser` to parse the arguments from the user input."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ".Sequence Diagram of the View Status feature"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "image::ViewStatusSequenceDiagram.png[width\u003d\"550\"]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ".Activity Diagram of `ViewStatusCommandParser`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "image::ViewStatusActivityDiagram.png[width\u003d\"550\"]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "As seen in the diagram above, the `ViewStatusCommandParser` class checks the arguments for keywords relating to the status of the rides."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "If there are more than one strings found or the argument string is not one of the three statuses,"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "it will throw a `ParseException`, letting the user know that the command format is wrong."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Conversely, it will compare the argument with the statuses and create a `Status` enumeration."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "A new `RideStatusPredicate` is instantiated with the `Status` enumeration."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "The `ViewStatusCommandParser` will return a new `ViewStatusCommand` containing `RideStatusPredicate`."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "The `LogicManager` execute the command, and uses the `RideStatusPredicate` to filter the list of rides for rides that fulfill the required predicate(s)."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "A list of filtered rides would be returned."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support view status command"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* **Alternative 1(Current choice):** Handle checking of status by passing the `Status` enumeration to `RideStatusPredicate` to test."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "** Pros: Code is more cohesive as each class is more focused."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "** Cons: More classes are required to implement the check."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* **Alternative 2:** Handle checking of status in ViewStatusCommand by using a lambda expression to express the predicate."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "** Pros: Easier to implement as less classes are needed."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "** Cons: Reduced modularity as predicate logic is not abstracted."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "// end::viewstatus[]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "// tag::open[]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "\u003d\u003d\u003d Open/Shutdown Feature"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "This section documents how open/shutdown features are implemented and how they work. Note that `open` and `shutdown`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "features are very similar to each other."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "The `OpenActivityDiagram` below show the execution flow of `OpenCommand`:"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ".Activity Diagram of `OpenCommand`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "image::OpenActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "The following sequence diagram will show how the open/shutdown feature works: +"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ".Sequence Diagram for the Open Feature"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "image::OpenSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "As seen in the diagram above, the `open` function is implemented with the help of `OpenCommand` and"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "`UpdateRideDescriptor` class. When the `ThaneParkParser` parses the user input and finds the open command word `open`,"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "it calls a new `OpenCommandParser` to parse the arguments from the user input."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "Next, the `OpenCommandParser` will parse the arguments from the user input into an `index` and"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "return a new `OpenCommand` with the `index` as the parameter."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "Finally, the `LogicManager` will execute the `open` command, and the `index` will be used to find the `ride` from the"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "list."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "After that, the `open` command will change the status of the ride to `Open` by utilising the `UpdateRideDescriptor`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "class."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support open/shutdown commands"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "* **Alternative 1(Current choice):** Change the status of the ride inside the `open` command and include the"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    `UpdateRideDescriptor` in the `open` command as well."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "** Pros: This would be easier to implement as `UpdateRideDescriptor` class no need to abstracted out from the"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "   `openCommand` class."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "** Cons: `UpdateRideDescriptor` will modify the status of rides inside the `openCommand` class which will make the"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "   `openCommand` class less cohesive."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "* **Alternative 2:** Abstracting `UpdateRideDescriptor` into a separate class and modify the status of rides in the"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    separate class instead of `openCommand` class."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "** Pros: The `openCommand` will be more cohesive."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "** Cons: More classes would need to be implemented to modify the status of rides."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "// end::open[]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedThanePark`."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "It extends `ThanePark` with an undo/redo history, stored internally as an `ThaneParkStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `VersionedThanePark#commit()` -- Saves the current zone book state in its history."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `VersionedThanePark#undo()` -- Restores the previous zone book state from its history."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `VersionedThanePark#redo()` -- Restores a previously undone zone book state from its history."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitThanePark()`, `Model#undoThanePark()` and `Model#redoThanePark()` respectively."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedThanePark` will be initialized with the initial zone book state, and the `currentStatePointer` pointing to that single zone book state."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th ride in the zone book. The `delete` command calls `Model#commitThanePark()`, causing the modified state of the zone book after the `delete 5` command executes to be saved in the `ThaneParkStateList`, and the `currentStatePointer` is shifted to the newly inserted zone book state."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new ride. The `add` command also calls `Model#commitThanePark()`, causing another modified zone book state to be saved into the `ThaneParkStateList`."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "If a command fails its execution, it will not call `Model#commitThanePark()`, so the zone book state will not be saved into the `ThaneParkStateList`."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Step 4. The user now decides that adding the ride was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoThanePark()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous zone book state, and restores the zone book to that state."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial zone book state, then there are no previous zone book states to restore. The `undo` command uses `Model#canUndoThanePark()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoThanePark()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the zone book to that state."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "If the `currentStatePointer` is at index `ThaneParkStateList.size() - 1`, pointing to the latest zone book state, then there are no undone zone book states to restore. The `redo` command uses `Model#canRedoThanePark()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the zone book, such as `list`, will usually not call `Model#commitThanePark()`, `Model#undoThanePark()` or `Model#redoThanePark()`. Thus, the `ThaneParkStateList` remains unchanged."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitThanePark()`. Since the `currentStatePointer` is not pointing at the end of the `ThaneParkStateList`, all zone book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire zone book."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the ride being deleted)."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of zone book states."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedThanePark`."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Asciidoc was used for writing documentation."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "If you need to edit the diagrams found in this document, the `.pptx` files used to create diagrams in this document can"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "This section covers what you need to know about running and designing automated tests for further development on this application."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "keenlok"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.thanepark.ui` package."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "keenlok"
        },
        "content": "e.g. `seedu.thanepark.commons.StringUtilTest`"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "keenlok"
        },
        "content": "e.g. `seedu.thanepark.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "keenlok"
        },
        "content": "e.g. `seedu.thanepark.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "keenlok"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/zone/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "keenlok"
        },
        "content": "A project often depends on third-party libraries. For example, Thane Park depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Works at a attraction/theme park as manager, operator, customer relations… Mainly for operators."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Need to manage crowds and update status of park"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Highly proficient with keyboard"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Value proposition*: Manage attraction/theme parks more efficiently."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d User stories that will be implemented"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |theme park manager |identify popularity trends in attractions |better plan for future expansions"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* * *` |theme park manager |identify manpower and physical assets shortages |better manage the staff roster"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |theme park manager |find less popular rides |replace them with better ones, to keep the park fresh for visitors…"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* * *` |theme park manager |add/delete attractions |let operators know the changes in the park."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* * *` |theme park manager |find detailed information about an attraction |perform planning with better knowledge."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* * *` |theme park manager |view history |perform some amount of audit on the actions of employees."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* * *` |attraction operator |monitor status of attractions |appropriately handle crowds and technical faults."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* * *` |attraction operator |update the system on the queue status of the attraction I am stationed at |provide everyone access to live data."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* * *` |attraction operator |shutdown/reopen attraction |facilitate maintenance works."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* * *` |attraction operator |find detailed information about an attraction |perform my on-site duties without misinformation."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* * *` |attraction operator |view history |keep track what work I have already completed."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |theme park customer relations officer |know which rides have the longest/shortest queue |suggest to customers which rides to ride"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |theme park customer relations officer |find detailed information about an attraction |appropriately answer visitor queries on attractions."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |non-tech savvy user |ask the system to complete/correct my sentences |reduce the need to remember all the commands."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |non-tech savvy user |sort the entries according to a desired order |get a more comprehensive view."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |non-tech savvy user |view summarized help |stay not overwhelmed."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |non-tech savvy user |view detailed help about a certain command |have an idea on how to use the command on unique use cases."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |non-tech savvy user |undo an action |revert the damage done by my own negligence."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |non-tech savvy user |redo an action |perform an action that I undone at will."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |new user |find my basic commands |complete my basic tasks with ease."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |new user |get a quickhelp on startup |get productive within 30 seconds."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d User stories that are kept for consideration for v2.0"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |theme park manager |promote less frequented attractions |there is an increase in utilisation and growth"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`*` |attraction operator |give suggestions |new/confused visitors have a destination"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`*` |attraction operator |minimise waiting time for visitors |they can play more and wait less"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |attraction operator |know which souvenirs sells the most |increase revenue for the theme park"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |attraction operator |get a priority on offering visitors with the option of patronizing a less crowded"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "attraction and coming back later without having to queue |visitors do not feel mistreated."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* * *` |attraction operator |track visitors visiting an assigned attraction |visitors cannot cheat the queue system"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |attraction operator |track ongoing promotions |visitors will be offered reward points for visiting promoted attractions"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |theme park customer relations officer |know which rides the customers like most/least |upgrade rides to fit the customers’ needs"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |theme park customer relations officer |know which rides have the longest/shortest queue |suggest to customers which rides to ride"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |theme park customer relations officer |get recorded feedback from visitors |I will be able to have a better performance/ do my job better"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`*` |theme park customer relations officer |better appease visitors |they are more inclined to return"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`*` |theme park customer relations officer |give compensation to dissatisfied visitors |raise the approval rating of the park"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`*` |theme park customer relations officer |give a suggested itinerary (randomized) |visitors can enjoy more rides with their money’s worth"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`*` |theme park customer relations officer |make visitors feel welcomed in the park |they can enjoy themselves"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |theme park customer relations officer |give directions to a less crowded food joint |visitors can enjoy a meal with their friends/family"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`* *` |theme park customer relations officer |register visitors’ souvenir shopping list |visitors do not need to carry bulky souvenirs around"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|`*` |theme park customer relations officer |find a less crowded shop to buy souvenir |"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Add attraction"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* Manager +"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User adds attraction."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark shows add success message."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1a. User adds attraction that already exists."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1a1. ThanePark shows add error message. +"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Delete attraction"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* Manager +"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User deletes attraction."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark show delete success message."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1a. User deletes attraction that does not exist."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1a1. ThanePark shows delete error message. +"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Exit"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* All +"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User exits ThanePark application."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark completes closing process and shows relevant message."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "none"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Find attraction"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* Manager/Operator/Customer relations +"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User finds an attraction by name."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark shows detailed information of attraction."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1a. There is no exact match of given name"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1a1. ThanePark shows a list of names with substring match."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1a2. User finds attraction using complete name as shown."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* 1b. There is no substring match."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "keenlok"
        },
        "content": "** 1b1. ThanePark shows warning message to user."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* 1c. User finds an attraction by the name of the zone that it is in and the tags it contains."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "keenlok"
        },
        "content": "+"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "keenlok"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "keenlok"
        },
        "content": "** 1c1. ThanePark shows a list of rides that matches the zone and the tags input by the user."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "keenlok"
        },
        "content": "+"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Help"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* Non-tech savvy user +"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User requests for help."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark shows summarized information for help."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1a. User requests for more help."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1a1. ThanePark shows normal detail of information for all commands."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1b. User requests for help on specific command."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1b1. ThanePark shows detailed help with more examples on specific command."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1c. User requests for help with extra invalid parameters."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: History"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* Manager/Operator +"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User requests for history."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark shows history."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1a. User requests for history report."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1a1. ThanePark generates and shows history report."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Redo"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* Non-tech savvy user +"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User requests to redo."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark redoes the next action in the redo queue."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1a. Redo queue is empty"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1a1. ThanePark shows redo error."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Undo"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* Non-tech savvy user +"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User requests to undo."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark undoes the most recent undoable action."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1a. There is no most recent undoable action as system just started up."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1a1. ThanePark shows undo error."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Update attraction"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* Operator +"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User requests to update information of an attraction."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark shows the updated state of the attraction."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1a. The attraction does not exist."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1a1. ThanePark shows an error message for updating the attraction information"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "\u003d\u003d\u003d Use case: Open attraction"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "*Actor* Operator +"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "1.  User opens an attraction."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "2.  ThanePark sets the status of attraction to be open."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "+"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "* 1a. The attraction does not exist."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "+"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "** 1a1. ThanePark shows an error message for opening the attraction."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "+"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "* 1b. The attraction is already open."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "+"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "** 1b1. ThanePark shows error."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "+"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Shutdown attraction"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* Operator +"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User shuts down an attraction."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark sets the status of attraction to be shut down."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1a. The attraction does not exist."
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1a1. ThanePark shows an error message for shutting down the attraction."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 1b. The attraction is already shut down."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 1b1. ThanePark shows error."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d Use case: Maintain attraction"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "*Actor* Operator +"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "1.  User closes an attraction for maintenance."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "2.  ThanePark sets the status of attraction to be under maintenance."
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* 1a. The attraction does not exist."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "** 1a1. ThanePark shows an error message for closing the attraction for maintenance."
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* 1b. The attraction is already under maintenance."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "** 1b1. ThanePark shows error."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d Use case: View a list of all attractions"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* All +"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User requests to view all attractions."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark shows a summarized view for the whole list of attractions in the park."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "none"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d Use case: View a list of rides that matches the given ride status"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* All +"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "1.  User requests to view attractions by status."
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "2.  ThanePark shows all attractions that matches the ride status."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "none"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Filter"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "keenlok"
        },
        "content": "*Actor* Manager/Operator +"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User requests for a filter query."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  ThanePark shows all attractions that matches the filter criteria."
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "keenlok"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* 1a. There is no rides that matches the given condition in the query."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "keenlok"
        },
        "content": "+"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "keenlok"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "keenlok"
        },
        "content": "** 1a1. ThanePark shows warning message to user."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "keenlok"
        },
        "content": "+"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* 1b. The filter query has multiple conditions."
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "keenlok"
        },
        "content": "+"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "keenlok"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "keenlok"
        },
        "content": "** 1b1. ThanePark shows a list of rides that matches the conditions from the user."
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "keenlok"
        },
        "content": "+"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Use case: Autocomplete"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*System*: ThanePark +"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Actor* All +"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "1.  User types a command halfway."
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2.  System idles."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "3.  User presses tab."
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "4.  System completes the command word for the user."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 3a. There is more than 1 prefix match for the half-typed command."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 3a1. ThanePark shows a list of command words that start with the same prefix."
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* 3b. There is no match for the half-typed command."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** 3b1. ThanePark idles."
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "+"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ".  Should be able to hold up to 100 attractions without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ".  System startup should not take more than 10 seconds."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ".  User should become productive within first 30 seconds."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[[attraction-ride]] Attraction/ Ride::"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "An attraction/ride that is meant for visitors to patronize."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[[themepark]] Theme/ Amusement park::"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "A place with rides for visitors to patronise."
      }
    ],
    "authorContributionMap": {
      "keenlok": 98,
      "jiajunteo": 87,
      "YuPeiHenry": 509,
      "leongengsea": 75,
      "-": 603
    }
  },
  {
    "path": "docs/ShortHelp.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Command syntax summary, enter `help more` for full manual."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"\u003c100%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|*Manage Attractions*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "|add \u003cattraction\u003e \u003cmaintenance\u003e \u003cwaitTime\u003e \u003caddress\u003e [tag(s)]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "|delete \u003cindex\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|update \u003cindex\u003e \u003ctag\u003e \u003cvalue\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|shutdown \u003cindex\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|open \u003cindex\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|maintain \u003cindex\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|clear"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"\u003c100%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|*Manage Commands*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|help [more], help [commandWord]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|Using Autocomplete: kbd:[TAB]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|history [option]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|undo"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|redo"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|exit"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"\u003c100%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|*View information on the list of rides*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|viewall"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|view \u003cindex\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|viewstatus \u003cstatus\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"\u003c100%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|*Find the relevant list of rides*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|filter \u003ctag\u003e \u003ccondition\u003e [[tag] [condition]…​]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|find \u003c[name] [[tag][keyword]…​]\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "jiajunteo": 1,
      "YuPeiHenry": 37,
      "leongengsea": 3
    }
  },
  {
    "path": "docs/ShortHelpWindow.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":no-site-header:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "include::ShortHelp.adoc[]"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003d Thane Park - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W14-2/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "By: `CS2103-AY1819S1-W14-2`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Welcome to ThanePark!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "ThanePark is a theme park management application that assists theme park managers and operators in obtaining ride information readily."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Using the keyboard, you can easily access features such as creating rides, updating ride information, finding rides with short waiting time and more."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Get started now by heading over to \u003c\u003cQuick Start\u003e\u003e. Enjoy!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d About"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "This user guide introduces you to ThanePark, provides detailed instructions to set up and gives you an overview of the available features."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "No prior technical knowledge is required to use ThanePark."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "For frequently asked questions, check out \u003c\u003cFAQ\u003e\u003e."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "For a brief summary of all features, check out \u003c\u003cCommand Summary\u003e\u003e."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Steps to set up ThanePark:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ".  Check that you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": ".  Download the latest `thanepark.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your ThanePark."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image::startup.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "If you left click on the any ride in the list, it will show the ride information in a window"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "similar to below:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image::Ui.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The bar at the top of the window allows you to access `Help` or `About`. The `About` option on the navigation bar opens an About Us window."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "You will not be able to customise the image for rides. This feature will only be implemented in `v2.0`. +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Additionally, note that you may not enter more than 250 characters inside the `CommandBox`."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Any character past the 250th will be forcefully truncated. This is to guard against abuse. +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Also note that the waiting time and maintenance dates are not live, they are static and require manual updates."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Maintenance dates will update only when a command is executed. Maintenance dates do not update when ThanePark is restarted."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "In v2.0 this updating process will be automated."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Congratulations! You have successfully set up ThanePark!"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "e.g. typing *`help more`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Type some of these commands to try out ThanePark:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* *`viewall`* : lists all rides in your theme park."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* *`exit`* : exits the app."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "This section contains information of all commands used in ThanePark."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* Items in chevrons `\u003c\u003e` denotes compulsory field. +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Example: `add \u003cattraction\u003e`\u003cmaintenance\u003e `\u003cwaitTime\u003e` `\u003czone\u003e`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* Items in square brackets `[]` denotes optional field. +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Example: `help [more]`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* Items in curly brackets `{}` denotes keystroke. +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Example: `{tab}` is the kbd:[TAB] keystroke."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* Items ending with ellipses `...` denotes variable number of arguments. +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Example: `filter \u003ctag\u003e \u003ccondition\u003e [[tag] [condition]...]`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Parameters with prefix `/` can be in any order +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Example: if the command specifies n/name p/zone, p/zone n/name is also acceptable."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Manage Attractions"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "This section contains all commands related to managing attractions."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "// tag::manage[]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Adding attractions: `add`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Adds an attraction by name with the information. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "Format: ``add `\u003cn/attraction\u003e` `\u003cm/maintenance\u003e` `\u003cw/waitTime\u003e` `\u003cz/zone\u003e` [t/tag(s)]``"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "A ride can have any number of tags (including 0). +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "Maintenance and waiting time should only contain positive integers with at least 1 digit long and should be less than"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "1 billion."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "The length for zone and tag(s) field exceeds 30 characters is undefined behaviour."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "* add n/Transformers m/1 w/30 z/John street, block 123, #01-01"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "* add n/The Mummy m/3 w/45 z/311, Clementi Ave 2, #02-25 t/3D t/indoor"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting attractions: `delete`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "Deletes the specified attraction from ThanePark. +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "Format: `delete \u003cindex\u003e`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* Deletes the ride at the specified index."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* The index refers to the index number shown in the list of displayed rides."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "* `viewall` +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "  `delete 2` +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "  Deletes the 2nd ride in ThanePark."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "* `find Puss in Boots\u0027 Giant Journey` +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "   `delete 1` +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "   Deletes the 1st ride in the results of the find command."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Updating information of attraction: `update`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "Updates the details of the ride identified by the index number used in the displayed ride list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "The length for zone and tag(s) field exceeds 30 characters is undefined behaviour."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "Format: `update \u003cindex\u003e \u003cprefix/value\u003e`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "Parameters: INDEX (must be a positive integer) [n/NAME] [m/MAINTENANCE] [w/WAITING_TIME] [z/ZONE] [t/TAG]."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "* `update 1 m/90` +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "  Updates the 1st ride in ThanePark."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "* `update 2 m/90 w/60` +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "  Updates the 2nd ride in ThanePark."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "This command cannot update the waiting time and maintenance field when the ride is not open."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "Maintenance and waiting time should only contain positive integers with at least 1 digit long and should be less than"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "1 billion."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Shutting down attraction: `shutdown`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "Closes the ride for the day. Display statistics for the ride on that day. +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "Format: `shutdown \u003cindex\u003e`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "This command will reset the waiting time field to zero."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "a|"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "Example : `shutdown 1`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "* `shutdown 1` +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "  Closes the 1st ride in ThanePark."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "As seen in the diagram below, the status of the 1st ride changes from `open` to `shutdown` within the red box after"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "`shutdown 1` is executed."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ".Before executing `shutdown 1`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "image::./ui_screenshots/shutdown-example-1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ".After executing `shutdown 1`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "image::./ui_screenshots/shutdown-example-2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "After `shutdown 1` is executed, the name, status, days since last maintenance, waiting time, zone and tags for"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "the ride is displayed."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Opening attraction: `open`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "Opens the ride for the day. Display statistics for the ride on that day. +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "Format: `open \u003cindex\u003e`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "* `open 2` +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "  Opens the 2nd ride in ThanePark."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "This command also resets the waiting time field to zero."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "// end::manage[]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Closing attraction for maintenance: `maintain`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Closes the ride for maintenance. Display statistics for the ride on that day. +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Format: `maintain \u003cindex\u003e`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "This command also resets both waiting time and maintenance fields to zero."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Manage Commands"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "This section contains all commands related to managing commands."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "// tag::help[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help: `help`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Displays short summary of important commands. You should see a similar-looking summarized help"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "sheet as shown below. +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image::ui_screenshots/help-example-1.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Extended usage of `help` command: If you want to see the full help manual, use `help [more]`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "If you want to see the full help for a specific `commandWord`, use `help [commandWord]`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Should you provide an invalid `[commandWord]`, you will be shown the default short help message."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Please note that any arguments beyond the 2nd position will be discarded and ignored."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Please note that the short help only shows the rough syntax of commands. If you want the full help,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "do refer to this User Guide. You should also note that `help` will cause the currently selected `Ride` to be deselected."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[.white]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "a|"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `help more`: Opens a help window that describes the usage of ThanePark. You should see something similar to the image below."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image::ui_screenshots/help-example-2.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "a|"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `help add`: Opens a help window and scrolls to `add` command word usage. You should see something similar to the image below."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `help add 1234`: Same as previous, the extra arguments are discarded and ignored."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image::ui_screenshots/help-example-3.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "// end::help[]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "// tag::autocomplete1[]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Suggesting commands: `{tab}`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Displays suggested list of commands when kbd:[TAB] is pressed. +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Format: kbd:[TAB]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "// end::autocomplete1[]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "If you want to see common usage, skip to \u003c\u003csuggest_examples, examples\u003e\u003e to view common usage."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The full functionality of suggesting commands can be quite heavy."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Extended usage of suggesting commands:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"20%,\u003c40%,\u003c40%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|Action |State of application |Expected Output"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|kbd:[TAB] a|"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `CommandBox` contains half complete command"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *Only 1* command word match to first prefix in `CommandBox` a|"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Strips all text behind first prefix in `CommandBox`."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Replaces prefix with matching command word in `CommandBox`."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Displays matching command word in result panel."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|kbd:[TAB] a|"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `CommandBox` contains half complete command"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *More than 1* command word match to first prefix in `CommandBox` a|"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Displays all matching command words in result panel."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* No change in `CommandBox`."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|kbd:[TAB] a|"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `CommandBox` contains half complete command"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *No* command word match to first prefix in `CommandBox` a|"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* No visible change is reflected."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|kbd:[TAB] a|"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `CommandBox` contains nothing a|"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* No visible change is reflected."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|kbd:[TAB] a|"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `CommandBox` starts with a complete command word"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *More than 1* command word match to first prefix in `CommandBox` a|"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Displays all matching command words in result panel."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* No change in `CommandBox`."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|kbd:[TAB] a|"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `CommandBox` starts with a complete command word"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *Only 1* command word match to first prefix in `CommandBox` a|"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Strips all text behind command word in `CommandBox`."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Command in `CommandBox` will not be executed."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Command word will be shown in result panel."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|kbd:[ENTER] a|"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `CommandBox` contains half complete command"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *Only 1* command word match to first prefix in `CommandBox` a|"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Strips all text behind first prefix in `CommandBox`."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Replaces prefix with matching command word in `CommandBox`."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Displays matching command word in result panel."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|kbd:[ENTER] a|"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `CommandBox` contains half complete command"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *More than 1* command word match to first prefix in `CommandBox` a|"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Displays all matching command words in result panel."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Remove all text in `CommandBox`."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|kbd:[ENTER] a|"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `CommandBox` contains half complete command"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *No* command word match to first prefix in `CommandBox` a|"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Error is shown in result panel."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `CommandBox` text turns red."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|kbd:[ENTER] a|"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `CommandBox` starts with a complete command word"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Command arguments are *invalid* a|"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* Suggested command usage is shown in result panel."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `CommandBox` text turns red."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "// tag::autocomplete2[]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[.white]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "a|"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[#suggest_examples]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `he` +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "kbd:[TAB] (Completes the `help` command word.) +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `histor more` +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "kbd:[ENTER] (Corrects the `history` command word. Strips `more` from the command) +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "// end::autocomplete2[]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "// tag::history[]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing history of previous commands: `history`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Displays previous user inputs during this session. Does not include the executed `history` itself. +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Format: `history [more]`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Extended usage of `history`: +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "If you wish to get a report of all commands executed across sessions, use `history more` and a report will be generated."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The `xml` file produce by ThanePark was not designed for you to read. +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "You may experience loss of command history information when `commandHistory.xml` exceeds 5MB"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "or is unintentionally modified."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[.white]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "a|"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `history` (Shows user inputs in current session.)"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `history more` (A window similar to the one below should show up:)"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "a|"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "image::ui_screenshots/history-example-1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "// end::history[]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing commands: `undo`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Undo previous command during current session. +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[.white]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "a|"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "`viewAll` +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `view 1` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "`viewAll` +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing previously undone commands: `redo`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Reverse the previously undone commands during current session. +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " +"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "a|"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting ThanePark: `exit`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Exits the ThanePark application. +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " +"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "// tag::viewstatus[]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d View information of rides"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "This section contains all commands related to both viewing information of specific rides"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "and viewing different lists of rides."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing detailed information of a specific ride: `view`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Displays all available information about a single ride on the list of displayed rides."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "The `index` field specifies the index of the ride that you want to view."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Format: `view \u003cindex\u003e`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "`index` should be a positive integer that is not larger than the size of the displayed list."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "a|"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Example 1: `view 4`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Note how the information within the red box changes when `view 4` is executed."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ".Before executing `view 4`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "image::./ui_screenshots/view-example-1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ".After executing `view 4`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "image::./ui_screenshots/view-example-2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "When `view 4` is executed, the display shows the name, status, days since last maintenance and waiting time for  the selected ride."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Example 2: `view 17`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Note how the information within the red box at the top changes when `view 17` is executed."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ".Before executing `view 17`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "image::./ui_screenshots/view-example-3.png[width\u003d\"550\"]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "The red box at the bottom of the diagram above shows the last ride, with an index of *16*."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "If you want to view a ride with an index larger than the list, an error message will be shown."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ".After executing `view 17`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "image::./ui_screenshots/view-example-4.png[width\u003d\"550\"]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "The red box in the diagram above shows the error message when you try to enter an index that is not in the list,"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing rides by their status: `viewstatus`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Displays all rides according to the status of the rides."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Format: `viewstatus \u003cstatus\u003e`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "There are only three statuses that are valid, namely open, shutdown and maintenance."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "a|"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Example 1: `viewstatus open`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Note how the information within the red boxes changes when the `viewstatus open` command is executed."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ".Before executing `viewstatus open`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "image::./ui_screenshots/viewstatus-example-1.png[width\u003d\"550\"]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "In the diagram above, note that the list of rides in the red box at the left contains rides with different statuses."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ".After executing `viewstatus open`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "image::./ui_screenshots/viewstatus-example-2.png[width\u003d\"550\"]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "As seen in the diagram above, once `viewstatus open` is executed, the list of rides in the box at the left only contains rides that are open."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "In addition, the response box at the top of the diagram displays the total number of rides that are open."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Example 2: `viewstatus MainTenaNce`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "`viewstatus MainTenaNce` command accepts inputs with mixed cases in the status field."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ".Before executing `viewstatus MainTenaNce` command"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "image::./ui_screenshots/viewstatus-example-3.png[width\u003d\"550\"]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ".After executing `viewstatus MainTenaNce` command"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "image::./ui_screenshots/viewstatus-example-4.png[width\u003d\"550\"]"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "As seen in the diagram above, ThanePark is able to read `viewstatus MainTenaNce` and display rides with the status `MAINTENANCE`."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "// end::viewstatus[]"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing all available rides: `viewall`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Displays all available rides in a list."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Format: `viewall`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "a|"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Example: `viewall`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Note how the information within the red boxes changes when the `viewall` command is executed."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ".Before executing `viewall`"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "image::./ui_screenshots/viewall-example-1.png[width\u003d\"540\"]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ".After executing `viewall`"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "image::./ui_screenshots/viewall-example-2.png[width\u003d\"540\"]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "As seen in the diagram above, the response box at the top of the diagram will display the total number of rides,"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "with a break down of the total number of rides of different statuses."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "The list box at the left of the diagram is also updated to show all the rides in ThanePark, regardless of status."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "keenlok"
        },
        "content": "// tag::filter[]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d Find the relevant list of rides"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "keenlok"
        },
        "content": "This section contains all commands related to finding rides that you need at any time."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Finding a particular attraction: `find`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Find a list of rides that the you need to check on. Case insensitive. +"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Can only find the name, the zone, and the tags of the attractions. +"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Format: `find \u003c[name] [[tag][keyword]...]\u003e` +"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Must include arguments when finding. +"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Here are some examples with images to let you follow along. +"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "keenlok"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "keenlok"
        },
        "content": "a|"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* `find accelerator` +"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Finds and displays the list of attractions in ThanePark with the name \"accelerator\". +"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "keenlok"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "keenlok"
        },
        "content": "You can only use `find` to look for a full word in the name. This means a part of the name like \"accel\" will not work"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "keenlok"
        },
        "content": "and only the full name like \"accelerator\" will work."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "keenlok"
        },
        "content": "The list of results should be like this if no changes were made to the application (ie. delete or add or update): +"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "image::./ui_screenshots/find-example-1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* `find z/ sci-fi` +"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Finds and displays the list of attractions with zones that contain the word \"sci-fi\"."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "keenlok"
        },
        "content": "The list of results should look like this:"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "image::./ui_screenshots/find-example-2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* `find zone sci-fi t/popular tag rollerCoaster` +"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Finds and displays the list of attractions with zones in the theme park that contain the word \"sci-fi\" and the"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "keenlok"
        },
        "content": "tags \"rollerCoaster\" and \"popular\"."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "keenlok"
        },
        "content": "The list of results should look like this:"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "image::./ui_screenshots/find-example-3.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "keenlok"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003d\u003d\u003d\u003d Finding rides that fits the given condition: `filter`"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Display all rides that fits the condition in a list. It can only filter conditions that have numeric values i.e."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "keenlok"
        },
        "content": "`Maintenance` and `WaitTime`. +"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Format: `filter \u003ctag\u003e \u003ccondition\u003e [[tag] [condition]...]` +"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Can include more conditions as desired. +"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "keenlok"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "keenlok"
        },
        "content": "a|"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* `filter w/ \u003c 10` +"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Filters attractions with waiting time less than 10 minutes."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "keenlok"
        },
        "content": "The list of results should like this if no changes were made to the application (ie. delete or add or update): +"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "keenlok"
        },
        "content": "image::./ui_screenshots/filter-example-1.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* `filter w/ \u003c 10 m/ \u003e\u003d 50` +"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Filters attractions with waiting time less than 10 and maintenance of more than equals 50 days."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "keenlok"
        },
        "content": "The list of results should look like this:"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "keenlok"
        },
        "content": "image::./ui_screenshots/filter-example-2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "keenlok"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "keenlok"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "keenlok"
        },
        "content": "If a ride is selected, a `find` or `filter` is performed, the ride panel will still show the ride that was previously"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "keenlok"
        },
        "content": "selected. Future versions will automatically select the first ride on the list and allow you to see information about it"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "keenlok"
        },
        "content": "on the `BrowserPanel` or show the short help menu if no rides are found."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "keenlok"
        },
        "content": "// end::filter[]"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d Coming in v2.0"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "This section contains all commands that is related to accessing the system."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "All commands in this section have not been implemented. They will be implemented in `v2.0`."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Signing up as a user"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Creates a new user profile to allow the user to access ThanePark. +"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Format: `signup \u003cusername\u003e \u003cpassword\u003e`"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Logging into the system"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Logs in a user that has already signed up. +"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Format: `login \u003cusername\u003e \u003cpassword\u003e`"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d\u003d\u003d Logging out of the system"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Logs out a user from the system. +"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "Format: `logout`"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Security features"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Secures ThanePark data by requiring operators to log in using their identity."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Identity logging"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Command history will now track the identity of the person who executed the command."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Network deployment"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "ThanePark will have network capabilities that allow it to communicate with other devices."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Zone and tag length limit of 40 characters"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "ThanePark will be able to handle zones and tags of over 40 characters. Currently the text will overflow, thus"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "users should refrain from going over the limit."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Customizable ride image"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "You will be able to customize the image for each and every ride."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d\u003d\u003d Realtime data"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "You will be receiving live data from other sources in the network."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Also, the maintenance and wait time will update in realtime."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous ThanePark folder."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"20%,\u003c80%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|Action |Syntax"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2+|*Manage Attractions*"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "|*Add* |`add \u003cn/attraction\u003e` `\u003cm/maintenance\u003e` `\u003cw/waitTime\u003e` `\u003cz/zone\u003e` `[t/tag(s)]` +"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "  e.g. add n/Mummy m/3 w/45 z/311, Clementi Ave 2, #02-25 t/3D t/indoor"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|*Delete* |`delete \u003cindex\u003e` +"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "  e.g. delete 3"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "|*Update* |`update \u003cindex\u003e \u003cprefix/value\u003e` +"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "  e.g. update 2 m/90 w/60"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|*Shutdown* |`shutdown \u003cindex\u003e`"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|*Open* |`open \u003cindex\u003e`"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|*Maintain* |`maintain \u003cindex\u003e`"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|*Clear* |`clear`"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2+|*Get help and accessibility*"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|*Help* |`help [more]`, `help [commandWord]` +"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "e.g. help add"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|*Using Autocomplete* |kbd:[TAB] +"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "e.g. dele +"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "kbd:[TAB] completes the delete command word."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|*History* |`history [more]` +"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "e.g. history more"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|*Undo* |`undo` +"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "e.g. undo"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|*Redo* |`redo` +"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "e.g. redo"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|*Exit* |`exit` +"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "e.g. exit"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "2+|*View information on the list of rides*"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|*View all* |`viewall`"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|*View* |`view \u003cindex\u003e`"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|*View status* |`viewstatus \u003cstatus\u003e`"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "2+|*Find the relevant list of rides*"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|*Find* |`find \u003c[name] [[tag][keyword]…​]\u003e`"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "keenlok"
        },
        "content": "|*Filter* |`filter \u003ctag\u003e \u003ccondition\u003e [[tag] [condition]…​]`"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "keenlok": 70,
      "jiajunteo": 196,
      "YuPeiHenry": 256,
      "leongengsea": 81,
      "-": 139
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean allTests`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `headless` `allTests` `coverage`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Creates the `thanepark.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[[Running-Tests]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* **`allTests`** +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* **`guiTests`** +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Runs all tests in the `seedu.thanepark.ui` and `systemtests` package"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* **`nonGuiTests`** +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Runs all non-GUI tests in the `seedu.thanepark`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "package"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* **`headless`** +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the test mode as _headless_. The mode is effective for that Gradle run only so it should be combined with other test tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in headless mode due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew headless allTests` -- Runs all tests in headless mode"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean nonGuiTests` -- Cleans the project and runs non-GUI"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tests"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "YuPeiHenry": 1,
      "-": 110
    }
  },
  {
    "path": "docs/stylesheets/asciidoctor.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/* Remove comment around @import statement below when using as a custom stylesheet */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/*@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "audio,canvas,video{display:inline-block}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "audio:not([controls]){display:none;height:0}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[hidden],template{display:none}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "script{display:none!important}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "body{margin:0}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "a{background:transparent}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "a:focus{outline:thin dotted}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "a:active,a:hover{outline:0}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2em;margin:.67em 0}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]{border-bottom:1px dotted}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "b,strong{font-weight:bold}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "dfn{font-style:italic}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mark{background:#ff0;color:#000}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "code,kbd,pre,samp{font-family:monospace;font-size:1em}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "pre{white-space:pre-wrap}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:80%}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "sup{top:-.5em}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "sub{bottom:-.25em}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "img{border:0}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "svg:not(:root){overflow:hidden}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "figure{margin:0}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "legend{border:0;padding:0}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "button,input{line-height:normal}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "button,select{text-transform:none}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "button,html input[type\u003d\"button\"],input[type\u003d\"reset\"],input[type\u003d\"submit\"]{-webkit-appearance:button;cursor:pointer}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "button[disabled],html input[disabled]{cursor:default}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"checkbox\"],input[type\u003d\"radio\"]{box-sizing:border-box;padding:0}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]::-webkit-search-cancel-button,input[type\u003d\"search\"]::-webkit-search-decoration{-webkit-appearance:none}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{overflow:auto;vertical-align:top}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "table{border-collapse:collapse;border-spacing:0}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "html,body{font-size:100%}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover{cursor:pointer}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,embed{max-width:100%;height:auto}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "object,embed{height:100%}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "img{-ms-interpolation-mode:bicubic}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".left{float:left!important}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".right{float:right!important}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".text-left{text-align:left!important}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".text-right{text-align:right!important}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".text-center{text-align:center!important}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".text-justify{text-align:justify!important}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".hide{display:none}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "body{-webkit-font-smoothing:antialiased}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,svg{display:inline-block;vertical-align:middle}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{height:auto;min-height:50px}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "select{width:100%}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".center{margin-left:auto;margin-right:auto}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".spread{width:100%}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "p.lead,.paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader,.admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:#2156a5;text-decoration:underline;line-height:inherit}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover,a:focus{color:#1d4b8f}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "a img{border:none}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "p aside{font-size:.875em;line-height:1.35;font-style:italic}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "h1 small,h2 small,h3 small,#toctitle small,.sidebarblock\u003e.content\u003e.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.125em}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:1.6875em}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.375em}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "h4,h5{font-size:1.125em}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "h6{font-size:1em}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "em,i{font-style:italic;line-height:inherit}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "strong,b{font-weight:bold;line-height:inherit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:60%;line-height:inherit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "code{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square{list-style-type:square}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "ul.circle{list-style-type:circle}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "ul.disc{list-style-type:disc}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "ul.no-bullet{list-style:none}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "dl dt{margin-bottom:.3125em;font-weight:bold}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "abbr{text-transform:none}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite:before{content:\"\\2014 \\0020\"}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.75em}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:2.3125em}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.6875em}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "h4{font-size:1.4375em}}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "table thead,table tfoot{background:#f7f8f7;font-weight:bold}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "table.white tr.even, table.white tr.alt, table.white tr:nth-of-type(even) {background: none}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "body{tab-size:4}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock\u003e.content\u003e.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:after,.float-group:after{clear:both}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "*:not(pre)\u003ecode{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "pre,pre\u003ecode{line-height:1.45;color:rgba(0,0,0,.9);font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq{color:rgba(51,51,51,.8)}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "kbd{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:first-child{margin-left:0}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:last-child{margin-right:0}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".menuseq,.menu{color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before{content:\"[\";padding:0 3px 0 2px}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:after{content:\"]\";padding:0 2px 0 3px}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "p a\u003ecode:hover{color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "#header:after,#content:after,#footnotes:after,#footer:after{clear:both}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "#content{margin-top:1.25em}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "#content:before{content:none}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:only-child,body.toc2 #header\u003eh1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span:first-child{margin-left:-.125em}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span.email a{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br{display:none}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span:before{content:\"\\00a0\\2013\\00a0\"}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span.author:before{content:\"\\00a0\\22c5\\00a0\";color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span#revremark:before{content:\"\\00a0|\\00a0\"}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber{text-transform:capitalize}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber:after{content:\"\\00a0\"}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "#content\u003eh1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "#toc\u003eul{margin-left:.125em}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0\u003eli\u003ea{font-style:italic}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;list-style-type:none}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "#toc li{line-height:1.3334;margin-top:.3334em}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a{text-decoration:none}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle{color:#7a2518;font-size:1.2em}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){#toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2{padding-left:15em;padding-right:0}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.9em;margin-bottom:0}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{margin-left:0;padding-left:1em}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:15em}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{width:20em}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.95em}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{padding-left:1.25em}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:20em}}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(255,255,255,.8);line-height:1.44}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:.625em}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border-top:1px solid #efefed}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor,h2\u003ea.anchor,h3\u003ea.anchor,#toctitle\u003ea.anchor,.sidebarblock\u003e.content\u003e.title\u003ea.anchor,h4\u003ea.anchor,h5\u003ea.anchor,h6\u003ea.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor:before,h2\u003ea.anchor:before,h3\u003ea.anchor:before,#toctitle\u003ea.anchor:before,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:before,h4\u003ea.anchor:before,h5\u003ea.anchor:before,h6\u003ea.anchor:before{content:\"\\00A7\";font-size:.85em;display:block;padding-top:.1em}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1:hover\u003ea.anchor,#content h1\u003ea.anchor:hover,h2:hover\u003ea.anchor,h2\u003ea.anchor:hover,h3:hover\u003ea.anchor,#toctitle:hover\u003ea.anchor,.sidebarblock\u003e.content\u003e.title:hover\u003ea.anchor,h3\u003ea.anchor:hover,#toctitle\u003ea.anchor:hover,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:hover,h4:hover\u003ea.anchor,h4\u003ea.anchor:hover,h5:hover\u003ea.anchor,h5\u003ea.anchor:hover,h6:hover\u003ea.anchor,h6\u003ea.anchor:hover{visibility:visible}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link,h2\u003ea.link,h3\u003ea.link,#toctitle\u003ea.link,.sidebarblock\u003e.content\u003e.title\u003ea.link,h4\u003ea.link,h5\u003ea.link,h6\u003ea.link{color:#ba3925;text-decoration:none}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link:hover,h2\u003ea.link:hover,h3\u003ea.link:hover,#toctitle\u003ea.link:hover,.sidebarblock\u003e.content\u003e.title\u003ea.link:hover,h4\u003ea.link:hover,h5\u003ea.link:hover,h6\u003ea.link:hover{color:#a53221}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{text-rendering:optimizeLegibility;text-align:left;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-size:1rem;font-style:italic}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock\u003ecaption.title{white-space:nowrap;overflow:visible;max-width:0}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock #preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:inherit}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable{border-collapse:separate;border:0;background:none;width:100%}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon{text-align:center;width:80px}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon img{max-width:none}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content\u003e:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e.content\u003e.title{color:#7a2518;margin-top:0;text-align:center}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child\u003e:last-child,.exampleblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content\u003e:last-child\u003e:last-child,.sidebarblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class\u003d\"highlight\"],.listingblock pre[class^\u003d\"highlight \"],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class\u003d\"highlight\"],.sidebarblock .listingblock pre[class^\u003d\"highlight \"],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs{padding:0}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs\u003ecode{padding:1em;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.prettyprint{border-width:0}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock\u003e.content{position:relative}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock:hover code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:not([data-prompt]):before{content:\"$\"}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td.code{padding-left:.75em;padding-right:0}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno{display:inline-block;margin-right:.25em}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable .linenodiv{background:none!important;padding-right:0!important}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock{margin:0 1em 1.25em 1.5em;display:table}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock\u003e.title{margin-left:-1.5em;margin-bottom:.75em}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote{margin:0;padding:0;border:0}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote:before{content:\"\\201c\";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote\u003e.paragraph:last-child p{margin-bottom:0}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote{padding:0 0 0 .75em}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote:before{display:none}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock{margin:0 1em 1.25em 1em}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre{font-family:\"Open Sans\",\"DejaVu Sans\",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre strong{font-weight:400}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution br,.verseblock .attribution br{display:none}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract{margin:0 0 1.25em 0;display:block}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock{max-width:100%;border-collapse:separate}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock td\u003e.paragraph:last-child p\u003ep:last-child,table.tableblock th\u003ep:last-child,table.tableblock td\u003ep:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tfoot\u003etr\u003eth.tableblock,table.grid-all tfoot\u003etr\u003etd.tableblock{border-width:1px 1px 0 0}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all *\u003etr\u003e.tableblock:last-child,table.grid-cols *\u003etr\u003e.tableblock:last-child{border-right-width:0}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tbody\u003etr:last-child\u003eth.tableblock,table.grid-all tbody\u003etr:last-child\u003etd.tableblock,table.grid-all thead:last-child\u003etr\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003etd.tableblock,table.grid-rows thead:last-child\u003etr\u003eth.tableblock{border-bottom-width:0}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows tfoot\u003etr\u003eth.tableblock,table.grid-rows tfoot\u003etr\u003etd.tableblock{border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-all{border-width:1px}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-sides{border-width:0 1px}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-topbot{border-width:1px 0}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-left,td.halign-left{text-align:left}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-right,td.halign-right{text-align:right}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-center,td.halign-center{text-align:center}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-top,td.valign-top{vertical-align:top}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-bottom,td.valign-bottom{vertical-align:bottom}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-middle,td.valign-middle{vertical-align:middle}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "table thead th,table tfoot th{font-weight:bold}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock\u003ecode:only-child{background:none;padding:0}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "td\u003ediv.verse{white-space:pre}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "ol{margin-left:1.75em}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ol{margin-left:1.5em}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-left:1.125em}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd:last-child,dl dd:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "ol\u003eli p,ul\u003eli p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003e.fa-square-o:first-child,ul.checklist li\u003ep:first-child\u003e.fa-check-square-o:first-child{width:1em;font-size:.85em}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003einput[type\u003d\"checkbox\"]:first-child{width:1em;position:relative;top:1px}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli{list-style:none;float:left;margin-left:1.375em;display:block}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli\u003e*{display:block}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".unstyled dl dt{font-weight:400;font-style:normal}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "ol.arabic{list-style-type:decimal}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "ol.decimal{list-style-type:decimal-leading-zero}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "ol.loweralpha{list-style-type:lower-alpha}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperalpha{list-style-type:upper-alpha}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowerroman{list-style-type:lower-roman}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperroman{list-style-type:upper-roman}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowergreek{list-style-type:lower-greek}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable,.colist\u003etable{border:0;background:none}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable\u003etbody\u003etr,.colist\u003etable\u003etbody\u003etr{background:none}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1{font-weight:bold;padding-bottom:1.25em}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock+.colist,.listingblock+.colist{margin-top:-.5em}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:first-of-type{padding:0 .75em;line-height:1}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:last-of-type{padding:.25em 0}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.left,.imageblock[style*\u003d\"float: left\"]{margin:.25em .625em 1.25em 0}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.right,.imageblock[style*\u003d\"float: right\"]{margin:.25em 0 1.25em .625em}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock\u003e.title{margin-bottom:0}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb,.imageblock.th{border-width:6px}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb\u003e.title,.imageblock.th\u003e.title{padding:0 .125em}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left{margin-right:.625em}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".image.right{margin-left:.625em}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "a.image{text-decoration:none;display:inline-block}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "a.image object{pointer-events:none}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a,sup.footnoteref a{text-decoration:none}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote:last-of-type{margin-bottom:0}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable{border:0;background:#fff;width:100%;margin-bottom:0}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable td.line-data{width:99%}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "div.unbreakable{page-break-inside:avoid}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".big{font-size:larger}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".small{font-size:smaller}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".underline{text-decoration:underline}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ".overline{text-decoration:overline}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".line-through{text-decoration:line-through}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua{color:#00bfbf}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua-background{background-color:#00fafa}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ".black{color:#000}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".black-background{background-color:#000}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".blue{color:#0000bf}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ".blue-background{background-color:#0000fa}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia{color:#bf00bf}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia-background{background-color:#fa00fa}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ".gray{color:#606060}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".gray-background{background-color:#7d7d7d}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ".green{color:#006000}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".green-background{background-color:#007d00}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ".lime{color:#00bf00}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ".lime-background{background-color:#00fa00}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon{color:#600000}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon-background{background-color:#7d0000}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ".navy{color:#000060}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ".navy-background{background-color:#00007d}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ".olive{color:#606000}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ".olive-background{background-color:#7d7d00}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".purple{color:#600060}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ".purple-background{background-color:#7d007d}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ".red{color:#bf0000}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ".red-background{background-color:#fa0000}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ".silver{color:#909090}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".silver-background{background-color:#bcbcbc}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".teal{color:#006060}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ".teal-background{background-color:#007d7d}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ".white{color:#bfbfbf}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ".white-background{background-color:#fafafa}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow{color:#bfbf00}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow-background{background-color:#fafa00}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "span.icon\u003e.fa{cursor:default}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon [class^\u003d\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-note:before{content:\"\\f05a\";color:#19407c}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-tip:before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-warning:before{content:\"\\f071\";color:#bf6900}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-caution:before{content:\"\\f06d\";color:#bf3400}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-important:before{content:\"\\f06a\";color:#bf0000}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value] *{color:#fff!important}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]+b{display:none}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]:after{content:attr(data-value)}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "pre .conum[data-value]{position:relative;top:-.125em}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "b.conum *{color:inherit!important}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ".conum:not([data-value]):empty{display:none}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,p,td.content,span.alt{letter-spacing:-.01em}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "p{margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:none!important}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "@media print{@page{margin:1.25cm .75cm}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:inherit!important;text-decoration:underline!important}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "a.bare,a[href^\u003d\"#\"],a[href^\u003d\"mailto:\"]{text-decoration:none!important}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "a[href^\u003d\"http:\"]:not(.bare):after,a[href^\u003d\"https:\"]:not(.bare):after{content:\"(\" attr(href) \")\";display:inline-block;font-size:.875em;padding-left:.25em}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]:after{content:\" (\" attr(title) \")\"}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "pre,blockquote,tr,img,object,svg{page-break-inside:avoid}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "thead{display:table-header-group}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "svg{max-width:100%}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title{page-break-after:avoid}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "#toc,.sidebarblock,.exampleblock\u003e.content{background:none!important}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:0!important}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border:0!important}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{margin-top:1.25rem}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header{text-align:center}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header\u003eh1:first-child{border:0!important;margin:2.5em 0 1em 0}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details{border:0!important;display:block;padding:0!important}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details span:first-child{margin-left:0!important}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br{display:block}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br+span:before{content:none!important}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1\u003eh2{page-break-before:always}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{background:none!important;padding:0 .9375em}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-on-print{display:none!important}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:block!important}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-for-print{display:none!important}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ".show-for-print{display:inherit!important}}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 1,
      "-": 407
    }
  },
  {
    "path": "docs/team/jiajunteo.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d Teo Jia Jun - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d PROJECT: ThanePark"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "---"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "This portfolio serves to document my contributions to ThanePark."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "ThanePark is a desktop application used for theme park operators to manage their rides."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "It was managed and developed by a team of four members who spent three months on this project."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "This project is part of a software engineering module, CS2103T, offered by the School of Computing, National University of Singapore."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "A limitation set by the module is that the user has to interact with ThanePark using a Command Line Interface(CLI)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "It also has a Graphical User Interface(GUI) created with JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "ThanePark is written in Java, and has about 12,000 lines of code."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "My role in ThanePark is to implement the `viewstatus` feature and to update documents."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* *Major enhancement*: The addition of the `viewstatus` feature."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "** What it does: This feature allows the user to obtain a list of rides filtered by the statuses of the rides."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "** Justification: This feature allows the user to find the relevant rides with ease."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "** Highlight: This feature introduces a new predicate class, `RideStatusPredicate`,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "  to allow users to input a fixed set of statuses to compare values with the existing data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "** Credits: This feature is based on the way find feature works, with a `RideStatusPredicate` instead of a"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            `RideContainsKeywordsPredicate`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* *Minor enhancement*: The addition of the `maintain` feature, which allows the user to update the status of a selected ride to `MAINTENANCE`."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "  Also, the feature resets the maintenance and waiting time field to zero."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003djiajunteo\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-11-11\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[Functional and test code]]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "*** Updated the section 4.3 of the User Guide on view information of rides [https://github.com/CS2103-AY1819S1-W14-2/main/pull/154[Pull Request #154]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "*** Updated the section 5.4 of the Developer Guide on view status feature [https://github.com/CS2103-AY1819S1-W14-2/main/pull/101[Pull Request #101]]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "** Community: Reported bugs for other teams in the class [https://github.com/CS2103-AY1819S1-T09-1/main/issues/144[T09-1 Issue #144]]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|_Given below are sections I contributed to the User Guide."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "include::../UserGuide.adoc[tag\u003dviewstatus]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dviewstatus]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jiajunteo": 70
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "AddressBook - Level 4 is a desktop zone book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 69
    }
  },
  {
    "path": "docs/team/keenlok.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003d Lai Keen Lok - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003d\u003d PROJECT: Thane Park"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "---"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "// rewrite this make more interesting // Talk about how this portfolio highlights the work done in nus"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "This portfolio is meant to document my work done for  my software engineering module in NUS School of Computing,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "more specifically the contributions to this project Thane Park. +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "Thane Park is a desktop application used for managing the rides and attractions in a theme park. The application allows"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "theme park managers and operators to easily manage their theme park, finding the relevant information they need and updating"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "the application as they desire  using a Command Line Interface (CLI), and it has a Graphical User Interface (GUI) created"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "with JavaFX, to show them the relevant information about their attractions. It is written in Java and has about 10 kLoc. +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "My role in the project is to manage the tests and storage in the application. I have also added and enhanced a couple of"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "features, namely `filter` and `find`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* *Major enhancement*: Added *the ability to filter data entries stored in the application*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "** What it does: This feature allows users to filter entries based on the conditions that they can input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "** Justification: This feature significantly improves the application as it offers users the ability to look for the rides"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": " that they need and do not need to go through each ride in the list that fits their requirements. They can simply specify"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": " a range and the application will provide a list of entries that is within the range specified."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "** Highlights: This enhancement introduces a new predicate class, `RideContainsConditionPredicate`, to allow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "users to input a range of values to compare values with the existing data.The attributes of the rides that contains numeric"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "values are also abstracted out to create a new interface `NumericAttribute` that the classes `Maintenance` and `WaitTime` implement."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "This allows the implementation of the predicate class `AttributePredicate`, which enables it to store the user input and"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "compare the values with the `Maintenance` and `WaitTime` of a ride class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "** Credits: The `filter` feature is based on the way the `find` feature works, with a `RideContainsConditionPredicate` instead of a"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "`RideContainsKeywordsPredicate` to test the rides."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* *Minor enhancement*: The `find` feature can now parse \"zone\" and \"tags\" in addition to \"z/\" and \"t/\"."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dkeenlok[Functional code]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "** Enhancements to the Project:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "*** The `find` feature can now search ``Tag``s and ``Zone``s of the rides in addition to the names of the rides"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "*** Refactored `Address Book` to `Thane Park` in the code."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "** Project management: Reviewed Pull Requests(PR) on github:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": " [https://github.com/CS2103-AY1819S1-W14-2/main/pulls?q\u003dis%3Apr+is%3Aclosed+reviewed-by%3Akeenlok[Reviewed Pull Requests]]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "*** Updated the user guide for the `filter` and `find` features"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "*** Updated the developer guide for the implementation of the `filter` feature with sequence and activity diagrams of how"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "the `filter` command executes and works."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "*** Updated my personal portfolio page"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfilter]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfilter]"
      }
    ],
    "authorContributionMap": {
      "keenlok": 86
    }
  },
  {
    "path": "docs/team/leongengsea.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "\u003d Leong Eng Sea - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "\u003d\u003d PROJECT: ThanePark"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "---"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "The purpose of this portfolio is to document my contributions to the software engineering module(CS2103T) project,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "ThanePark."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "ThanePark is a desktop application for theme park management. The application is optimized for keyboard-oriented users"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "and retains user-friendly graphics that informs users of their decisions in a glance."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "Theme park operators can interact with it by using a Command Line Interface(CLI). It also has a Graphical User Interface"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "(GUI) created with JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "ThanePark is mostly written in Java and has about ten thousands of code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "My part in the project is to implement `open` and `shutdown` commands so that operators can open and close the rides"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "easily."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "* *Major enhancement*: Added *the ability to open and shutdown rides in ThanePark*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "** It allows the user to open and shutdown rides easily."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "** Justification: This feature improves the product significantly because a user can open/shutdown rides with a single"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "   command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "** Highlights: This enhancement introduces a new enum class, `Status`. It allows the user to know whether the rides are"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "   in `open`, `shutdown`, or `maintenance` status."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "** Credits: The `open` and `shutdown` features are based on the way `update` feature works, with the help of"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "   `UpdateRideDescriptor`."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "* *Minor enhancement*: Refactor `add`, `delete` and `update` commands."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dleongengsea[Functional"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "   code and test code]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "*** Update the user guide for the `open` and `shutdown` features."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "*** Update the developer guide for the implementation of the `open` feature with sequence and activity diagrams of how"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "the `open` command works."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "*** Update project portfolio page(PPP)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " end-users._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmanage]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dopen]"
      }
    ],
    "authorContributionMap": {
      "leongengsea": 69
    }
  },
  {
    "path": "docs/team/yupeihenry.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d Yu Pei, Henry - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d Project: ThanePark"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "---"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "This portfolio highlights my *key contributions* in project ThanePark."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "ThanePark is a *theme park management* application primarily designed for theme park operators,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "with the ability to manage and find essential theme park ride information at a glance. +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "This project was done as part of NUS CS2103 module requirement on 2018, to practice and showcase my ability"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "to develop a *Java application* as *a team of 4* undergraduate students taking the module. This project had a"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*constraint of developing a Command Line Interface (CLI)*. In the course of this project, my team"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "extended an existing AddressBook application to build this theme park management application."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *Major enhancement*: Developed features that assists users in managing commands of the ThanePark application to *improve user productivity*."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** *What it does*: It facilitates finding help on specific commands, assist users in completing commands,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "provide a mechanism to log and retrieve command history and gives users important information at a glance."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** *Justification*: The primary role of theme park operators is to manage the ride they are stationed at."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "By making the application easier to use, operators will not find using the application a chore, can quickly"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "perform required actions and focus on managing their ride."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** *Highlights*: This enhancement affects existing commands and can be easily extended on addition of new commands. There"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "is an added challenge of reducing dependencies across the `Logic`, `Model`, `Storage` and `UI` components of ThanePark."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** *Credits*: https://github.com/tipsy/j2html[j2html] library to aid formatting of HTML reports."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dyupeihenry[Code]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** *Roles*:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*** *Team Lead*: Responsible for directing the scope of the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*** *Code Quality*: Responsible for identifying areas of improvement in code written by team mates."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*** *Deliverables and Deadlines*: Responsible for managing team deadlines of the project."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*** *Integration*: Responsible for handling integration of code across all team members."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** *Project management*: Managed releases `v1.3` - `v1.4` (2 releases) on GitHub"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** *Enhancements* to existing features: Updated the GUI color scheme (Pull Requests #102)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** *Community*:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*** Reviewed Pull Requests (with non-trivial review comments): (Pull Requests #12, #48, #82, #99)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*** Contributed to forum discussions: (Issues #1, #89, #94)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "** *Tools*:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*** Installed Travis CI, coveralls and autodoc for team repository"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "*** Integrated a third party library (j2html) to the project (Pull request #79)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "include::../UserGuide.adoc[tag\u003dhelp]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "include::../UserGuide.adoc[tag\u003dautocomplete1]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "include::../UserGuide.adoc[tag\u003dautocomplete2]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "include::../UserGuide.adoc[tag\u003dhistory]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcommandManagement]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 76
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.core.StorageFileCreatingClass;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.core.Version;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.util.StringUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.logic.LogicManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ThanePark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.storage.ThaneParkStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.storage.XmlThaneParkStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.ui.Ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.ui.UiManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ThanePark ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        StorageFileCreatingClass.disableTestMode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ThaneParkStorage thaneParkStorage \u003d new XmlThaneParkStorage(userPrefs.getThaneParkFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        storage \u003d new StorageManager(thaneParkStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s thanepark book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * The data from the sample thanepark book will be used instead if {@code storage}\u0027s thanepark book is not found,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * or an empty thanepark book will be used instead if errors occur when reading {@code storage}\u0027s thanepark book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Optional\u003cReadOnlyThanePark\u003e thaneParkOptional;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ReadOnlyThanePark initialData;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            thaneParkOptional \u003d storage.readThanePark();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            initialData \u003d thaneParkOptional.orElseGet(SampleDataUtil::getSampleThanePark);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!thaneParkOptional.isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ThanePark\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                storage.saveThanePark(initialData);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ThanePark\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            initialData \u003d new ThanePark();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ThanePark\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            initialData \u003d new ThanePark();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ThanePark\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        logger.info(\"Starting ThanePark \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping ThanePark ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 10,
      "YuPeiHenry": 38,
      "-": 163
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/core/CommandsLogCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.StringReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.JAXBContext;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.Marshaller;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.PropertyException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.Unmarshaller;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.logging.CommandEntry;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.storage.XmlAdaptedCommandEntry;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.storage.XmlListOfCommandEntry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Logs down command history into a xml file. Stops writing when file size exceeds 5MB, soft limit."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Will not retrieve entries if file exceeds 2 * 5MB."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class CommandsLogCenter extends StorageFileCreatingClass {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String STANDARDIZED_ENCODING \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String STANDARDIZED_XML_HEADER \u003d String.format(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"%1$s\\\"?\u003e\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            STANDARDIZED_ENCODING);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String LIST_HEADER \u003d \"\u003cxmlListOfCommandEntry\u003e\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String LOG_FILE \u003d \"commandHistory.xml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MESSAGE_LOG_INACCESSIBLE \u003d \"%1$s cannot be accessed\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String LIST_ENDING \u003d \"\\n\u003c/xmlListOfCommandEntry\u003e\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String MESSAGE_FILE_SIZE_EXCEEDED \u003d \"Maximum file size exceeded, %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static File file;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static boolean isLogAccessible \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Initializes, create the command log file with header if it does not exist."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static void init() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            file \u003d new File(getFilePathString(LOG_FILE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                isLogAccessible \u003d isLogAccessible \u0026\u0026 createFile(getFilePathString(LOG_FILE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                FileWriter fileWriter \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                fileWriter.append(STANDARDIZED_XML_HEADER + \"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                fileWriter.append(LIST_HEADER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                fileWriter.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (IOException ie) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ie.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            isLogAccessible \u003d file.exists() \u0026\u0026 file.canWrite();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Writes the given xmlCommandEntryString to file. Throws IOException if file does not exist or cannot be written."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static void log(CommandEntry commandEntry) throws IOException, JAXBException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!isLogAccessible) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IOException(String.format(MESSAGE_LOG_INACCESSIBLE, getFilePathString(LOG_FILE)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (file.length() \u003e MAX_FILE_SIZE_IN_BYTES) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IOException(String.format(MESSAGE_FILE_SIZE_EXCEEDED, String.valueOf(MAX_FILE_SIZE_IN_BYTES)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedCommandEntry xmlCommandEntry \u003d new XmlAdaptedCommandEntry(commandEntry);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(xmlCommandEntry.getClass());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        StringWriter stringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Marshaller marshaller \u003d context.createMarshaller();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        standardizeXmlOutput(marshaller);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        marshaller.marshal(xmlCommandEntry, stringWriter);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fileWriter.append(stringWriter.toString() + \"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns a XmlListOfCommandEntry parsed from the command history log file. If file size exceeds twice of size"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * limit, IOException will be thrown."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static XmlListOfCommandEntry retrieve() throws IOException, JAXBException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!isLogAccessible) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IOException(String.format(MESSAGE_LOG_INACCESSIBLE, getFilePathString(LOG_FILE)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (file.length() \u003e 2 * MAX_FILE_SIZE_IN_BYTES) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IOException(String.format(MESSAGE_FILE_SIZE_EXCEEDED,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                String.valueOf(2 * MAX_FILE_SIZE_IN_BYTES)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        byte[] encoded \u003d Files.readAllBytes(getFilePath(LOG_FILE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String fileData \u003d new String(encoded, STANDARDIZED_ENCODING) + LIST_ENDING;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        StringReader stringReader \u003d new StringReader(fileData);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        JAXBContext jaxbContext \u003d JAXBContext.newInstance(XmlListOfCommandEntry.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Unmarshaller unmarshaller \u003d jaxbContext.createUnmarshaller();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return (XmlListOfCommandEntry) unmarshaller.unmarshal(stringReader);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Deletes the log file for command history."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static boolean delete() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return file.delete();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Sets the marshaller to use a standard XML output."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static void standardizeXmlOutput(Marshaller marshaller) throws PropertyException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        marshaller.setProperty(Marshaller.JAXB_FRAGMENT, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        marshaller.setProperty(Marshaller.JAXB_ENCODING, \"UTF-8\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        marshaller.setProperty(\"com.sun.xml.bind.xmlHeaders\", CommandsLogCenter.STANDARDIZED_XML_HEADER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 4,
      "YuPeiHenry": 115
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/core/ComponentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Base class for *Manager classes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Registers the class\u0027 event handlers in eventsCenter"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class ComponentManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Uses default {@link EventsCenter}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this(EventsCenter.getInstance());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager(EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.registerHandler(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.post(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private String appTitle \u003d \"ThanePark\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 2,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/core/EventsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.EventBus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages the event dispatching of the app."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsCenter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EventsCenter.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static EventsCenter instance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EventBus eventBus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private EventsCenter() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus \u003d new EventBus();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static EventsCenter getInstance() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            instance \u003d new EventsCenter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void clearSubscribers() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        instance \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void registerHandler(Object handler) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.register(handler);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts an event to the event bus."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public \u003cE extends BaseEvent\u003e EventsCenter post(E event) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"------[Event Posted] \" + event.getClass().getCanonicalName() + \": \" + event.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.post(event);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowWidth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowHeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Point windowCoordinates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(Double windowWidth, Double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowWidth() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowHeight() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(windowWidth, o.windowWidth)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowHeight, o.windowHeight)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.x, o.windowCoordinates.x)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.y, o.windowCoordinates.y);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final String LOG_FILE \u003d \"thanepark.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "-": 125
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public static final String MESSAGE_INVALID_RIDE_DISPLAYED_INDEX \u003d \"The ride index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String MESSAGE_RIDES_LISTED_OVERVIEW \u003d \"%1$d rides listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "leongengsea": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/core/StorageFileCreatingClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Abstract class that all storage file creating classes should implement (templates and information do not need this)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Creates files in test directory by with testing behavior by default."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public abstract class StorageFileCreatingClass {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static boolean isTestMode \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Disables test mode of all file creating subclasses"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static void disableTestMode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        isTestMode \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns the file Path depending on the test state"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static Path getFilePath(String fileName) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!isTestMode) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return Paths.get(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns the filePathString depending on the test state"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static String getFilePathString(String fileName) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return getFilePath(fileName).toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns whether the application is in testing state"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected boolean isInTestMode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return isTestMode;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates a file depending on the test state"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected static boolean createFile(String fileName) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        File file \u003d new File(fileName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (isTestMode || !file.exists()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (isTestMode) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            file.deleteOnExit();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return file.canRead() \u0026\u0026 file.canWrite();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 66
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/events/BaseEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * The base class for all event classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class BaseEvent {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * All Events should have a clear unambiguous custom toString message so that feedback message creation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * stays consistent and reusable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * For example, the event manager post method will call any posted event\u0027s toString and print it in the console."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/events/model/ThaneParkChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/** Indicates the ThanePark in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class ThaneParkChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public final ReadOnlyThanePark data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public ThaneParkChangedEvent(ReadOnlyThanePark data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return \"number of rides \" + data.getRideList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 7,
      "YuPeiHenry": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/events/storage/DataSavingExceptionEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.events.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates an exception during a file saving"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataSavingExceptionEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Exception exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataSavingExceptionEvent(Exception exception) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exception \u003d exception;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return exception.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/events/ui/ExitAppRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates a request for App termination"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitAppRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/events/ui/JumpToListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates a request to jump to the list of rides"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class JumpToListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public JumpToListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/events/ui/NewResultAvailableEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates that a new result is available."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewResultAvailableEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public NewResultAvailableEvent(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/events/ui/RidePanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Represents a selection change in the Ride List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class RidePanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final Ride newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RidePanelSelectionChangedEvent(Ride newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public Ride getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6,
      "YuPeiHenry": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/events/ui/ShowHelpRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ShowHelpRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final boolean isSummarized;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates an event requesting for help info, and the level of detail is specified by {@param summarized}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ShowHelpRequestEvent(boolean isSummarized, String commandWord) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.isSummarized \u003d isSummarized;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean isRequestSummarized() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return isSummarized;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return commandWord;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "YuPeiHenry": 18,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/events/ui/ShowHistoryRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.util.FilePathToUrl;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class ShowHistoryRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final FilePathToUrl reportFilePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates an event requesting for command history html window."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ShowHistoryRequestEvent(FilePathToUrl reportFilePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.reportFilePath \u003d reportFilePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public FilePathToUrl getReportFilePath() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return reportFilePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "YuPeiHenry": 26
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/events/ui/SuggestCommandEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class SuggestCommandEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public final String[] commandWords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public SuggestCommandEvent(String[] commandWords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.commandWords \u003d commandWords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "YuPeiHenry": 19
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/exceptions/DataConversionException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/exceptions/IllegalValueException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/util/AppUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns true if {@code itemsToCompare} contains any elements in {@code keyItems}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @param itemsToCompare"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @param keyItems"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static boolean containsAny(Set\u003c?\u003e itemsToCompare, Set\u003c?\u003e keyItems) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return Stream.of(itemsToCompare).anyMatch(item -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            for (Object keyItem : keyItems) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                if (item.contains(keyItem)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 19,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/util/ConfigUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/util/FilePathToUrl.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Class that handles FilePath to Url conversion."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class FilePathToUrl {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String MESSAGE_FILE_ERROR \u003d \"%1$s cannot be accessed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final boolean isGeneratedAtRuntime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Constructs a FilePathToUrl using a filePath String."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public FilePathToUrl (String filePath, boolean isGeneratedAtRuntime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.isGeneratedAtRuntime \u003d isGeneratedAtRuntime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns filePath String."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns the String representation of the file\u0027s Url."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String filePathToUrlString() throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return filePathToUrl().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns the URL representation of the file\u0027s Url."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public URL filePathToUrl() throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!isGeneratedAtRuntime) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return getClass().getResource(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String formattedFilePath \u003d filePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        File file \u003d new File(formattedFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!file.exists() || !file.canRead()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IOException(String.format(MESSAGE_FILE_ERROR, formattedFilePath));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return file.toURI().toURL();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 51
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.OutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Export resource to folder."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static void saveResource(InputStream resource, String target, boolean replace) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        File outFile \u003d new File(target);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (outFile.exists() \u0026\u0026 !replace) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        OutputStream out \u003d new FileOutputStream(outFile);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        byte[] buffer \u003d new byte[1024];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        int length;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        while ((length \u003d resource.read(buffer)) \u003e 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            out.write(buffer, 0, length);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        out.close();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        resource.close();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 23,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns true if {@code sentence} contains all the words in {@code string}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @param sentence"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @param string"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @return whether sentence contains any word in string"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static boolean containsStringIgnoreCase(String sentence, String string) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(string);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String preppedString \u003d string;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        checkArgument(!string.trim().isEmpty(), \"String parameter cannot be empty!\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String[] wordsInPreppedString \u003d preppedString.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return Arrays.stream(wordsInPreppedString)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                .allMatch(word -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    for (String keyWord : wordsInPreppedSentence) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        if (keyWord.toLowerCase().contains(word.toLowerCase())) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                });"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 30,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/commons/util/XmlUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBContext;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Marshaller;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Unmarshaller;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Helps with reading from and writing to XML files."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the xml data in the file as an object of the specified type."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file           Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classToConvert The class corresponding to the xml data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws JAXBException         Thrown if the file is empty or does not have the correct format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T getDataFromFile(Path file, Class\u003cT\u003e classToConvert)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(classToConvert);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!FileUtil.isFileExists(file)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(classToConvert);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Unmarshaller um \u003d context.createUnmarshaller();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return ((T) um.unmarshal(file.toFile()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the data in the file in xml format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *             Cannot be null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws JAXBException         Thrown if there is an error during converting the data"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               into xml and writing to the file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveDataToFile(Path file, T data) throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(file)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(data.getClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Marshaller m \u003d context.createMarshaller();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        m.marshal(data, file.toFile());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.CommandsLogCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.logging.CommandEntry;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.logging.ExecutedCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.storage.XmlAdaptedCommandEntry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String MESSAGE_LOG_ERROR \u003d \"%1$s when saving command history to file. %2$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static Logger logger \u003d LogsCenter.getLogger(CommandHistory.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private LinkedList\u003cString\u003e userInputHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Instantiates a new CommandHistory."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandsLogCenter.init();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Duplicates a commandHistory."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandsLogCenter.init();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered. Logs down IOException as warnings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CommandEntry commandEntry \u003d new CommandEntry(Instant.now(), new ExecutedCommand(userInput));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CommandsLogCenter.log(commandEntry);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (JAXBException | IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            logger.warning(MESSAGE_LOG_ERROR.format(e.getClass().getSimpleName(), e.getMessage()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns a list of CommandEntry. Will log error message if JAXBException | IOException | IllegalValueException"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * is met, where the commands log will be deleted and reinitialized."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public List\u003cCommandEntry\u003e getCommandEntryList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cCommandEntry\u003e result \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            List\u003cXmlAdaptedCommandEntry\u003e xmlAdaptedCommandEntryList \u003d CommandsLogCenter.retrieve().getValue();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (xmlAdaptedCommandEntryList \u003d\u003d null || xmlAdaptedCommandEntryList.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            for (XmlAdaptedCommandEntry xmlAdaptedCommandEntry : xmlAdaptedCommandEntryList) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                result.add(xmlAdaptedCommandEntry.toModelType());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (JAXBException | IOException | IllegalValueException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            logger.warning(String.format(MESSAGE_LOG_ERROR, e.getClass().getSimpleName(), e.getMessage()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!CommandsLogCenter.delete()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                logger.warning(\"Failed to recreate Commands Log file.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CommandsLogCenter.init();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of {@code userInputHistory}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new LinkedList\u003c\u003e(userInputHistory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 7,
      "YuPeiHenry": 52,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of rides */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cRide\u003e getFilteredRideList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.ThaneParkParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final ThaneParkParser thaneParkParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thaneParkParser \u003d new ThaneParkParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            Command command \u003d thaneParkParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cRide\u003e getFilteredRideList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return model.getFilteredRideList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 14,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_MAINTENANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_WAITING_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_ZONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Adds a ride to the thanepark book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a ride to the thanepark book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            + PREFIX_MAINTENANCE + \"MAINTENANCE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            + PREFIX_WAITING_TIME + \"WAITING TIME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            + PREFIX_ZONE + \"ZONE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            + PREFIX_NAME + \"Transformers \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            + PREFIX_MAINTENANCE + \"3 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            + PREFIX_WAITING_TIME + \"45 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            + PREFIX_ZONE + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            + PREFIX_TAG + \"4D \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            + PREFIX_TAG + \"indoor\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New ride added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RIDE \u003d \"This ride already exists in the thanepark book\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final Ride toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Ride}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public AddCommand(Ride ride) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(ride);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        toAdd \u003d ride;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (model.hasRide(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.addRide(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.commitThanePark();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 23,
      "leongengsea": 9,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/AllCommandWords.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/***"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * A class containing all command words in ThanePark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class AllCommandWords {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String[] COMMAND_WORDS \u003d {AddCommand.COMMAND_WORD, ClearCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        DeleteCommand.COMMAND_WORD, UpdateCommand.COMMAND_WORD, ExitCommand.COMMAND_WORD, FindCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        HelpCommand.COMMAND_WORD, HistoryCommand.COMMAND_WORD, OpenCommand.COMMAND_WORD, RedoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        ShutDownCommand.COMMAND_WORD, ViewAllCommand.COMMAND_WORD, ViewStatusCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        ViewCommand.COMMAND_WORD, UndoCommand.COMMAND_WORD, FilterCommand.COMMAND_WORD, MaintainCommand.COMMAND_WORD};"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Checks if the given commandWord is valid"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static boolean isCommandWord(String commandWord) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        boolean containsCommandWord \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (String referenceWord : COMMAND_WORDS) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            containsCommandWord \u003d containsCommandWord || commandWord.equals(referenceWord);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return containsCommandWord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "jiajunteo": 1,
      "YuPeiHenry": 18,
      "leongengsea": 3
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ThanePark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Clears the thanepark book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Data in Thane Park has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.resetData(new ThanePark());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.commitThanePark();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 8,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Deletes a ride identified using it\u0027s displayed index from the thanepark book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            + \": Deletes the ride identified by the index number used in the displayed ride list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public static final String MESSAGE_DELETE_RIDE_SUCCESS \u003d \"Deleted Ride: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e lastShownList \u003d model.getFilteredRideList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride rideToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.deleteRide(rideToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.commitThanePark();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_RIDE_SUCCESS, rideToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 13,
      "leongengsea": 3,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Thane Park as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/FilterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_MAINTENANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.RideContainsConditionPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Filters a list of all rides in the thane park which attributes matches the predicate the user inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Predicate value must be an integer."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the rides with the predicate that the user \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            + \"inputs and displays the result as a list with index numbers\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            + \"Parameters: [PREFIX] [PREDICATE]\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_MAINTENANCE + \"\u003c 1000\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final RideContainsConditionPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public FilterCommand(RideContainsConditionPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                String.format(Messages.MESSAGE_RIDES_LISTED_OVERVIEW, model.getFilteredRideList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                || (other instanceof FilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 44
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.RideContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Finds and lists all rides in thane park which name or tags contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all rides whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" battle star transformer\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final RideContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public FindCommand(RideContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                String.format(Messages.MESSAGE_RIDES_LISTED_OVERVIEW, model.getFilteredRideList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 12,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Format full help instructions for every command for display to user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows summarized command syntax.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String SHOWING_SHORT_HELP_MESSAGE \u003d \"Showing summarized command syntax.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"For full and accurate help use \\\"help more\\\". For info on \\\"add\\\", type \\\"help add\\\"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final boolean isSummarized;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates a HelpCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public HelpCommand(boolean isSummarized, String commandWord) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.isSummarized \u003d isSummarized;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent(isSummarized, commandWord));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (isSummarized) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return new CommandResult(SHOWING_SHORT_HELP_MESSAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                || (other instanceof HelpCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 isSummarized \u003d\u003d ((HelpCommand) other).isSummarized"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 commandWord.equals(((HelpCommand) other).commandWord)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "YuPeiHenry": 28,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.ui.ShowHistoryRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.util.FilePathToUrl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.storage.html.CommandReportGenerator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows history of executed commands.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MORE_INFO_FLAG \u003d \"more\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MESSAGE_HISTORY_WINDOW \u003d \"Showing requested history of commands.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MESSAGE_HISTORY_WINDOW_FAILURE \u003d \"Failed to generate Html report.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final FilePathToUrl REPORT_PAGE_PATH \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            new FilePathToUrl(\"report.html\", true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String COMMAND_ENTRY_REPORT_TITLE \u003d \"Command History Report\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String[] ARGUMENTS_BLANK \u003d {\"\"};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final boolean isSummarized;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates a HistoryCommand."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public HistoryCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this(ARGUMENTS_BLANK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates a HistoryCommand that requests for help based on {@param args}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public HistoryCommand(String[] args) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //summarized history"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (args.length \u003d\u003d 1 \u0026\u0026 args[0].isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            isSummarized \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //full history"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else if (args.length \u003d\u003d 1 \u0026\u0026 args[0].equals(MORE_INFO_FLAG)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            isSummarized \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //error"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            isSummarized \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //request for CommandEntry list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!isSummarized) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                CommandReportGenerator.getInstance()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    .generateHtml(COMMAND_ENTRY_REPORT_TITLE, history.getCommandEntryList(), REPORT_PAGE_PATH);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                EventsCenter.getInstance().post(new ShowHistoryRequestEvent(REPORT_PAGE_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return new CommandResult(MESSAGE_HISTORY_WINDOW);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return new CommandResult(MESSAGE_HISTORY_WINDOW_FAILURE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert(isSummarized);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //request for command history in the result window"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                || (other instanceof HistoryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 isSummarized \u003d\u003d ((HistoryCommand) other).isSummarized); // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6,
      "YuPeiHenry": 64,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/MaintainCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import static seedu.thanepark.model.Model.PREDICATE_SHOW_ALL_RIDES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.model.ride.Maintenance;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.model.ride.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.model.ride.Status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.model.ride.WaitTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.model.ride.Zone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " * Close an existing ride in the thane park for maintain."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "public class MaintainCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"maintain\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Close the ride identified by index for maintenance.\\n \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            + \"Parameters: INDEX (Must be a positive integer that is not larger than the size of the ride list)\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 3\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public static final String MESSAGE_MAINTAIN_RIDE_SUCCESS \u003d \"Ride is closed for maintenance: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RIDE \u003d \"This ride is already closed for maintenance.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    private final MaintainCommand.UpdateRideDescriptor maintainRideDescriptor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * @param index of the ride in the filtered ride list to maintain"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public MaintainCommand(Index index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        this.maintainRideDescriptor \u003d new MaintainCommand.UpdateRideDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        List\u003cRide\u003e lastShownList \u003d model.getFilteredRideList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        Ride rideToMaintain \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        Ride editedRide \u003d createUpdatedRide(rideToMaintain, maintainRideDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        if (rideToMaintain.isSameRide(editedRide) \u0026\u0026 rideToMaintain.equals(editedRide)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        model.updateRide(rideToMaintain, editedRide);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        model.updateFilteredRideList(PREDICATE_SHOW_ALL_RIDES);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        model.commitThanePark();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MAINTAIN_RIDE_SUCCESS, editedRide));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * Creates and returns a {@code Ride} with the details of {@code rideToMaintain}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * edited with {@code maintainRideDescriptor}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    private static Ride createUpdatedRide(Ride rideToMaintain,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                                          MaintainCommand.UpdateRideDescriptor openRideDescriptor) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assert rideToMaintain !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        Name updatedName \u003d openRideDescriptor.getName().orElse(rideToMaintain.getName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        Maintenance updatedMaintenance \u003d new Maintenance(0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        WaitTime updatedWaitTime \u003d new WaitTime(0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        Zone updatedZone \u003d openRideDescriptor.getZone().orElse(rideToMaintain.getZone());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d openRideDescriptor.getTags().orElse(rideToMaintain.getTags());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        Status updatedStatus \u003d Status.MAINTENANCE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        return new Ride(updatedName, updatedMaintenance, updatedWaitTime, updatedZone, updatedTags, updatedStatus);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        if (!(other instanceof MaintainCommand)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        MaintainCommand e \u003d (MaintainCommand) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                \u0026\u0026 maintainRideDescriptor.equals(e.maintainRideDescriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * Stores the details to edit the ride with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * corresponding field value of the ride."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public static class UpdateRideDescriptor {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        private Maintenance maintenance;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        private WaitTime waitTime;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        private Zone zone;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        private Status status;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        public UpdateRideDescriptor() {}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        public UpdateRideDescriptor(MaintainCommand.UpdateRideDescriptor toCopy) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            setMaintenance(toCopy.maintenance);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            setWaitTime(toCopy.waitTime);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            setZone(toCopy.zone);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            setStatus(toCopy.status);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        public void setMaintenance(Maintenance maintenance) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            this.maintenance \u003d maintenance;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        public Optional\u003cMaintenance\u003e getMaintenance() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            return Optional.ofNullable(maintenance);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        public void setWaitTime(WaitTime waitTime) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            this.waitTime \u003d waitTime;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        public Optional\u003cWaitTime\u003e getWaitTime() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            return Optional.ofNullable(waitTime);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        public void setZone(Zone zone) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            this.zone \u003d zone;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        public Optional\u003cZone\u003e getZone() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            return Optional.ofNullable(zone);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        public void setStatus(Status status) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            this.status \u003d status;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        public Optional\u003cStatus\u003e getStatus() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            return Optional.ofNullable(status);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            if (!(other instanceof MaintainCommand.UpdateRideDescriptor)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            MaintainCommand.UpdateRideDescriptor e \u003d (MaintainCommand.UpdateRideDescriptor) other;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                    \u0026\u0026 getMaintenance().equals(e.getMaintenance())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                    \u0026\u0026 getWaitTime().equals(e.getWaitTime())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                    \u0026\u0026 getZone().equals(e.getZone())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                    \u0026\u0026 getStatus().equals(e.getStatus());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiajunteo": 218
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/OpenCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.model.Model.PREDICATE_SHOW_ALL_RIDES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Maintenance;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.WaitTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Zone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Open an existing ride in the thanepark book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "public class OpenCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Open the ride identified by index.\\n \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            + \"Parameters: INDEX (Must be a positive integer that is not larger than the size of the ride list)\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public static final String MESSAGE_OPEN_RIDE_SUCCESS \u003d \"Ride is open: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RIDE \u003d \"This ride is already open.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    private final UpdateRideDescriptor openRideDescriptor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * @param index of the ride in the filtered ride list to open"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public OpenCommand(Index index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        this.openRideDescriptor \u003d new UpdateRideDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        List\u003cRide\u003e lastShownList \u003d model.getFilteredRideList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Ride rideToOpen \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Ride editedRide \u003d createUpdatedRide(rideToOpen, openRideDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        if (rideToOpen.isSameRide(editedRide) \u0026\u0026 rideToOpen.equals(editedRide)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.updateRide(rideToOpen, editedRide);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        model.updateFilteredRideList(PREDICATE_SHOW_ALL_RIDES);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.commitThanePark();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_OPEN_RIDE_SUCCESS, editedRide));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * Creates and returns a {@code Ride} with the details of {@code rideToOpen}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * edited with {@code openRideDescriptor}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    private static Ride createUpdatedRide(Ride rideToOpen, UpdateRideDescriptor openRideDescriptor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assert rideToOpen !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Name updatedName \u003d openRideDescriptor.getName().orElse(rideToOpen.getName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Maintenance updatedMaintenance \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                openRideDescriptor.getMaintenance().orElse(rideToOpen.getDaysSinceMaintenance());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        WaitTime updatedWaitTime \u003d openRideDescriptor.getWaitTime().orElse(rideToOpen.getWaitingTime());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Zone updatedZone \u003d openRideDescriptor.getZone().orElse(rideToOpen.getZone());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d openRideDescriptor.getTags().orElse(rideToOpen.getTags());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Status updatedStatus \u003d Status.OPEN;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new Ride(updatedName, updatedMaintenance, updatedWaitTime, updatedZone, updatedTags, updatedStatus);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        if (!(other instanceof OpenCommand)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        OpenCommand e \u003d (OpenCommand) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                \u0026\u0026 openRideDescriptor.equals(e.openRideDescriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * Stores the details to edit the ride with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * corresponding field value of the ride."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public static class UpdateRideDescriptor {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        private Maintenance maintenance;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        private WaitTime waitTime;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        private Zone zone;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        private Status status;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public UpdateRideDescriptor() {}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public UpdateRideDescriptor(UpdateRideDescriptor toCopy) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            setMaintenance(toCopy.maintenance);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            setWaitTime(toCopy.waitTime);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            setZone(toCopy.zone);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            setStatus(toCopy.status);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public void setMaintenance(Maintenance maintenance) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            this.maintenance \u003d maintenance;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public Optional\u003cMaintenance\u003e getMaintenance() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            return Optional.ofNullable(maintenance);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public void setWaitTime(WaitTime waitTime) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            this.waitTime \u003d waitTime;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public Optional\u003cWaitTime\u003e getWaitTime() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            return Optional.ofNullable(waitTime);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public void setZone(Zone zone) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            this.zone \u003d zone;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public Optional\u003cZone\u003e getZone() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return Optional.ofNullable(zone);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "         */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "         */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public void setStatus(Status status) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            this.status \u003d status;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public Optional\u003cStatus\u003e getStatus() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            return Optional.ofNullable(status);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            if (!(other instanceof UpdateRideDescriptor)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            UpdateRideDescriptor e \u003d (UpdateRideDescriptor) other;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                    \u0026\u0026 getMaintenance().equals(e.getMaintenance())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                    \u0026\u0026 getWaitTime().equals(e.getWaitTime())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    \u0026\u0026 getZone().equals(e.getZone())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                    \u0026\u0026 getStatus().equals(e.getStatus());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "keenlok": 26,
      "jiajunteo": 1,
      "leongengsea": 191
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.model.Model.PREDICATE_SHOW_ALL_RIDES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Reverts the {@code model}\u0027s thanepark book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (!model.canRedoThanePark()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.redoThanePark();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredRideList(PREDICATE_SHOW_ALL_RIDES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 8,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/ShutDownCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.model.Model.PREDICATE_SHOW_ALL_RIDES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Maintenance;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.WaitTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Zone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Shut down an existing ride in the thane park."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "public class ShutDownCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"shutdown\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shutdown the ride identified by index.\\n \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            + \"Parameters: INDEX (Must be a positive integer that is not larger than the size of the ride list)\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 3\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public static final String MESSAGE_SHUTDOWN_RIDE_SUCCESS \u003d \"Ride is shut down: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RIDE \u003d \"This ride is already shut down.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    private final UpdateRideDescriptor shutdownRideDescriptor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * @param index of the ride in the filtered ride list to open"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public ShutDownCommand(Index index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        this.shutdownRideDescriptor \u003d new UpdateRideDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        List\u003cRide\u003e lastShownList \u003d model.getFilteredRideList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Ride rideToShutDown \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Ride editedRide \u003d createUpdatedRide(rideToShutDown, shutdownRideDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        if (rideToShutDown.isSameRide(editedRide) \u0026\u0026 rideToShutDown.equals(editedRide)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.updateRide(rideToShutDown, editedRide);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        model.updateFilteredRideList(PREDICATE_SHOW_ALL_RIDES);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.commitThanePark();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SHUTDOWN_RIDE_SUCCESS, editedRide));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * Creates and returns a {@code Ride} with the details of {@code rideToOpen}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * edited with {@code shutdownRideDescriptor}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    private static Ride createUpdatedRide(Ride rideToOpen, UpdateRideDescriptor openRideDescriptor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assert rideToOpen !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Name updatedName \u003d openRideDescriptor.getName().orElse(rideToOpen.getName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Maintenance updatedMaintenance \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                openRideDescriptor.getMaintenance().orElse(rideToOpen.getDaysSinceMaintenance());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        WaitTime updatedWaitTime \u003d new WaitTime(0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Zone updatedZone \u003d openRideDescriptor.getZone().orElse(rideToOpen.getZone());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d openRideDescriptor.getTags().orElse(rideToOpen.getTags());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Status updatedStatus \u003d Status.SHUTDOWN;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new Ride(updatedName, updatedMaintenance, updatedWaitTime, updatedZone, updatedTags, updatedStatus);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        if (!(other instanceof ShutDownCommand)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        ShutDownCommand e \u003d (ShutDownCommand) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                \u0026\u0026 shutdownRideDescriptor.equals(e.shutdownRideDescriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * Stores the details to edit the ride with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * corresponding field value of the ride."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public static class UpdateRideDescriptor {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        private Maintenance maintenance;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        private WaitTime waitTime;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        private Zone zone;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        private Status status;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public UpdateRideDescriptor() {}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public UpdateRideDescriptor(UpdateRideDescriptor toCopy) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            setMaintenance(toCopy.maintenance);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            setWaitTime(toCopy.waitTime);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            setZone(toCopy.zone);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            setStatus(toCopy.status);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public void setMaintenance(Maintenance maintenance) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            this.maintenance \u003d maintenance;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public Optional\u003cMaintenance\u003e getMaintenance() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            return Optional.ofNullable(maintenance);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public void setWaitTime(WaitTime waitTime) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            this.waitTime \u003d waitTime;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public Optional\u003cWaitTime\u003e getWaitTime() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            return Optional.ofNullable(waitTime);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public void setZone(Zone zone) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            this.zone \u003d zone;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public Optional\u003cZone\u003e getZone() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return Optional.ofNullable(zone);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "         */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "         */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public void setStatus(Status status) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            this.status \u003d status;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public Optional\u003cStatus\u003e getStatus() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            return Optional.ofNullable(status);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            if (!(other instanceof UpdateRideDescriptor)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            UpdateRideDescriptor e \u003d (UpdateRideDescriptor) other;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                    \u0026\u0026 getMaintenance().equals(e.getMaintenance())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                    \u0026\u0026 getWaitTime().equals(e.getWaitTime())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    \u0026\u0026 getZone().equals(e.getZone())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                    \u0026\u0026 getStatus().equals(e.getStatus());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "keenlok": 26,
      "jiajunteo": 2,
      "leongengsea": 191
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/SuggestCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.ui.SuggestCommandEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Not a text command. Can only be triggered using {tab} in CommandBox."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Suggests a list of commands based on prefix matching."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class SuggestCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MESSAGE_SUGGEST_COMMAND_SUCCESS \u003d \"Do you mean the following commands:\\n%1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final String[] suggestions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates a SuggestCommand to suggest all matching commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public SuggestCommand(String[] suggestions) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        requireNonNull(suggestions);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.suggestions \u003d suggestions;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Combines the commandWords into a standardized format for listing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param commandWords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static String combineCommandWords(String... commandWords) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return String.join(\", \", commandWords);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String messageSuccess \u003d String.format(MESSAGE_SUGGEST_COMMAND_SUCCESS, combineCommandWords(suggestions));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        EventsCenter.getInstance().post(new SuggestCommandEvent(suggestions));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return new CommandResult(messageSuccess);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "YuPeiHenry": 38
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.model.Model.PREDICATE_SHOW_ALL_RIDES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Reverts the {@code model}\u0027s thanepark book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (!model.canUndoThanePark()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.undoThanePark();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredRideList(PREDICATE_SHOW_ALL_RIDES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 8,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/UpdateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_MAINTENANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_WAITING_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_ZONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.model.Model.PREDICATE_SHOW_ALL_RIDES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Maintenance;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import seedu.thanepark.model.ride.Status;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.WaitTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Zone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " * Updates the details of an existing ride in Thanepark."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the details of the ride identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            + \"by the index number used in the displayed ride list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            + \"[\" + PREFIX_MAINTENANCE + \"MAINTENANCE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            + \"[\" + PREFIX_WAITING_TIME + \"WAITING_TIME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            + \"[\" + PREFIX_ZONE + \"ZONE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            + PREFIX_MAINTENANCE + \"90 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            + PREFIX_WAITING_TIME + \"60\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public static final String MESSAGE_UPDATE_RIDE_SUCCESS \u003d \"Updated Ride: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public static final String MESSAGE_NOT_UPDATED \u003d \"At least one field to update must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RIDE \u003d \"This ride already exists in the thanepark book.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public static final String MESSAGE_CLOSED_RIDE \u003d \"Maintenance and Waiting Time can only be updated \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            + \"if the ride is opened.\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    private final UpdateRideDescriptor updateRideDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @param index of the ride in the filtered ride list to edit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * @param updateRideDescriptor details to edit the ride with"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public UpdateCommand(Index index, UpdateRideDescriptor updateRideDescriptor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        requireNonNull(updateRideDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        this.updateRideDescriptor \u003d new UpdateRideDescriptor(updateRideDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e lastShownList \u003d model.getFilteredRideList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride rideToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Ride editedRide \u003d createUpdatedRide(rideToEdit, updateRideDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (!rideToEdit.isSameRide(editedRide) \u0026\u0026 model.hasRide(editedRide)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.updateRide(rideToEdit, editedRide);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredRideList(PREDICATE_SHOW_ALL_RIDES);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.commitThanePark();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UPDATE_RIDE_SUCCESS, editedRide));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Creates and returns a {@code Ride} with the details of {@code rideToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * edited with {@code updateRideDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    private static Ride createUpdatedRide(Ride rideToEdit,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                                          UpdateRideDescriptor updateRideDescriptor) throws CommandException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assert rideToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        if (rideToEdit.getStatus() !\u003d Status.OPEN) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            if (updateRideDescriptor.getMaintenance().isPresent() || updateRideDescriptor.getWaitTime().isPresent()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                throw new CommandException(MESSAGE_CLOSED_RIDE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Name updatedName \u003d updateRideDescriptor.getName().orElse(rideToEdit.getName());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Maintenance updatedMaintenance \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                updateRideDescriptor.getMaintenance().orElse(rideToEdit.getDaysSinceMaintenance());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        WaitTime updatedWaitTime \u003d updateRideDescriptor.getWaitTime().orElse(rideToEdit.getWaitingTime());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Zone updatedZone \u003d updateRideDescriptor.getZone().orElse(rideToEdit.getZone());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d updateRideDescriptor.getTags().orElse(rideToEdit.getTags());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        Status updatedStatus \u003d rideToEdit.getStatus();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        return new Ride(updatedName, updatedMaintenance, updatedWaitTime, updatedZone, updatedTags, updatedStatus);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        if (!(other instanceof UpdateCommand)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateCommand e \u003d (UpdateCommand) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                \u0026\u0026 updateRideDescriptor.equals(e.updateRideDescriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Stores the details to edit the ride with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * corresponding field value of the ride."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public static class UpdateRideDescriptor {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private Maintenance maintenance;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private WaitTime waitTime;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        private Zone zone;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public UpdateRideDescriptor() {}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        public UpdateRideDescriptor(UpdateRideDescriptor toCopy) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            setMaintenance(toCopy.maintenance);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            setWaitTime(toCopy.waitTime);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            setZone(toCopy.zone);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, maintenance, waitTime, zone, tags);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void setMaintenance(Maintenance maintenance) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.maintenance \u003d maintenance;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public Optional\u003cMaintenance\u003e getMaintenance() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return Optional.ofNullable(maintenance);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void setWaitTime(WaitTime waitTime) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.waitTime \u003d waitTime;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public Optional\u003cWaitTime\u003e getWaitTime() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return Optional.ofNullable(waitTime);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public void setZone(Zone zone) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            this.zone \u003d zone;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public Optional\u003cZone\u003e getZone() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return Optional.ofNullable(zone);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            if (!(other instanceof UpdateRideDescriptor)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            UpdateRideDescriptor e \u003d (UpdateRideDescriptor) other;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    \u0026\u0026 getMaintenance().equals(e.getMaintenance())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    \u0026\u0026 getWaitTime().equals(e.getWaitTime())"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    \u0026\u0026 getZone().equals(e.getZone())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 40,
      "jiajunteo": 10,
      "leongengsea": 35,
      "YuPeiHenry": 15,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/ViewAllCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.model.Model.PREDICATE_SHOW_ALL_RIDES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.model.ride.Status;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Lists all rides in the thanepark book to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewAllCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewall\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$d rides listed! (OPEN: %2$d, SHUTDOWN: %3$d, MAINTENANCE: %4$d)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredRideList(PREDICATE_SHOW_ALL_RIDES);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        List\u003cRide\u003e filteredRideList \u003d model.getFilteredRideList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        int[] statuses \u003d getRidesOfDifferentStatus(filteredRideList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                String.format(MESSAGE_SUCCESS, model.getFilteredRideList().size(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                        statuses[0], statuses[1], statuses[2]));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public int[] getRidesOfDifferentStatus(List\u003cRide\u003e rides) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        int[] statusArray \u003d new int[3];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        statusArray[0] \u003d (int) rides.stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .filter(x -\u003e x.getStatus() \u003d\u003d Status.OPEN)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        statusArray[1] \u003d (int) rides.stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .filter(x -\u003e x.getStatus() \u003d\u003d Status.SHUTDOWN)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        statusArray[2] \u003d (int) rides.stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .filter(x -\u003e x.getStatus() \u003d\u003d Status.MAINTENANCE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        return statusArray;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 4,
      "jiajunteo": 26,
      "YuPeiHenry": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/ViewCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Views a ride identified using it\u0027s displayed index number from thane park."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Views the ride identified by the index number used in the displayed ride list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MESSAGE_SELECT_RIDE_SUCCESS \u003d \"Viewed %1$s at index %2$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e filteredRideList \u003d model.getFilteredRideList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredRideList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        String targetRideName \u003d filteredRideList.get(targetIndex.getZeroBased()).getName().fullName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_RIDE_SUCCESS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                targetRideName, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof ViewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ViewCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 11,
      "jiajunteo": 2,
      "YuPeiHenry": 2,
      "leongengsea": 1,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/ViewStatusCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.RideStatusPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " * View rides in thane park that are filtered by their status."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "public class ViewStatusCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"viewstatus\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Find all the rides with the status that the user \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            + \"inputs (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            + \"PARAMETERS: [STATUS]\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" open\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    private final RideStatusPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public ViewStatusCommand(RideStatusPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        model.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                String.format(Messages.MESSAGE_RIDES_LISTED_OVERVIEW, model.getFilteredRideList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                || (other instanceof ViewStatusCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                \u0026\u0026 predicate.equals(((ViewStatusCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "jiajunteo": 39
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/matchers/PatternMatcher.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.logic.matchers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Interface requiring classes to match a list of items as Strings against a pattern."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public interface PatternMatcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Matches a list of items as Strings against a given pattern."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String[] matchPattern(String[] items, String pattern);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 12
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/matchers/PrefixMatcher.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.logic.matchers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Singleton class that matches a list of items as Strings against a pattern."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class PrefixMatcher implements PatternMatcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String PATTERN_PREFIX \u003d \"^%1$s.*\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Default constructor"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public PrefixMatcher() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String[] matchPattern(String[] items, String pattern) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return Arrays.stream(items).filter(s"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            -\u003e s.matches(String.format(PATTERN_PREFIX, pattern))).toArray(String[]::new);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 24
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_MAINTENANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_WAITING_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_ZONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Maintenance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.WaitTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Zone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        PREFIX_MAINTENANCE, PREFIX_WAITING_TIME, PREFIX_ZONE, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ZONE, PREFIX_MAINTENANCE, PREFIX_WAITING_TIME)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Maintenance maintenance \u003d ParserUtil.parseMaintenance(argMultimap.getValue(PREFIX_MAINTENANCE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        WaitTime waitTime \u003d ParserUtil.parseWaitingTime(argMultimap.getValue(PREFIX_WAITING_TIME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Zone zone \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ZONE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride ride \u003d new Ride(name, maintenance, waitTime, zone, tagList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new AddCommand(ride);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 21,
      "YuPeiHenry": 3,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Prefix PREFIX_MAINTENANCE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Prefix PREFIX_WAITING_TIME \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Prefix PREFIX_ZONE \u003d new Prefix(\"z/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Prefix PREFIX_ZONE_FULL \u003d new Prefix(\"zone\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Prefix PREFIX_TAG_FULL \u003d new Prefix(\"tag\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "YuPeiHenry": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/parser/FilterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_MAINTENANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_TAG_FULL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_WAITING_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_ZONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_ZONE_FULL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.AttributePredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Maintenance;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.RideContainsConditionPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.WaitTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Parses input arguments and creates a new FilterCommand Object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String MESSAGE_INVALID_PREFIXES_USED \u003d \"Invalid prefixes found! \u0027%1$s\u0027\\nPlease use use \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            + \"prefixes with numeric attributes instead e.g. Maintenance: m/ or WaitTime: w/ \\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String MESSAGE_INVALID_ARGS \u003d \"Invalid arguments found! \u0027%1$s\u0027\\nPlease use \u003e, \u003c, \u003d and \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            + \"numbers only!\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * and returns an FilterCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @throws ParseException if user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_MAINTENANCE, PREFIX_WAITING_TIME,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                PREFIX_NAME, PREFIX_ZONE, PREFIX_ZONE_FULL, PREFIX_TAG, PREFIX_TAG_FULL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        checkForInvalidPrefixes(argMultimap);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Optional\u003cList\u003cString\u003e\u003e maintenanceStrings \u003d !argMultimap.getValue(PREFIX_MAINTENANCE).isPresent()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                ? Optional.empty()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                : Optional.of(argMultimap.getAllValues(PREFIX_MAINTENANCE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Optional\u003cList\u003cString\u003e\u003e waitingTimeStrings \u003d !argMultimap.getValue(PREFIX_WAITING_TIME).isPresent()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                ? Optional.empty()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                : Optional.of(argMultimap.getAllValues(PREFIX_WAITING_TIME));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cAttributePredicate\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicates \u003d getMaintenancePredicates(maintenanceStrings, predicates);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicates \u003d getWaitTimePredicate(waitingTimeStrings, predicates);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new FilterCommand(new RideContainsConditionPredicate(predicates));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Check user input for invalid prefixes."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private void checkForInvalidPrefixes(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String invalidTagsInInput \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            invalidTagsInInput \u003d invalidTagsInInput.concat(PREFIX_NAME.getPrefix() + \" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            invalidTagsInInput \u003d invalidTagsInInput.concat(PREFIX_TAG.getPrefix() + \" \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG_FULL).isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            invalidTagsInInput \u003d invalidTagsInInput.concat(PREFIX_TAG_FULL.getPrefix() + \" \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ZONE).isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            invalidTagsInInput \u003d invalidTagsInInput.concat(PREFIX_ZONE.getPrefix() + \" \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ZONE_FULL).isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            invalidTagsInInput \u003d invalidTagsInInput.concat(PREFIX_ZONE_FULL.getPrefix());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (invalidTagsInInput.length() \u003e 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_PREFIXES_USED, invalidTagsInInput));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Gets a list of predicates from the list of maintenance input if any is present"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private List\u003cAttributePredicate\u003e getWaitTimePredicate("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            Optional\u003cList\u003cString\u003e\u003e waitingTimeStrings, List\u003cAttributePredicate\u003e predicates) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cAttributePredicate\u003e newPredicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (waitingTimeStrings.isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            for (String s : waitingTimeStrings.get()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                Pair\u003cString, String\u003e waitingTimeConditions \u003d getOperatorAndValues(s);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                newPredicates.add(new AttributePredicate(waitingTimeConditions.getKey(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        new WaitTime(waitingTimeConditions.getValue())));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        newPredicates.addAll(predicates);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return newPredicates;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Gets a list of predicates from the list of wait time input if any is present"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private List\u003cAttributePredicate\u003e getMaintenancePredicates("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            Optional\u003cList\u003cString\u003e\u003e maintenanceStrings, List\u003cAttributePredicate\u003e predicates) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cAttributePredicate\u003e newPredicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (maintenanceStrings.isPresent()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            for (String s : maintenanceStrings.get()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                Pair\u003cString, String\u003e maintenanceCondition \u003d getOperatorAndValues(s);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                predicates.add(new AttributePredicate(maintenanceCondition.getKey(),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        new Maintenance(maintenanceCondition.getValue())));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        newPredicates.addAll(predicates);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return newPredicates;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns a Pair object with the operator and input value from the user input string."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Pair\u003cString, String\u003e getOperatorAndValues(String string) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String predicateString \u003d string.trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        char[] array \u003d predicateString.toCharArray();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String operator \u003d \"\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String value \u003d \"\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        for (char c : array) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            if (isInvalidCharacter(c)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_ARGS, c));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            if (c \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            if (isOperator(c)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                operator \u003d operator.concat(Character.toString(c));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            if (Character.isDigit(c)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                value \u003d value.concat(Character.toString(c));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new Pair\u003c\u003e(operator, value);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Checks if a character is an operator, i.e. \u003e, \u003c or \u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private boolean isOperator(char c) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return c \u003d\u003d \u0027\u003c\u0027 || c \u003d\u003d \u0027\u003e\u0027 || c \u003d\u003d \u0027\u003d\u0027;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Checks for invalid character in user input string"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private boolean isInvalidCharacter (char c) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return !isOperator(c) \u0026\u0026 c !\u003d \u0027 \u0027 \u0026\u0026 !Character.isDigit(c);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 161,
      "YuPeiHenry": 1
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_TAG_FULL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_ZONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_ZONE_FULL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.RideContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Zone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_ZONE, PREFIX_ZONE_FULL,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                PREFIX_TAG, PREFIX_TAG_FULL);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Optional\u003cZone\u003e address \u003d parseAndGetZone(argMultimap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Optional\u003cSet\u003cTag\u003e\u003e tags \u003d parseAndGetTags(argMultimap);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        nameKeywords \u003d removeOtherArguments(nameKeywords);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new FindCommand(new RideContainsKeywordsPredicate(Arrays.asList(nameKeywords),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                address, tags));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Checks if the argument multimap contains the \"tag\" or \"t/\" prefix and returns a set of tags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * if present."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseAndGetTags(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            tagSet.addAll(ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG_FULL).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            tagSet.addAll(ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG_FULL)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (tagSet.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return Optional.of(tagSet);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Checks if the argument multimap contains the \"thanepark\" or \"a/\" prefix and returns an Zone"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * object if either are present."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Optional\u003cZone\u003e parseAndGetZone(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ZONE).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return Optional.of(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ZONE).get()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_ZONE_FULL).isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return Optional.of(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ZONE_FULL).get()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Removes other arguments that are not supposed to be in the name string for searching."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private String[] removeOtherArguments(String[] keywords) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cString\u003e trimmedKeyWords \u003d Arrays.asList(keywords);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        int[] indexes \u003d new int[4];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        indexes[0] \u003d trimmedKeyWords.indexOf(PREFIX_TAG.getPrefix());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        indexes[1] \u003d trimmedKeyWords.indexOf(PREFIX_TAG_FULL.getPrefix());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        indexes[2] \u003d trimmedKeyWords.indexOf(PREFIX_ZONE.getPrefix());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        indexes[3] \u003d trimmedKeyWords.indexOf(PREFIX_ZONE_FULL.getPrefix());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        int smallestPositiveIndex \u003d -1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        for (int i : indexes) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            if (i \u003e\u003d 0 \u0026\u0026 (smallestPositiveIndex \u003d\u003d -1 || smallestPositiveIndex \u003e i)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                smallestPositiveIndex \u003d i;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (smallestPositiveIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return keywords;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        int lastIndexOfNameString \u003d smallestPositiveIndex;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String[] trimmedArgs \u003d new String[lastIndexOfNameString];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        for (int i \u003d 0; i \u003c lastIndexOfNameString; i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            trimmedArgs[i] \u003d trimmedKeyWords.get(i);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return trimmedArgs;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 92,
      "YuPeiHenry": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/parser/HelpCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.AllCommandWords;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Parses input arguments and creates a new HelpCommand object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String MORE_INFO_FLAG \u003d \"more\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HelpCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * and returns a HelpCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public HelpCommand parse(String args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String option \u003d args.trim().split(\" \")[0];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final boolean isSummarized;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String commandWord \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //summarized help"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (option.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            isSummarized \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //full help"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else if (option.equals(MORE_INFO_FLAG)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            isSummarized \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //help on specific command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else if (AllCommandWords.isCommandWord(option)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            isSummarized \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            commandWord \u003d option;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //showWithFilePath default summarized help"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            isSummarized \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return new HelpCommand(isSummarized, commandWord);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "YuPeiHenry": 37
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/parser/HistoryCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Parses input arguments and creates a new HelpCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class HistoryCommandParser implements Parser\u003cHistoryCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HistoryCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * and returns a HistoryCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public HistoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String[] options \u003d args.trim().split(\" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!matchesExpectedFormat(options)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HistoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return new HistoryCommand(options);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns true if matches \"history\" or \"history more\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static boolean matchesExpectedFormat(String[] options) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return options.length \u003d\u003d 1 \u0026\u0026 options[0].isEmpty()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                || options.length \u003d\u003d 1 \u0026\u0026 options[0].equals(HistoryCommand.MORE_INFO_FLAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 4,
      "YuPeiHenry": 33
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/parser/MaintainCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.logic.commands.MaintainCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " * Parses input arguments and creates a new MaintainCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "public class MaintainCommandParser implements Parser\u003cMaintainCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MaintainCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * and returns an MaintainCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public MaintainCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MaintainCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        return new MaintainCommand(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiajunteo": 33
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/parser/OpenCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " * Parses input arguments and creates a new OpenCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "public class OpenCommandParser implements Parser\u003cOpenCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the OpenCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * and returns an OpenCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public OpenCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        return new OpenCommand(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "leongengsea": 30
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Maintenance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.WaitTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Zone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Parses a {@code String daysSinceMaintenanceString} into a {@code Maintenance}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @throws ParseException if the given {@code daysSinceMaintenanceString} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static Maintenance parseMaintenance(String daysSinceMaintenanceString) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        requireNonNull(daysSinceMaintenanceString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String trimmedMaintenance \u003d daysSinceMaintenanceString.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!Maintenance.isValidMaintenance(trimmedMaintenance)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new ParseException(Maintenance.MESSAGE_MAINTENANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return new Maintenance(trimmedMaintenance);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Parses a {@code String thanepark} into an {@code Zone}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @throws ParseException if the given {@code thanepark} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static Zone parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (!Zone.isValidZone(trimmedAddress)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new ParseException(Zone.MESSAGE_ZONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new Zone(trimmedAddress);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Parses a {@code String waitingTime} into an {@code WaitTime}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @throws ParseException if the given {@code waitingTime} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static WaitTime parseWaitingTime(String waitingTime) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(waitingTime);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String trimmedWaitingTime \u003d waitingTime.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (!WaitTime.isValidWaitTime(trimmedWaitingTime)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new ParseException(WaitTime.MESSAGE_WAIT_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new WaitTime(trimmedWaitingTime);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 22,
      "YuPeiHenry": 9,
      "-": 93
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/parser/Prefix.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/parser/ShutDownCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ShutDownCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " * Parses input arguments and creates a new ShutDownCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "public class ShutDownCommandParser implements Parser\u003cShutDownCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ShutDownCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * and returns an ShutDownCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public ShutDownCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShutDownCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        return new ShutDownCommand(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "jiajunteo": 1,
      "leongengsea": 27
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/parser/SuggestCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.logic.commands.AllCommandWords;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.logic.matchers.PatternMatcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Parses input arguments and creates a new SuggestCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class SuggestCommandParser implements Parser\u003cSuggestCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private PatternMatcher patternMatcher;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public SuggestCommandParser (PatternMatcher patternMatcher) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.patternMatcher \u003d patternMatcher;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Parses the given {@code String} of pattern in the context of the SuggestCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * and returns a SuggestCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @throws ParseException if no matching commands to pattern is found or pattern is non-alphabetical."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public SuggestCommand parse(String pattern) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        requireNonNull(pattern);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        requireNonNull(patternMatcher);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final String[] suggestions;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!pattern.matches(\"[a-zA-Z]+\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        suggestions \u003d patternMatcher.matchPattern(AllCommandWords.COMMAND_WORDS, pattern);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (suggestions.length \u003c\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return new SuggestCommand(suggestions);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 44
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/parser/ThaneParkParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.logic.commands.MaintainCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ShutDownCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ViewAllCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ViewStatusCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.logic.matchers.PrefixMatcher;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class ThaneParkParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            return new UpdateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return new HistoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        case MaintainCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            return new MaintainCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        case OpenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            return new OpenCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        case ShutDownCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            return new ShutDownCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case ViewAllCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ViewAllCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        case ViewStatusCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            return new ViewStatusCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return new SuggestCommandParser(new PrefixMatcher()).parse(commandWord);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 24,
      "jiajunteo": 9,
      "YuPeiHenry": 4,
      "leongengsea": 8,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/parser/UpdateCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_MAINTENANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_WAITING_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_ZONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.UpdateCommand.UpdateRideDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "public class UpdateCommandParser implements Parser\u003cUpdateCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public UpdateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        PREFIX_MAINTENANCE, PREFIX_WAITING_TIME, PREFIX_ZONE, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateRideDescriptor updateRideDescriptor \u003d new UpdateRideDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            updateRideDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MAINTENANCE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            updateRideDescriptor.setMaintenance("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    ParserUtil.parseMaintenance(argMultimap.getValue(PREFIX_MAINTENANCE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (argMultimap.getValue(PREFIX_WAITING_TIME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            updateRideDescriptor.setWaitTime(ParserUtil.parseWaitingTime(argMultimap"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    .getValue(PREFIX_WAITING_TIME).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ZONE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            updateRideDescriptor.setZone(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ZONE).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(updateRideDescriptor::setTags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        if (!updateRideDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            throw new ParseException(UpdateCommand.MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        return new UpdateCommand(index, updateRideDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 16,
      "leongengsea": 11,
      "YuPeiHenry": 4,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/parser/ViewCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an ViewCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ViewCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/parser/ViewStatusCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ViewStatusCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.RideStatusPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Status;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " * Parses input arguments and creates a new ViewStatusCommand Object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "public class ViewStatusCommandParser implements Parser\u003cViewStatusCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewStatusCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * and returns an ViewStatusCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public ViewStatusCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        Status status;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        String[] trimmedArgs \u003d args.trim().split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        String arg \u003d trimmedArgs[0];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        if (!arg.isEmpty() \u0026\u0026 (trimmedArgs.length \u003d\u003d 1)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            if (arg.equalsIgnoreCase(\"open\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                status \u003d Status.OPEN;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            } else if (arg.equalsIgnoreCase(\"shutdown\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                status \u003d Status.SHUTDOWN;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            } else if (arg.equalsIgnoreCase(\"maintenance\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                status \u003d Status.MAINTENANCE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewStatusCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            return new ViewStatusCommand(new RideStatusPredicate(status));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewStatusCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6,
      "jiajunteo": 35
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/logic/parser/exceptions/ParseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cRide\u003e PREDICATE_SHOW_ALL_RIDES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    void resetData(ReadOnlyThanePark newData);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /** Returns the ThanePark */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    ReadOnlyThanePark getThanePark();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns true if a ride with the same identity as {@code ride} exists in the thanepark book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    boolean hasRide(Ride ride);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Deletes the given ride."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * The ride must exist in the thanepark book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    void deleteRide(Ride target);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Adds the given ride."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code ride} must not already exist in the thanepark book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    void addRide(Ride ride);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Replaces the given ride {@code target} with {@code editedRide}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code target} must exist in the thanepark book."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * The ride identity of {@code editedRide} must not be the same as another existing ride in the thanepark book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    void updateRide(Ride target, Ride editedRide);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /** Returns an unmodifiable view of the filtered ride list */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    ObservableList\u003cRide\u003e getFilteredRideList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Updates the filter of the filtered ride list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    void updateFilteredRideList(Predicate\u003cRide\u003e predicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns true if the model has previous thanepark book states to restore."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    boolean canUndoThanePark();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns true if the model has undone thanepark book states to restore."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    boolean canRedoThanePark();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Restores the model\u0027s thanepark book to its previous state."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    void undoThanePark();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Restores the model\u0027s thanepark book to its previously undone state."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    void redoThanePark();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Saves the current thanepark book state for undo/redo."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    void commitThanePark();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 31,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.model.ThaneParkChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Represents the in-memory model of the thanepark book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final VersionedThanePark versionedThanePark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final FilteredList\u003cRide\u003e filteredRides;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Initializes a ModelManager with the given thanePark and userPrefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ModelManager(ReadOnlyThanePark thanePark, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        requireAllNonNull(thanePark, userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        logger.fine(\"Initializing with thanepark book: \" + thanePark + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        versionedThanePark \u003d new VersionedThanePark(thanePark);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        filteredRides \u003d new FilteredList\u003c\u003e(versionedThanePark.getRideList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        this(new ThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void resetData(ReadOnlyThanePark newData) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        versionedThanePark.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        indicatethaneParkChanged();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public ReadOnlyThanePark getThanePark() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return versionedThanePark;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void indicatethaneParkChanged() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        raise(new ThaneParkChangedEvent(versionedThanePark));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean hasRide(Ride ride) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(ride);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return versionedThanePark.hasRide(ride);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void deleteRide(Ride target) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        versionedThanePark.removeRide(target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        indicatethaneParkChanged();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void addRide(Ride ride) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        versionedThanePark.addRide(ride);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredRideList(PREDICATE_SHOW_ALL_RIDES);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        indicatethaneParkChanged();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void updateRide(Ride target, Ride editedRide) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireAllNonNull(target, editedRide);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        versionedThanePark.updateRide(target, editedRide);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        indicatethaneParkChanged();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Ride List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Ride} backed by the internal list of"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code versionedThanePark}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public ObservableList\u003cRide\u003e getFilteredRideList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredRides);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void updateFilteredRideList(Predicate\u003cRide\u003e predicate) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        filteredRides.setPredicate(predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean canUndoThanePark() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return versionedThanePark.canUndo();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean canRedoThanePark() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return versionedThanePark.canRedo();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void undoThanePark() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        versionedThanePark.undo();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        indicatethaneParkChanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void redoThanePark() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        versionedThanePark.redo();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        indicatethaneParkChanged();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void commitThanePark() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        versionedThanePark.commit();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return versionedThanePark.equals(other.versionedThanePark)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 filteredRides.equals(other.filteredRides);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 45,
      "YuPeiHenry": 12,
      "-": 93
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/ReadOnlyThanePark.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Unmodifiable view of an thanepark book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public interface ReadOnlyThanePark {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns an unmodifiable view of the rides list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * This list will not contain any duplicate rides."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    ObservableList\u003cRide\u003e getRideList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "YuPeiHenry": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/ThanePark.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.UniqueRideList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Wraps all data at the thanepark-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Duplicates are not allowed (by .isSameRide comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class ThanePark implements ReadOnlyThanePark {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final UniqueRideList rides;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        rides \u003d new UniqueRideList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public ThanePark() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates an ThanePark using the Rides in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public ThanePark(ReadOnlyThanePark toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Replaces the contents of the ride list with {@code rides}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code rides} must not contain duplicate rides."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void setRides(List\u003cRide\u003e rides) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        this.rides.setRides(rides);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Resets the existing data of this {@code ThanePark} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void resetData(ReadOnlyThanePark newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        setRides(newData.getRideList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    //// ride-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns true if a ride with the same identity as {@code ride} exists in the thanepark book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean hasRide(Ride ride) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(ride);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return rides.contains(ride);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Adds a ride to the thanepark book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * The ride must not already exist in the thanepark book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void addRide(Ride p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        rides.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Replaces the given ride {@code target} in the list with {@code editedRide}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code target} must exist in the thanepark book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * The ride identity of {@code editedRide} must not be the same as another existing ride in the thanepark book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void updateRide(Ride target, Ride editedRide) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(editedRide);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        rides.setRide(target, editedRide);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Removes {@code key} from this {@code ThanePark}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code key} must exist in the thanepark book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void removeRide(Ride key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        rides.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return rides.asUnmodifiableObservableList().size() + \" rides\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public ObservableList\u003cRide\u003e getRideList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return rides.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                || (other instanceof ThanePark // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 rides.equals(((ThanePark) other).rides));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return rides.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 41,
      "YuPeiHenry": 2,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private Path thaneParkFilePath \u003d Paths.get(\"data\" , \"thanepark.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        setGuiSettings(700, 500, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Path getThaneParkFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return thaneParkFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setThaneParkFilePath(Path thaneParkFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.thaneParkFilePath \u003d thaneParkFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 Objects.equals(thaneParkFilePath, o.thaneParkFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return Objects.hash(guiSettings, thaneParkFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + thaneParkFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 11,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/VersionedThanePark.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * {@code ThanePark} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class VersionedThanePark extends ThanePark {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final List\u003cReadOnlyThanePark\u003e thaneParkStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public VersionedThanePark(ReadOnlyThanePark initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thaneParkStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thaneParkStateList.add(new ThanePark(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Saves a copy of the current {@code ThanePark} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thaneParkStateList.add(new ThanePark(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thaneParkStateList.subList(currentStatePointer + 1, thaneParkStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Restores the thanepark book to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        resetData(thaneParkStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Restores the thanepark book to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        resetData(thaneParkStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns true if {@code undo()} has thanepark book states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns true if {@code redo()} has thanepark book states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return currentStatePointer \u003c thaneParkStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (!(other instanceof VersionedThanePark)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark otherVersionedthanePark \u003d (VersionedThanePark) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return super.equals(otherVersionedthanePark)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 thaneParkStateList.equals(otherVersionedthanePark.thaneParkStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedthanePark.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            super(\"Current state pointer at start of thaneParkState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            super(\"Current state pointer at end of thaneParkState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 10,
      "YuPeiHenry": 14,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/logging/CommandEntry.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.logging;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Represents a command entry inside command history."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class CommandEntry implements HtmlFormattable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final DateTimeFormatter formatter \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withLocale(Locale.UK)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withZone(ZoneId.systemDefault());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final Instant timeOfEntry;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final ExecutedCommand executedCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Instantiates a CommandEntry"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public CommandEntry(Instant timeOfEntry, ExecutedCommand executedCommand) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.timeOfEntry \u003d timeOfEntry;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.executedCommand \u003d executedCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Instant getTimeOfEntry() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return timeOfEntry;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String getTimeOfEntryString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return formatter.format(timeOfEntry);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ExecutedCommand getExecutedCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return executedCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public List\u003cString\u003e getFieldHeaders() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cString\u003e headers \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        headers.add(\"Time\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        headers.add(\"CommandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        headers.add(\"Arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return headers;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public List\u003cString\u003e getFields() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cString\u003e fields \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fields.add(getTimeOfEntryString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fields.add(getExecutedCommand().getCommandWord());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fields.add(getExecutedCommand().getCommandArgs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return fields;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!(other instanceof CommandEntry)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandEntry otherCommandEntry \u003d (CommandEntry) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return Objects.equals(timeOfEntry, otherCommandEntry.getTimeOfEntry())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 Objects.equals(executedCommand, otherCommandEntry.getExecutedCommand());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 75
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/logging/ExecutedCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.logging;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.AllCommandWords;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Represents an executed command with its command word and command args."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class ExecutedCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String INVALID_COMMAND_WORD \u003d \"\u003cinvalid_command_word\u003e\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final String commandArgs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Instantiates an ExecutedCommand from a complete String."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ExecutedCommand(String commandString) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final String[] splitCommandString \u003d commandString.split(\" \", 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (AllCommandWords.isCommandWord(splitCommandString[0])"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            || splitCommandString[0].equals(INVALID_COMMAND_WORD)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            commandWord \u003d splitCommandString[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            commandArgs \u003d splitCommandString.length \u003e\u003d 2 ? splitCommandString[1] : \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            commandWord \u003d INVALID_COMMAND_WORD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            commandArgs \u003d commandString;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return commandWord;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String getCommandArgs() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return commandArgs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return commandWord + \" \" + commandArgs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            || (other instanceof ExecutedCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \u0026\u0026 Objects.equals(toString(), other.toString())); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "YuPeiHenry": 49
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/logging/HtmlFormattable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.logging;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Interface that specifies what a HtmlFormattable object for Html pages should support."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public interface HtmlFormattable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    List\u003cString\u003e getFieldHeaders();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    List\u003cString\u003e getFields();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 10
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/ride/AttributePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Tests that an attribute value matches the predicate given"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class AttributePredicate implements Predicate\u003cNumericAttribute\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private String operator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private NumericAttribute attribute;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public AttributePredicate(String operator, NumericAttribute attribute) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        this.operator \u003d operator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        this.attribute \u003d attribute;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public NumericAttribute getAttribute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return attribute;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean test(NumericAttribute attribute) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        switch (operator) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        case \"\u003c\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return attribute.getValue() \u003c this.attribute.getValue();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        case \"\u003e\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return attribute.getValue() \u003e this.attribute.getValue();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        case \"\u003c\u003d\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return attribute.getValue() \u003c\u003d this.attribute.getValue();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        case \"\u003e\u003d\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return attribute.getValue() \u003e\u003d this.attribute.getValue();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        case \"\u003d\u003d\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        case \"\u003d\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return attribute.getValue() \u003d\u003d this.attribute.getValue();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                || (other instanceof AttributePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 this.attribute.equals(((AttributePredicate) other).attribute)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 this.operator.equals(((AttributePredicate) other).operator));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 47
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/ride/Date.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "package seedu.thanepark.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " * Represents the last maintenance date, stored in Maintenance"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public Date(int daysSinceMaintenance) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        date \u003d LocalDate.now().minusDays((long) daysSinceMaintenance);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public int getDays() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        long days \u003d date.until(LocalDate.now(), DAYS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        return (int) days;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                \u0026\u0026 date.isEqual(((Date) other).date)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiajunteo": 31
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/ride/Maintenance.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Represents a Ride\u0027s days since last maintenance in the park management app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class Maintenance implements NumericAttribute {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MESSAGE_MAINTENANCE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"Maintenance should only contain positive integers with at least 1 digit long\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                   + \" and should be less than 1 billion\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MAINTENANCE_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final Date lastMaintenanceDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Constructs a {@code Maintenance}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param daysSinceMaintenanceString Days since last maintenance."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Maintenance(String daysSinceMaintenanceString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        requireNonNull(daysSinceMaintenanceString);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        checkArgument(isValidMaintenance(daysSinceMaintenanceString), MESSAGE_MAINTENANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        int value \u003d Integer.parseInt(daysSinceMaintenanceString);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        lastMaintenanceDate \u003d new Date(value);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Constructs a {@code Maintenance}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param daysSinceMaintenance Days since last maintenance."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Maintenance(int daysSinceMaintenance) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        lastMaintenanceDate \u003d new Date(daysSinceMaintenance);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public int getValue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        return lastMaintenanceDate.getDays();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns true if a given string is a valid days since last maintenance."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static boolean isValidMaintenance(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return test.matches(MAINTENANCE_VALIDATION_REGEX) \u0026\u0026 test.length() \u003c 10;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        return String.valueOf(lastMaintenanceDate.getDays()) + \" days\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            || (other instanceof Maintenance // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            \u0026\u0026 lastMaintenanceDate.equals(((Maintenance) other).lastMaintenanceDate)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        return lastMaintenanceDate.getDays();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "jiajunteo": 7,
      "YuPeiHenry": 56
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/ride/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Represents a Ride\u0027s name in the thanepark book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            \"Names should only contain alphanumeric characters, punctuation characters and spaces,\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    + \" and it should not be blank, and cannot start with a symbol\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * The first character of the thanepark must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*[\\\\p{Punct}\\\\p{Alnum} ]*\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            + \"[\\\\p{Punct} ]*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 8,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/ride/NumericAttribute.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * A numeric attribute is an attribute of the ride that contains a number"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public interface NumericAttribute {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    int getValue();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 10
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/ride/Ride.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.logging.HtmlFormattable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.exceptions.InvalidNumericAttributeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Represents a Ride in the thanepark book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class Ride implements HtmlFormattable {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final Ride RIDE_TEMPLATE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new Ride(new Name(\"Name\"), new Maintenance(0), new WaitTime(0),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Zone(\"Zone\"), new HashSet\u003c\u003e(), Status.OPEN);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final Status DEFAULT_STATUS \u003d Status.OPEN;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final Maintenance daysSinceMaintenance;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final WaitTime waitingTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final Zone zone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    //Current state"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Every field except status must be present and not null. Default value of status is OPEN."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public Ride(Name name, Maintenance daysSinceMaintenance, WaitTime waitingTime, Zone zone, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        this(name, daysSinceMaintenance, waitingTime, zone, tags, DEFAULT_STATUS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public Ride(Name name, Maintenance daysSinceMaintenance, WaitTime waitingTime, Zone zone, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Status status) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireAllNonNull(name, daysSinceMaintenance, waitingTime, zone, tags, status);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.daysSinceMaintenance \u003d daysSinceMaintenance;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.waitingTime \u003d waitingTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        this.zone \u003d zone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public WaitTime getWaitingTime() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return waitingTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Maintenance getDaysSinceMaintenance() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return daysSinceMaintenance;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public Zone getZone() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return zone;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns an immutable information set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Set\u003cString\u003e getInformation() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cString\u003e information \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        information.add(zone.value);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        information.add(daysSinceMaintenance.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        information.add(waitingTime.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Set\u003cString\u003e informationSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        informationSet.addAll(information);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return Collections.unmodifiableSet(informationSet);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns the attribute that is required."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Throws an exception if the attribute has an invalid type."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public NumericAttribute getAttribute(NumericAttribute attribute) throws InvalidNumericAttributeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (attribute instanceof WaitTime) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return this.getWaitingTime();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        } else if (attribute instanceof Maintenance) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return this.getDaysSinceMaintenance();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new InvalidNumericAttributeException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns true if both rides have the same name."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * This defines a weaker notion of equality between two rides."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean isSameRide(Ride otherRide) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (otherRide \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return otherRide !\u003d null"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 otherRide.getName().equals(getName());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public List\u003cString\u003e getFieldHeaders() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cString\u003e headers \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        headers.add(\"Status\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        headers.add(\"Days since last maintenance\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        headers.add(\"Waiting Time\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return headers;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public List\u003cString\u003e getFields() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cString\u003e fields \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fields.add(getStatus().name());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fields.add(getDaysSinceMaintenance().toString());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fields.add(getWaitingTime().toString());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return fields;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns true if both rides have the same identity and data fields."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * This defines a stronger notion of equality between two rides."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (!(other instanceof Ride)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride otherRide \u003d (Ride) other;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return otherRide.getName().equals(getName())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 otherRide.getDaysSinceMaintenance().equals(getDaysSinceMaintenance())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 otherRide.getWaitingTime().equals(getWaitingTime())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 otherRide.getZone().equals(getZone())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 otherRide.getStatus() \u003d\u003d getStatus()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 otherRide.getTags().equals(getTags());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return Objects.hash(name, daysSinceMaintenance, waitingTime, zone, status, tags);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .append(\" Maintenance: \")"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .append(getDaysSinceMaintenance())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .append(\" WaitTime: \")"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .append(getWaitingTime())"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                .append(\" Zone: \")"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                .append(getZone())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 32,
      "YuPeiHenry": 94,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/ride/RideContainsConditionPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Tests that a {@code Ride}\u0027s attributes matches the predicate given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class RideContainsConditionPredicate implements Predicate\u003cRide\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final List\u003cAttributePredicate\u003e attributePredicates;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public RideContainsConditionPredicate(List\u003cAttributePredicate\u003e predicates) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        attributePredicates \u003d predicates;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean test(Ride ride) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return attributePredicates.stream().allMatch(p -\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            NumericAttribute attributeToTest \u003d p.getAttribute();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            NumericAttribute rideAttributeToTest \u003d ride.getAttribute(attributeToTest);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return p.test(rideAttributeToTest);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        });"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                || (other instanceof RideContainsConditionPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 attributePredicates.containsAll(((RideContainsConditionPredicate) other).attributePredicates));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 31
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/ride/RideContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Tests that a {@code Ride}\u0027s attributes  matches any of the keywords given."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class RideContainsKeywordsPredicate implements Predicate\u003cRide\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Optional\u003cZone\u003e addressKeyWords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Set\u003cTag\u003e tagKeyWords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public RideContainsKeywordsPredicate(List\u003cString\u003e keywords, Optional... other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        addressKeyWords \u003d Optional.empty();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        tagKeyWords \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        getKeyWords(other);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Get other keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @param others"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private void getKeyWords(Optional... others) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        for (Optional keywords : others) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            if (keywords.isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                if (keywords.get()instanceof Zone) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    addressKeyWords \u003d keywords;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                if (keywords.get().getClass().equals(HashSet.class)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    Set\u003cTag\u003e tags \u003d (HashSet) keywords.get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    if (!tags.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        tagKeyWords \u003d tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean test(Ride ride) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        boolean result \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (addressKeyWords.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            result \u003d result || StringUtil.containsStringIgnoreCase(ride.getZone().value,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    addressKeyWords.get().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (!tagKeyWords.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            result \u003d result || CollectionUtil.containsAny(ride.getTags(), tagKeyWords);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(ride.getName().fullName, keyword)) || result;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                || (other instanceof RideContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 keywords.equals(((RideContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 70
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/ride/RideStatusPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " * Tests that a {@code Ride}\u0027s attributes matches the status given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "public class RideStatusPredicate implements Predicate\u003cRide\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public RideStatusPredicate(Status status) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public boolean test(Ride ride) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        return status.equals(ride.getStatus());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                || (other instanceof RideStatusPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                \u0026\u0026 (status.equals(((RideStatusPredicate) other).status))); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "jiajunteo": 26
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/ride/Status.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Represents the status of a ride"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    OPEN, SHUTDOWN, MAINTENANCE"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 7
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/ride/UniqueRideList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.exceptions.DuplicateRideException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.exceptions.RideNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * A list of rides that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * A ride is considered unique by comparing using {@code Ride#isSameRide(Ride)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * rides uses Ride#isSameRide(Ride) for equality so as to ensure that the ride being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * unique in terms of identity in the UniqueRideList. However, the removal of a ride uses Ride#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * as to ensure that the ride with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * @see Ride#isSameRide(Ride)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class UniqueRideList implements Iterable\u003cRide\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final ObservableList\u003cRide\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns true if the list contains an equivalent ride as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean contains(Ride toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRide);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Adds a ride to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * The ride must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void add(Ride toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new DuplicateRideException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Replaces the ride {@code target} in the list with {@code editedRide}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * The ride identity of {@code editedRide} must not be the same as another existing ride in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setRide(Ride target, Ride editedRide) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireAllNonNull(target, editedRide);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new RideNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!target.isSameRide(editedRide) \u0026\u0026 contains(editedRide)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new DuplicateRideException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        internalList.set(index, editedRide);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Removes the equivalent ride from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * The ride must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void remove(Ride toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new RideNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setRides(UniqueRideList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Replaces the contents of this list with {@code rides}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code rides} must not contain duplicate rides."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setRides(List\u003cRide\u003e rides) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireAllNonNull(rides);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!ridesAreUnique(rides)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new DuplicateRideException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        internalList.setAll(rides);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public ObservableList\u003cRide\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public Iterator\u003cRide\u003e iterator() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                || (other instanceof UniqueRideList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueRideList) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns true if {@code rides} contains only unique rides."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private boolean ridesAreUnique(List\u003cRide\u003e rides) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        for (int i \u003d 0; i \u003c rides.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            for (int j \u003d i + 1; j \u003c rides.size(); j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (rides.get(i).isSameRide(rides.get(j))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 119,
      "YuPeiHenry": 16
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/ride/WaitTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Represents a Ride\u0027s current waiting time, in minutes, in the park management app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class WaitTime implements NumericAttribute {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MESSAGE_WAIT_TIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            \"Waiting time should only contain positive integers with at least 1 digit long, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            + \"and should be less than 1 billion\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String WAIT_TIME_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final int value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Constructs a {@code WaitTime}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param waitingTimeString Waiting time in minutes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public WaitTime(String waitingTimeString) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        requireNonNull(waitingTimeString);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        checkArgument(isValidWaitTime(waitingTimeString), MESSAGE_WAIT_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        value \u003d Integer.parseInt(waitingTimeString);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Constructs a {@code WaitTime}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param waitingTime Waiting time in minutes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public WaitTime(int waitingTime) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        value \u003d waitingTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public int getValue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns true if a given string is a valid days since last maintenance."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static boolean isValidWaitTime(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return test.matches(WAIT_TIME_VALIDATION_REGEX) \u0026\u0026 test.length() \u003c 10;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return String.valueOf(value) + \" min\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            || (other instanceof WaitTime // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \u0026\u0026 value \u003d\u003d ((WaitTime) other).value); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "jiajunteo": 2,
      "YuPeiHenry": 61
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/ride/Zone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Represents a Ride\u0027s thanepark in the thanepark book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidZone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class Zone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String MESSAGE_ZONE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * The first character of the thanepark must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String ZONE_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Constructs an {@code Zone}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @param zone A valid thanepark."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public Zone(String zone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        requireNonNull(zone);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        checkArgument(isValidZone(zone), MESSAGE_ZONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        value \u003d zone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns true if a given string is a valid zone."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static boolean isValidZone(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return test.matches(ZONE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                || (other instanceof Zone // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 value.equals(((Zone) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 18,
      "YuPeiHenry": 1,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/ride/exceptions/DuplicateRideException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.ride.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Signals that the operation will result in duplicate Rides (Rides are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class DuplicateRideException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public DuplicateRideException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        super(\"Operation would result in duplicate rides\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "YuPeiHenry": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/ride/exceptions/InvalidNumericAttributeException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.ride.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Signals that the attribute type is invalid. Valid attribute classes would be WaitTime and Maintenance."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class InvalidNumericAttributeException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public InvalidNumericAttributeException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        super(\"No such Numeric Attribute Type. Please input a valid attribute type\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 10
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/ride/exceptions/RideNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.ride.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Signals that the operation is unable to find the specified ride."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class RideNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Represents a Tag in the thanepark book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ThanePark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Maintenance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.Status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.WaitTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Zone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Contains utility methods for populating {@code ThanePark} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static Ride[] getSampleRides() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new Ride[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Accelerator\"), new Maintenance(\"87\"), new WaitTime(\"1\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new Zone(\"Sci-Fi City, F3\"), getTagSet(\"HeightLimit\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Battlestar Galactica HUMAN\"), new Maintenance(\"58\"), new WaitTime(\"0\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new Zone(\"Sci-Fi City, F1\"), getTagSet(\"Red\", \"Popular\", \"Dangerous\", \"rollerCoaster\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                Status.SHUTDOWN),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Battlestar Galactica CYLON\"), new Maintenance(\"58\"), new WaitTime(\"0\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new Zone(\"Sci-Fi City, F2\"), getTagSet(\"GREY\", \"Popular\", \"Dangerous\", \"rollerCoaster\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                Status.SHUTDOWN),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"TRANSFORMERS The Ride\"), new Maintenance(\"17\"), new WaitTime(\"18\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new Zone(\"Sci-Fi City, F4\"), getTagSet(\"MeetAndGreet\", \"Popular\", \"3D\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Canopy Flyer\"), new Maintenance(\"93\"), new WaitTime(\"3\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new Zone(\"The Lost World, D2\"), getTagSet(\"neighbours\"), Status.MAINTENANCE),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Dino Sorarin\"), new Maintenance(\"28\"), new WaitTime(\"12\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new Zone(\"The Lost World, D3\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"WaterWorld\"), new Maintenance(\"28\"), new WaitTime(\"12\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new Zone(\"The Lost World, D1\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Amber Rock Climb\"), new Maintenance(\"28\"), new WaitTime(\"12\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new Zone(\"The Lost World, D4\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Jurassic Park Rapids Adventure\"), new Maintenance(\"21\"), new WaitTime(\"9\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new Zone(\"The Lost World, D5\"), getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Treasure Hunters\"), new Maintenance(\"5\"), new WaitTime(\"10\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    new Zone(\"Ancient Egypt, E1\"), getTagSet(\"children\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Revenge of the Mummy\"), new Maintenance(\"10\"), new WaitTime(\"100\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    new Zone(\"Ancient Egypt, E2\"), getTagSet(\"Popular\", \"Dangerous\", \"rollerCoaster\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    Status.MAINTENANCE),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Enchanted Airways\"), new Maintenance(\"13\"), new WaitTime(\"30\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    new Zone(\"Far Far Away, C1\"), getTagSet(\"children\", \"junior\", \"rollerCoaster\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Shrek 4D Adventure\"), new Maintenance(\"10\"), new WaitTime(\"30\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    new Zone(\"Far Far Away, C2\"), getTagSet(\"4D\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Magic Potion Spin\"), new Maintenance(\"1\"), new WaitTime(\"15\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    new Zone(\"Far Far Away, C3\"), getTagSet(\"spin\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Donkey Live\"), new Maintenance(\"51\"), new WaitTime(\"5\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    new Zone(\"Far Far Away, C4\"), getTagSet(\"singAlong\", \"stage\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Puss in Boots Giant Journey\"), new Maintenance(\"2\"), new WaitTime(\"45\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    new Zone(\"Far Far Away, C5\"), getTagSet(\"rollerCoaster\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Madagascar A Crate Adventure\"), new Maintenance(\"10\"), new WaitTime(\"5\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    new Zone(\"Madagascar, B1\"), getTagSet(\"boat\", \"river\"), Status.MAINTENANCE),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"King Juliens Beach PartyGoRound\"), new Maintenance(\"4\"), new WaitTime(\"45\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    new Zone(\"Madagascar, B2\"), getTagSet(\"carousel\"), Status.MAINTENANCE),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Lights Camera Action By Steven Spielberg\"), new Maintenance(\"100\"), new WaitTime(\"55\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    new Zone(\"New York, G1\"), getTagSet(\"celebrity\", \"11am\", \"stage\"), Status.SHUTDOWN),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new Ride(new Name(\"Sesame Street Spaghetti Space Chase\"), new Maintenance(\"0\"), new WaitTime(\"15\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                    new Zone(\"New York, G2\"), getTagSet(\"children\"), Status.SHUTDOWN),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static ReadOnlyThanePark getSampleThanePark() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThanePark sampleAb \u003d new ThanePark();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        for (Ride sampleRide : getSampleRides()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            sampleAb.addRide(sampleRide);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 59,
      "YuPeiHenry": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 4,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.events.model.ThaneParkChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public interface Storage extends ThaneParkStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    Path getThaneParkFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    Optional\u003cReadOnlyThanePark\u003e readThanePark() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    void saveThanePark(ReadOnlyThanePark thanePark) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Saves the current version of the Zone Book to the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    void handleThaneParkChangedEvent(ThaneParkChangedEvent abce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "YuPeiHenry": 10,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.events.model.ThaneParkChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Manages storage of ThanePark data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private ThaneParkStorage thaneParkStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public StorageManager(ThaneParkStorage thaneParkStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        this.thaneParkStorage \u003d thaneParkStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ThanePark methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Path getThaneParkFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return thaneParkStorage.getThaneParkFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Optional\u003cReadOnlyThanePark\u003e readThanePark() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return readThanePark(thaneParkStorage.getThaneParkFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Optional\u003cReadOnlyThanePark\u003e readThanePark(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return thaneParkStorage.readThanePark(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void saveThanePark(ReadOnlyThanePark thanePark) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        saveThanePark(thanePark, thaneParkStorage.getThaneParkFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void saveThanePark(ReadOnlyThanePark thanePark, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thaneParkStorage.saveThanePark(thanePark, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void handleThaneParkChangedEvent(ThaneParkChangedEvent event) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            saveThanePark(event.data);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "YuPeiHenry": 20,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/storage/ThaneParkStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ThanePark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Represents a storage for {@link ThanePark}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public interface ThaneParkStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    Path getThaneParkFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns ThanePark data as a {@link ReadOnlyThanePark}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    Optional\u003cReadOnlyThanePark\u003e readThanePark() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @see #getThaneParkFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    Optional\u003cReadOnlyThanePark\u003e readThanePark(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Saves the given {@link ReadOnlyThanePark} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param thanePark cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    void saveThanePark(ReadOnlyThanePark thanePark) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @see #saveThanePark(ReadOnlyThanePark)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    void saveThanePark(ReadOnlyThanePark thanePark, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 4,
      "YuPeiHenry": 12,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Represents a storage for {@link seedu.thanepark.model.UserPrefs}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Saves the given {@link seedu.thanepark.model.UserPrefs} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/storage/XmlAdaptedCommandEntry.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.logging.CommandEntry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.logging.ExecutedCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * JAXB-friendly representation of the CommandEntry."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "@XmlRootElement"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class XmlAdaptedCommandEntry {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"CommandEntry\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private String timeOfEntryString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private String executedCommandString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Constructs an XmlAdaptedCommandEntry."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public XmlAdaptedCommandEntry() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Constructs an {@code XmlAdaptedCommandEntry} with the given ride details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public XmlAdaptedCommandEntry(String timeOfEntryString, String executedCommandString) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.timeOfEntryString \u003d timeOfEntryString;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.executedCommandString \u003d executedCommandString;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Converts a given CommandEntry into this class for JAXB use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedCommandEntry"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public XmlAdaptedCommandEntry(CommandEntry source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        timeOfEntryString \u003d source.getTimeOfEntry().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executedCommandString \u003d source.getExecutedCommand().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Converts this jaxb-friendly adapted ride object into the model\u0027s CommandEntry object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ride"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public CommandEntry toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (timeOfEntryString \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Instant.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final Instant timeOfEntry \u003d Instant.parse(timeOfEntryString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (executedCommandString \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    ExecutedCommand.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final ExecutedCommand executedCommand \u003d new ExecutedCommand(executedCommandString);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return new CommandEntry(timeOfEntry, executedCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!(other instanceof XmlAdaptedCommandEntry)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedCommandEntry otherCommandEntry \u003d (XmlAdaptedCommandEntry) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return Objects.equals(timeOfEntryString, otherCommandEntry.timeOfEntryString)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 Objects.equals(executedCommandString, otherCommandEntry.executedCommandString);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 4,
      "YuPeiHenry": 80
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/storage/XmlAdaptedRide.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.Maintenance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.Status;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.WaitTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Zone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * JAXB-friendly version of the Ride."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class XmlAdaptedRide {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Ride\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final Status DEFAULT_STATUS \u003d Status.OPEN;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String DEFAULT_STATUS_STRING \u003d DEFAULT_STATUS.name();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private String daysSinceMaintenanceString;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private String waitingTimeString;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private String zone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private String statusString;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Constructs an XmlAdaptedRide."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public XmlAdaptedRide() {}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Constructs an {@code XmlAdaptedRide} with the given ride details."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public XmlAdaptedRide(String name, String daysSinceMaintenanceString, String waitingTimeString, String zone,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                          List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        this(name, daysSinceMaintenanceString, waitingTimeString, zone, tagged, DEFAULT_STATUS_STRING);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Constructs an {@code XmlAdaptedRide} with the given ride details."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public XmlAdaptedRide(String name, String daysSinceMaintenanceString, String waitingTimeString, String zone,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                          List\u003cXmlAdaptedTag\u003e tagged, String statusString) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.daysSinceMaintenanceString \u003d daysSinceMaintenanceString;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.waitingTimeString \u003d waitingTimeString;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        this.zone \u003d zone;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.statusString \u003d statusString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Converts a given Ride into this class for JAXB use."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedRide"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public XmlAdaptedRide(Ride source) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        daysSinceMaintenanceString \u003d String.valueOf(source.getDaysSinceMaintenance().getValue());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        waitingTimeString \u003d String.valueOf(source.getWaitingTime().getValue());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        zone \u003d source.getZone().value;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        statusString \u003d source.getStatus().name();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Converts this jaxb-friendly adapted ride object into the model\u0027s Ride object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ride"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public Ride toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final List\u003cTag\u003e rideTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            rideTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (daysSinceMaintenanceString \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    Maintenance.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!Maintenance.isValidMaintenance(daysSinceMaintenanceString)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IllegalValueException(Maintenance.MESSAGE_MAINTENANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final Maintenance modelMaintenance \u003d new Maintenance(daysSinceMaintenanceString);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (waitingTimeString \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, WaitTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!WaitTime.isValidWaitTime(waitingTimeString)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IllegalValueException(WaitTime.MESSAGE_WAIT_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final WaitTime modelWaitTime \u003d new WaitTime(waitingTimeString);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (zone \u003d\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Zone.class.getSimpleName()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (!Zone.isValidZone(zone)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new IllegalValueException(Zone.MESSAGE_ZONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        final Zone modelZone \u003d new Zone(zone);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(rideTags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (statusString \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Status status \u003d Status.valueOf(statusString);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new Ride(modelName, modelMaintenance, modelWaitTime, modelZone, modelTags, status);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (!(other instanceof XmlAdaptedRide)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedRide otherRide \u003d (XmlAdaptedRide) other;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return Objects.equals(name, otherRide.name)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 Objects.equals(daysSinceMaintenanceString, otherRide.daysSinceMaintenanceString)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 Objects.equals(waitingTimeString, otherRide.waitingTimeString)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 Objects.equals(zone, otherRide.zone)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 tagged.equals(otherRide.tagged)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 Objects.equals(statusString, otherRide.statusString);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 35,
      "YuPeiHenry": 56,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ride"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 4,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Stores thanePark data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Saves the given thanepark data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableThanePark thanePark)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            XmlUtil.saveDataToFile(file, thanePark);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns thanepark book in the file or an empty thanepark book"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static XmlSerializableThanePark loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableThanePark.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 7,
      "YuPeiHenry": 3,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/storage/XmlListOfCommandEntry.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * JAXB-friendly list of XmlAdaptedCommandEntry."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "@XmlRootElement"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class XmlListOfCommandEntry {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @XmlElement(name \u003d \"xmlAdaptedCommandEntry\", required \u003d true)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private List\u003cXmlAdaptedCommandEntry\u003e value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Constructs an XmlListOfCommandEntry."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public XmlListOfCommandEntry() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public List\u003cXmlAdaptedCommandEntry\u003e getValue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!(other instanceof XmlListOfCommandEntry)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlListOfCommandEntry otherListOfCommandEntry \u003d (XmlListOfCommandEntry) other;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return Objects.equals(value, otherListOfCommandEntry.getValue());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 40
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/storage/XmlSerializableThanePark.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ThanePark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * An Immutable ThanePark that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "@XmlRootElement(name \u003d \"thanepark\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class XmlSerializableThanePark {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RIDE \u003d \"Rides list contains duplicate ride(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private List\u003cXmlAdaptedRide\u003e rides;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Creates an empty XmlSerializableThanePark."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public XmlSerializableThanePark() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        rides \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public XmlSerializableThanePark(ReadOnlyThanePark src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        rides.addAll(src.getRideList().stream().map(XmlAdaptedRide::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Converts this thanepark into the model\u0027s {@code ThanePark} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code XmlAdaptedRide}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public ThanePark toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ThanePark thanePark \u003d new ThanePark();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        for (XmlAdaptedRide p : rides) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            Ride ride \u003d p.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (thanePark.hasRide(ride)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            thanePark.addRide(ride);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return thanePark;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (!(other instanceof XmlSerializableThanePark)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return rides.equals(((XmlSerializableThanePark) other).rides);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 21,
      "YuPeiHenry": 6,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/storage/XmlThaneParkStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * A class to access ThanePark data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class XmlThaneParkStorage implements ThaneParkStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlThaneParkStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public XmlThaneParkStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Path getThaneParkFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Optional\u003cReadOnlyThanePark\u003e readThanePark() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return readThanePark(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Similar to {@link #readThanePark()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Optional\u003cReadOnlyThanePark\u003e readThanePark(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            logger.info(\"ThanePark file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlSerializableThanePark xmlthanePark \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return Optional.of(xmlthanePark.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void saveThanePark(ReadOnlyThanePark thanePark) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        saveThanePark(thanePark, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Similar to {@link #saveThanePark(ReadOnlyThanePark)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void saveThanePark(ReadOnlyThanePark thanePark, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        requireNonNull(thanePark);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableThanePark(thanePark));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "YuPeiHenry": 19,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/storage/html/CommandReportGenerator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.storage.html;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import j2html.tags.ContainerTag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.logging.CommandEntry;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Singleton Class for generating command history report formatted as a Html page."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class CommandReportGenerator extends HtmlGenerator\u003cCommandEntry\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static CommandReportGenerator instance;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Required for singleton."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private CommandReportGenerator() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static CommandReportGenerator getInstance() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            instance \u003d new CommandReportGenerator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns a ContainerTag representation of the generated table with commandEntryList as entries."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ContainerTag generateBody(List\u003cCommandEntry\u003e data) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return generateHorizontalTable(data);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 36
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/storage/html/HtmlGenerator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.storage.html;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.attrs;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.body;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.div;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.h1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.h3;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.head;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.html;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.link;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.table;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.tbody;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.td;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.th;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.thead;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.tr;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import j2html.TagCreator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import j2html.tags.ContainerTag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.util.FilePathToUrl;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.util.FileUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.logging.HtmlFormattable;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Abstract class that generates a Html page with a Time Generated timestamp."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Accepts a HtmlFormattable type argument."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public abstract class HtmlGenerator\u003cHtmlData extends HtmlFormattable\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String MESSAGE_TIME_GENERATED \u003d \"report generated at: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final DateTimeFormatter formatter \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withLocale(Locale.UK)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withZone(ZoneId.systemDefault());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Generates a Html report with commandEntryList as entries as fileName."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void generateHtml(String title, List\u003cHtmlData\u003e data, FilePathToUrl filePathToUrl)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String content \u003d generateHtmlLayout(title, data);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        createFile(filePathToUrl.getFilePath(), content);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        FileUtil.saveResource(getClass().getResourceAsStream(\"/docs/stylesheets/asciidoctor.css\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \"asciidoctor.css\", false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns a String representation of the generated Html report with commandEntryList as entries."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private String generateHtmlLayout(String title, List\u003cHtmlData\u003e data) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return html("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            head("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                title(title),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                link().withRel(\"stylesheet\").withHref(\"asciidoctor.css\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            body("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                generateHeader(title),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                generateBody(data)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            )"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ).withStyle(\"padding: 10px 30px\").renderFormatted();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Return ContainerTag representation of page header."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ContainerTag generateHeader(String title) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return TagCreator.main(attrs(\"#main.header\"), h1(title),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            h3(String.format(MESSAGE_TIME_GENERATED, formatter.format(Instant.now()))));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Return ContainerTag representation of page body."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ContainerTag generateBody(List\u003cHtmlData\u003e data) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return div();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Generates a horizontal table with HtmlFormattable data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected ContainerTag generateHorizontalTable(List\u003cHtmlData\u003e data) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (data.isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return div();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ContainerTag headers \u003d tr();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (String header : data.get(0).getFieldHeaders()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            headers.with(th(header));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ContainerTag rows \u003d tbody();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (HtmlData rowData : data) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            rows.with(generateTableRow(rowData));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return table("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            thead(headers),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            rows"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ).withStyle(\"width: 100%\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Generates a table row with HtmlFormattable data."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private ContainerTag generateTableRow(HtmlData rowData) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ContainerTag row \u003d tr();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (String entry : rowData.getFields()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            row.with(td(entry));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return row;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Generates a vertical table with 2 columns using HtmlFormattable data."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected ContainerTag generateVerticalTable(HtmlData data) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ContainerTag table \u003d table().withStyle(\"width: 100%\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cString\u003e template \u003d data.getFieldHeaders();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        int totalFields \u003d template.size();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (int row \u003d 0; row \u003c totalFields; row++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ContainerTag htmlRow \u003d tr();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            htmlRow.with(th(template.get(row)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            htmlRow.with(td(data.getFields().get(row)).withId(template.get(row)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            table.with(htmlRow);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return table;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates the html file and writes the html content into it. Overwrites existing files."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Throws IOException if file cannot be written to."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void createFile(String fileName, String content) throws IOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        File file \u003d new File(fileName);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(fileName, false);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fileWriter.append(content);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 148
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/storage/html/RidePageGenerator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.storage.html;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.div;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.h2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.img;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static j2html.TagCreator.p;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import j2html.tags.ContainerTag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.util.FilePathToUrl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Singleton Class for generating a Html page used to display ride details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class RidePageGenerator extends HtmlGenerator\u003cRide\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static RidePageGenerator instance;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Required for singleton."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private RidePageGenerator() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static RidePageGenerator getInstance() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            instance \u003d new RidePageGenerator();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Generates a Html page to display ride information."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void generateHtml(String title, Ride data, FilePathToUrl filePathToUrl)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cRide\u003e dataAsList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        dataAsList.add(data);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        generateHtml(title, dataAsList, filePathToUrl);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        FileUtil.saveResource(getClass().getResourceAsStream(\"/docs/images/ride.png\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \"ride.png\", false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        FileUtil.saveResource(getClass().getResourceAsStream(\"/docs/stylesheets/asciidoctor.css\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \"asciidoctor.css\", false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ContainerTag generateHeader(String title) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return div("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            div("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                p(h2().withId(\"name\"))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ).withStyle(\"height: auto; min-width: 200px; width: 50%; display: inline-block; left: 0px;\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + \"word-wrap: break-word\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            div("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                img().attr(\"src\u003d\\\"ride.png\\\" alt\u003d\\\"ride\\\"\").withStyle(\"height: auto; width: 100%\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ).withStyle(\"min-width: 200px; height: auto; width: 40%; display: inline-block;\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                   + \"right: 0px; vertical-align:top\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ContainerTag generateBody(List\u003cRide\u003e data) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return generateVerticalTable(data.get(0));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 69
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.ui.SuggestCommandEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.ListElementPointer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.logic.matchers.PrefixMatcher;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.logic.parser.SuggestCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final int CHARACTER_LIMIT \u003d 250;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private String pendingText \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private int caretPosition \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        commandTextField.caretPositionProperty().addListener((unused1) -\u003e updateCaretPosition());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Directly taken from"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //https://stackoverflow.com/questions/22714268/how-to-limit-the-amount-of-characters-a-javafx-textfield/31161519"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        commandTextField.lengthProperty().addListener(new ChangeListener\u003cNumber\u003e() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            public void changed(ObservableValue\u003c? extends Number\u003e observable,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                Number oldValue, Number newValue) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (newValue.intValue() \u003e oldValue.intValue()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    // Check if the new character is greater than CHARACTER_LIMIT"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    if (commandTextField.getText().length() \u003e\u003d CHARACTER_LIMIT) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        // if it\u0027s 11th character then just setText to previous"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        // one"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        commandTextField.setText(commandTextField.getText().substring(0, CHARACTER_LIMIT));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        case TAB:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            preventTabNavigation();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            suggestCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Keeps track of any change in caret position while the commandTextField is focused."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void updateCaretPosition() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!commandTextField.isFocused()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        caretPosition \u003d commandTextField.getCaretPosition();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Negates the effect of tab navigation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void preventTabNavigation() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        commandTextField.requestFocus();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        commandTextField.positionCaret(caretPosition);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Suggests commands with the text in the box as arguments. Does not behave like an actual command."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void suggestCommand() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            SuggestCommandParser parser \u003d new SuggestCommandParser(new PrefixMatcher());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            SuggestCommand suggestCommand \u003d parser.parse(commandTextField.getText().split(\" \")[0]);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CommandResult commandResult \u003d suggestCommand.execute(null, null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!pendingText.isEmpty()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                replaceText(pendingText);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                pendingText \u003d \"\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            replaceText(pendingText);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            pendingText \u003d \"\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void handleSuggestCommandEvent(SuggestCommandEvent event) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (event.commandWords.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            pendingText \u003d event.commandWords[0];"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 10,
      "YuPeiHenry": 82,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.events.ui.ShowHistoryRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.ui.browser.AboutUsWindow;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.ui.browser.BrowserPanel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.ui.browser.HelpWindow;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.ui.browser.HistoryWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.ui.exceptions.AccessibilityException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private RideListPanel rideListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private AboutUsWindow aboutUsWindow;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private HistoryWindow historyWindow;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private StackPane rideListPanelPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        aboutUsWindow \u003d new AboutUsWindow();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        historyWindow \u003d new HistoryWindow();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        rideListPanel \u003d new RideListPanel(logic.getFilteredRideList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        rideListPanelPlaceholder.getChildren().add(rideListPanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getThaneParkFilePath());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Handle request for help with level of detail specified by {@param event}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void handleHelp(ShowHelpRequestEvent event) throws AccessibilityException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (event.isRequestSummarized()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            browserPanel.loadDefaultPage();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            rideListPanel.unselect();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            showHelpWindow();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!event.getCommandWord().isEmpty()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            helpWindow.scrollToCommandWord(event.getCommandWord());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void showHelpWindow() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Opens the about us window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void showAboutUsWindow() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!aboutUsWindow.isShowing()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            aboutUsWindow.show();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            aboutUsWindow.focus();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideListPanel getRideListPanel() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return rideListPanel;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            handleHelp(event);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (AccessibilityException ae) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            logger.warning(ae.getMessage());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void handleShowHistoryEvent(ShowHistoryRequestEvent event) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        historyWindow.showWithFilePath(event.getReportFilePath());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 62,
      "-": 187
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(event.message));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/ui/RideCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.Status;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.ui.exceptions.AccessibilityException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * An UI component that displays information of a {@code Ride}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class RideCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String FXML \u003d \"RideListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on ThanePark level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public final Ride ride;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private FlowPane rideInfo;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private Label statusString;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideCard(Ride ride, int displayedIndex) throws AccessibilityException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        this.ride \u003d ride;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        name.setText(ride.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ride.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        rideInfo.getChildren().add(new Label(ride.getZone().value));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        rideInfo.getChildren().add(new Label(ride.getDaysSinceMaintenance().toString()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        rideInfo.getChildren().add(new Label(ride.getWaitingTime().toString()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        statusString.setText(ride.getStatus().name());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (ride.getStatus().equals(Status.OPEN)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            statusString.setStyle(\"-fx-background-color: #27D858\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        } else if (ride.getStatus().equals(Status.SHUTDOWN)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            statusString.setStyle(\"-fx-background-color: #CC3045\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        } else if (ride.getStatus().equals(Status.MAINTENANCE)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            statusString.setStyle(\"-fx-background-color: #CC6A26\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            //error"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            throw new AccessibilityException(String.format(\"Status of %1s is unknown.\", ride.getName().fullName));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (!(other instanceof RideCard)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        RideCard card \u003d (RideCard) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 ride.equals(card.ride);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 7,
      "jiajunteo": 5,
      "YuPeiHenry": 24,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/ui/RideListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.events.ui.RidePanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.ui.exceptions.AccessibilityException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Panel containing the list of rides."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class RideListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String FXML \u003d \"RideListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RideListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private ListView\u003cRide\u003e rideListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideListPanel(ObservableList\u003cRide\u003e rideList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        setConnections(rideList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private void setConnections(ObservableList\u003cRide\u003e rideList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        rideListView.setItems(rideList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        rideListView.setCellFactory(listView -\u003e new RideListViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        rideListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        logger.fine(\"Selection in ride list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        raise(new RidePanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Unselects current {@code RideCard}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void unselect() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Platform.runLater(() -\u003e rideListView.getSelectionModel().clearSelection());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Scrolls to the {@code RideCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            rideListView.scrollTo(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            rideListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Ride} using a {@code RideCard}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    class RideListViewCell extends ListCell\u003cRide\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        protected void updateItem(Ride ride, boolean empty) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            super.updateItem(ride, empty);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            if (empty || ride \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    setGraphic(new RideCard(ride, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                } catch (AccessibilityException ae) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    logger.warning(ae.getMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6,
      "YuPeiHenry": 33,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.events.model.ThaneParkChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void handleThaneParkChangedEvent(ThaneParkChangedEvent tpce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(tpce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 5,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Stops the UI. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    void stop();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/thanepark_32.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/BlueTheme.css\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 11,
      "-": 109
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises the event via {@link EventsCenter#post(BaseEvent)}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(event);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Registers the object as an event handler at the {@link EventsCenter}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param handler usually {@code this}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void registerAsAnEventHandler(Object handler) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(handler);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 4,
      "-": 102
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/ui/browser/AboutUsWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.ui.browser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.util.FilePathToUrl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Controller for an about us page"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class AboutUsWindow extends BrowserRelatedUiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final FilePathToUrl ABOUT_US_FILE_PATH \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new FilePathToUrl(\"/docs/AboutUsWindow.html\", false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AboutUsWindow.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String FXML \u003d \"AboutUsWindow.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private WebView aboutUsWindow;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates a new AboutUsWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param root Stage to use as the root of the AboutUsWindow."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public AboutUsWindow(Stage root) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        loadPage(ABOUT_US_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates a new AboutUsWindow."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public AboutUsWindow() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected WebView getWebView() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return aboutUsWindow;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Shows the aboutUs window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        logger.fine(\"Showing about us page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns true if the aboutUs window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Focuses on the aboutUs window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 85
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/ui/browser/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.ui.browser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.events.ui.RidePanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.util.FilePathToUrl;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.storage.html.RidePageGenerator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class BrowserPanel extends BrowserRelatedUiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final FilePathToUrl RIDE_PAGE_PATH \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new FilePathToUrl(\"ride.html\", true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String RIDE_PAGE_TITLE \u003d \"Ride information\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String TEXT_REPLACEMENT_JAVASCRIPT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \"function updateRide(listOfFields) {\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        + \"   for (index in listOfFields) {\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        + \"       document.getElementById(listOfFields[index][0]).innerHTML \u003d listOfFields[index][1];\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        + \"   }\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        + \"}\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            RidePageGenerator.getInstance().generateHtml(RIDE_PAGE_TITLE, Ride.RIDE_TEMPLATE, RIDE_PAGE_PATH);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            loadDefaultPage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (IOException ie) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ie.printStackTrace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            logger.warning(\"Unable to create ride page.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected WebView getWebView() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return browser;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Loads the ride information page using Javascript and BrowserRelatedUiPart.loadPage"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void loadRidePage(Ride ride) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        int totalFields \u003d ride.getFieldHeaders().size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        StringBuilder parameters \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        parameters.append(String.format(\"[\\\"%1s\\\", \\\"%2s\\\"], \", \"name\", ride.getName().fullName));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (int i \u003d 0; i \u003c totalFields; i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            parameters.append(String.format(\"[\\\"%1s\\\", \\\"%2s\\\"], \","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                ride.getFieldHeaders().get(i), ride.getFields().get(i)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        queuedJavascriptCommands.add(TEXT_REPLACEMENT_JAVASCRIPT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        queuedJavascriptCommands.add(String.format(\"updateRide([%1s])\", parameters.toString()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        loadPage(RIDE_PAGE_PATH);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Loads the short Help file as the default HTML file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void loadDefaultPage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        loadPage(HelpWindow.SHORT_HELP_FILE_PATH);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void handleRidePanelSelectionChangedEvent(RidePanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        loadRidePage(event.getNewSelection());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "YuPeiHenry": 52,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/ui/browser/BrowserRelatedUiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.ui.browser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.concurrent.Worker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.util.FilePathToUrl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Abstract class that loads Html pages, handles IOException when page cannot be read, and has ability to queue"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Javascript calls for running after the page loads completely. Right click functionality is disabled by default."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Override the webView getter when extending this abstract class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public abstract class BrowserRelatedUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final int MAX_QUEUE_SIZE \u003d 15;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected ArrayList\u003cString\u003e queuedJavascriptCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public BrowserRelatedUiPart(String fxml) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        super(fxml);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public BrowserRelatedUiPart(String fxml, T root) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        super(fxml, root);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Initializes the BrowserRelatedUiPart. Disables rightclick, enables Javascript and adds a listener to execute"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * queued Javascript after the page loads completely."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        WebView webView \u003d getWebView();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert(webView !\u003d null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        webView.setContextMenuEnabled(false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        webView.getEngine().setJavaScriptEnabled(true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        webView.getEngine().getLoadWorker().stateProperty().addListener("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            new ChangeListener\u003cWorker.State\u003e() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                public void changed(ObservableValue ov, Worker.State oldState, Worker.State newState) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    if (newState \u003d\u003d Worker.State.SUCCEEDED) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        runQueuedJavascript();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected WebView getWebView() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Program that runs all queued Javascript. Clears the Javascript queue if too many scripts are queued."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void runQueuedJavascript() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        WebView webView \u003d getWebView();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (queuedJavascriptCommands.size() \u003e MAX_QUEUE_SIZE) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            logger.warning(String.format(\"Javascript queue size exceeds %1s\", MAX_QUEUE_SIZE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            queuedJavascriptCommands.clear();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        while (!queuedJavascriptCommands.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            webView.getEngine().executeScript(queuedJavascriptCommands.remove(0));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Loads a local resource in the browser, with its Url decoded from FilePathToUrl"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void loadPage(FilePathToUrl filePathToUrl) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        WebView webView \u003d getWebView();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            String url \u003d filePathToUrl.filePathToUrlString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Platform.runLater(() -\u003e webView.getEngine().load(url));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            queuedJavascriptCommands.clear();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 4,
      "YuPeiHenry": 88
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/ui/browser/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.ui.browser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.geometry.Orientation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.scene.control.ScrollBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.util.FilePathToUrl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.ui.exceptions.AccessibilityException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class HelpWindow extends BrowserRelatedUiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final FilePathToUrl USER_GUIDE_FILE_PATH \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new FilePathToUrl(\"/docs/HelpWindow.html\", false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final FilePathToUrl SHORT_HELP_FILE_PATH \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new FilePathToUrl(\"/docs/ShortHelpWindow.html\", false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    //Adapted from https://stackoverflow.com/questions/2238938/how-to-programmatically-scroll-android-webview"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    //https://stackoverflow.com/questions/6991494/javascript-getelementbyid-base-on-partial-string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    //https://stackoverflow.com/questions/22778241/javafx-webview-scroll-to-desired-position"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    //javascript to scroll webpage to commandWord"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String SCROLL_JAVASCRIPT \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"function scrollToElement(commandWord) {\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"    var elem \u003d document.querySelector(\u0027[id$\u003d code-\u0027 + commandWord + \u0027-code]\u0027);\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"    var x \u003d 0;\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"    var y \u003d 0;\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"    while (elem !\u003d null) {\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"        x +\u003d elem.offsetLeft;\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"        y +\u003d elem.offsetTop;\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"        elem \u003d elem.offsetParent;\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"    }\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"    window.scrollTo(x, y);\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"}\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private int verticalScroll \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        loadPage(USER_GUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected WebView getWebView() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return browser;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Scrolls the help window to the specified commandWord."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void scrollToCommandWord(String commandWord) throws AccessibilityException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        browser.getEngine().executeScript(SCROLL_JAVASCRIPT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        browser.getEngine().executeScript(\"window.scrollTo(document.body.scrollLeft, 0)\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        verticalScroll \u003d (int) browser.getEngine().executeScript(\"document.body.scrollTop\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //No commandWords in the window are at the top of the window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert(verticalScroll \u003d\u003d 0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        browser.getEngine().executeScript(\"scrollToElement(\\\"\" + commandWord + \"\\\")\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertScrollToCommandWordSuccessful();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Checks if the help window successfully scrolled to the command word."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertScrollToCommandWordSuccessful() throws AccessibilityException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (verticalScroll !\u003d (int) browser.getEngine().executeScript(\"document.body.scrollTop\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        throw new AccessibilityException(\"Help [commandWord] scrolling error!\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Adapted from"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * https://stackoverflow.com/questions/31264847/how-to-set-remember-scrollbar-thumb-position-in-javafx-8-webview"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns the vertical scrollbar of the webview."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param browser webview"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @return vertical scrollbar of the webview or {@code null} if no vertical"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * scrollbar exists"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private ScrollBar getVScrollBar(WebView browser) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Set\u003cNode\u003e scrolls \u003d browser.lookupAll(\".scroll-bar\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (Node scrollNode : scrolls) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!ScrollBar.class.isInstance(scrollNode)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ScrollBar scroll \u003d (ScrollBar) scrollNode;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (scroll.getOrientation() \u003d\u003d Orientation.VERTICAL) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return scroll;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "YuPeiHenry": 83,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/ui/browser/HistoryWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.ui.browser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.util.FilePathToUrl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Controller for a command history window."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class HistoryWindow extends BrowserRelatedUiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HistoryWindow.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String FXML \u003d \"HistoryWindow.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private WebView commandHistoryWindow;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates a new HistoryWindow."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public HistoryWindow() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates a new HistoryWindow."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param root Stage to use as the root of the HistoryWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public HistoryWindow(Stage root) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected WebView getWebView() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return commandHistoryWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Loads the specified reportFilePath, then shows the history window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void showWithFilePath(FilePathToUrl reportFilePath) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        loadPage(reportFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        show();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Shows the history window."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        logger.fine(\"Showing command history report.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns true if the history window is currently being shown."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Focuses on the history window."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "YuPeiHenry": 86
    }
  },
  {
    "path": "src/main/java/seedu/thanepark/ui/exceptions/AccessibilityException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.ui.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Represents an error which occurs during handling of UI features. Non-fatal."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class AccessibilityException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public AccessibilityException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 10
    }
  },
  {
    "path": "src/main/resources/view/AboutUsWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "         title\u003d\"About Us\" maximized\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cImage url\u003d\"@/images/thanepark_32.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "      \u003cWebView fx:id\u003d\"aboutUsWindow\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 18
    }
  },
  {
    "path": "src/main/resources/view/BlueTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: derive(#a2adff, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    background-color: #828dff; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-base: #a2adff;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-control-inner-background: #a2adff;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: #a2adff;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: derive(#a2adff, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: derive(#a2adff, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: derive(#a2adff, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: #eceeff;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: #d1d6f8;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: #a2adff;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-font-size: 8px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ".cell_status_label {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     -fx-background-color: derive(#eceeff, 20%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     -fx-background-color: derive(#a2adff, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     -fx-border-color: derive(#a2adff, 10%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: derive(#a2adff, 20%);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: derive(#a2adff, 30%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-border-color: derive(#a2adff, 25%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: derive(#a2adff, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-border-color: derive(#a2adff, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: derive(#a2adff, 30%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: derive(#a2adff, 50%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: derive(#eceeff, 20%);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-text-fill: blue;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: #a2adff;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  -fx-background-color: black;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  -fx-text-fill: #a2adff;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-border-color: black, black;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: #a2adff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-text-fill: #000000;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: #a2adff;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: #a2adff;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: derive(#a2adff, 25%);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: derive(#a2adff, 20%);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: derive(#a2adff, 50%);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: transparent #828dff transparent #828dff;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-border-color: #828dff #828dff #000000 #828dff;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-text-fill: blue;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "#filterField, #rideListPanel, #rideWebpage {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: transparent, #eceeff, transparent, #eceeff;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    -fx-background-color: #a1729a;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "#rideInfo {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "#rideInfo .label {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background-color: #aecbf1;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "#statusString {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiajunteo": 1,
      "YuPeiHenry": 77,
      "-": 303
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    -fx-background: #a2adff;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/HistoryWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "         title\u003d\"Command History Report\" maximized\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cImage url\u003d\"@/images/clock.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "      \u003cWebView fx:id\u003d\"commandHistoryWindow\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 18
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "         minWidth\u003d\"700\" minHeight\u003d\"500\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cImage url\u003d\"@/images/thanepark_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cURL value\u003d\"@BlueTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#showHelpWindow\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"About\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u003cMenuItem fx:id\u003d\"aboutMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#showAboutUsWindow\" text\u003d\"About\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "          \u003cVBox fx:id\u003d\"rideList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \u003cStackPane fx:id\u003d\"rideListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" minWidth\u003d\"340\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 9,
      "-": 61
    }
  },
  {
    "path": "src/main/resources/view/RideListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"rideInfo\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "      \u003cLabel fx:id\u003d\"statusString\" styleClass\u003d\"cell_status_label\" text\u003d\"\\$statusString\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 2,
      "-": 33
    }
  },
  {
    "path": "src/main/resources/view/RideListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  \u003cListView fx:id\u003d\"rideListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  \"thaneParkFilePath\" : \"thanepark.xml\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  \"thaneParkFilePath\" : \"thanepark.xml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableThaneParkTest/duplicateRideThanePark.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003cthanepark\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eAlice Tea Party\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString\u003e94351253\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString\u003e1\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone\u003e123, Jurong West Ave 6, #08-111\u003c/zone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c!-- Ride with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eAlice Tea Party\u003c/name\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString\u003e94351253\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString\u003e19\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone\u003e4th street\u003c/zone\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c/thanepark\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 11,
      "YuPeiHenry": 6,
      "-": 5
    }
  },
  {
    "path": "src/test/data/XmlSerializableThaneParkTest/invalidRideThanePark.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003cthanepark\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003c!-- Ride with invalid waitingTime field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eHaunted Mansion\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString isPrivate\u003d\"false\"\u003e9482424\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone isPrivate\u003d\"false\"\u003e4th street\u003c/zone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c/thanepark\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6,
      "YuPeiHenry": 4,
      "-": 1
    }
  },
  {
    "path": "src/test/data/XmlSerializableThaneParkTest/typicalRideThanePark.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c!-- ThanePark save file which contains the same Ride values as in TypicalRides#getTypicalThanePark() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003cthanepark\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eAccelerator\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cdaysSinceMaintenanceString\u003e9\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString\u003e1\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone\u003e123, Jurong West Ave 6, #08-111\u003c/zone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003ctagged\u003erollerCoaster\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eThe Big Thunder Mountain\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cdaysSinceMaintenanceString\u003e31\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString\u003e16\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone\u003e311, Clementi Ave 2, #02-25\u003c/zone\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003ctagged\u003eheightRestrictions\u003c/tagged\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003ctagged\u003erollerCoaster\u003c/tagged\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eCastle Carrousel\u003c/name\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cdaysSinceMaintenanceString\u003e1\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString\u003e13\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone\u003ewall street\u003c/zone\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eDumbo The Flying Elephant\u003c/name\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cdaysSinceMaintenanceString\u003e87\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString\u003e3\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone\u003e10th street\u003c/zone\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003ctagged\u003erollerCoaster\u003c/tagged\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eEnchanted Airways\u003c/name\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cdaysSinceMaintenanceString\u003e4\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString\u003e21\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone\u003emichegan ave\u003c/zone\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eFinal Fantasy\u003c/name\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            \u003cdaysSinceMaintenanceString\u003e12\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString\u003e12\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone\u003elittle tokyo\u003c/zone\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eGalaxy Road\u003c/name\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cdaysSinceMaintenanceString\u003e24\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString\u003e1\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone\u003e4th street\u003c/zone\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c/thanepark\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 41,
      "YuPeiHenry": 15,
      "-": 1
    }
  },
  {
    "path": "src/test/data/XmlThaneParkStorageTest/invalidAndValidRideThanePark.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003cthanepark\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c!-- Valid Ride --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eHaunted Mansion\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cmaintenance isPrivate\u003d\"false\"\u003e9482424\u003c/maintenance\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTime isPrivate\u003d\"false\"\u003ehans@example.com\u003c/waitingTime\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone isPrivate\u003d\"false\"\u003e4th street\u003c/zone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003c!-- Ride with invalid maintenance field --\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eHaunted Mansion\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cmaintenance isPrivate\u003d\"false\"\u003e948asdf2424\u003c/maintenance\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTime isPrivate\u003d\"false\"\u003ehans@example.com\u003c/waitingTime\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone isPrivate\u003d\"false\"\u003e4th street\u003c/zone\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c/thanepark\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 11,
      "YuPeiHenry": 7,
      "-": 1
    }
  },
  {
    "path": "src/test/data/XmlThaneParkStorageTest/invalidRideThanePark.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003cthanepark\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c!-- Ride with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eIt\u0027s a Sm@ll World\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cmaintenance isPrivate\u003d\"false\"\u003e9482424\u003c/maintenance\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTime isPrivate\u003d\"false\"\u003ehans@example.com\u003c/waitingTime\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone isPrivate\u003d\"false\"\u003e4th street\u003c/zone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c/thanepark\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 7,
      "YuPeiHenry": 3,
      "-": 1
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidRideField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c!-- Ride with an invalid maintenance field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003cride\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003cname\u003eHaunted Mansion\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cdaysSinceMaintenanceString\u003e9482asf424\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cwaitingTimeString\u003e13\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003czone\u003e4th street\u003c/zone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c/ride\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 4,
      "YuPeiHenry": 4,
      "-": 2
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingRideField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c!-- Ride with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003cride\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cdaysSinceMaintenanceString\u003e9482424\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cwaitingTimeString\u003e13\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003czone\u003e4th street\u003c/zone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c/ride\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 4,
      "YuPeiHenry": 3,
      "-": 2
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/tempThanePark.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003cthanepark\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cname\u003eAccelerator\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString\u003e85355255\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString\u003e1\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone\u003e123, Jurong West Ave 6, #08-111\u003c/zone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c/thanepark\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "YuPeiHenry": 4,
      "-": 1
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validRide.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003cride\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003cname\u003eHaunted Mansion\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cdaysSinceMaintenanceString\u003e9482424\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cwaitingTimeString\u003e13\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003czone\u003e4th street\u003c/zone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c/ride\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 4,
      "YuPeiHenry": 3,
      "-": 2
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validThanePark.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003cthanepark\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eHaunted Mansion\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString isPrivate\u003d\"false\"\u003e9482424\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString isPrivate\u003d\"false\"\u003e13\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone isPrivate\u003d\"false\"\u003e4th street\u003c/zone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eMark Twain Riverboat\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString isPrivate\u003d\"false\"\u003e87249245\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString isPrivate\u003d\"false\"\u003e18\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone isPrivate\u003d\"false\"\u003e81th street\u003c/zone\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eTom Sawyer Island Rafts\u003c/name\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString isPrivate\u003d\"false\"\u003e95352563\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString isPrivate\u003d\"false\"\u003e13\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone isPrivate\u003d\"false\"\u003ewall street\u003c/zone\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eBig Thunder Mountain\u003c/name\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString isPrivate\u003d\"false\"\u003e87652533\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString isPrivate\u003d\"false\"\u003e3\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone isPrivate\u003d\"false\"\u003e10th street\u003c/zone\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eSplash Mountain\u003c/name\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString isPrivate\u003d\"false\"\u003e9482224\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString isPrivate\u003d\"false\"\u003e23\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone isPrivate\u003d\"false\"\u003emichegan ave\u003c/zone\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eAlice Tea Party\u003c/name\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString isPrivate\u003d\"false\"\u003e9482427\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString isPrivate\u003d\"false\"\u003e10\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone isPrivate\u003d\"false\"\u003elittle tokyo\u003c/zone\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eits a small world\u003c/name\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString isPrivate\u003d\"false\"\u003e9482442\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString isPrivate\u003d\"false\"\u003e1\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone isPrivate\u003d\"false\"\u003e4th street\u003c/zone\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003eCastle Carrousel\u003c/name\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString isPrivate\u003d\"false\"\u003e8482424\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString isPrivate\u003d\"false\"\u003e18\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone isPrivate\u003d\"false\"\u003elittle india\u003c/zone\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003crides\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003cname\u003ePeter Pan Flight\u003c/name\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cdaysSinceMaintenanceString isPrivate\u003d\"false\"\u003e8482131\u003c/daysSinceMaintenanceString\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cwaitingTimeString isPrivate\u003d\"false\"\u003e13\u003c/waitingTimeString\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        \u003czone isPrivate\u003d\"false\"\u003echicago ave\u003c/zone\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        \u003cstatusString\u003eOPEN\u003c/statusString\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    \u003c/rides\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c/thanepark\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 38,
      "YuPeiHenry": 27,
      "-": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AlertDialogHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.ui.UiManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code AlertDialog} of the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AlertDialogHandle extends StageHandle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DialogPane dialogPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public AlertDialogHandle(Stage stage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the header in the {@code AlertDialog}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getHeaderText() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getHeaderText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the content in the {@code AlertDialog}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getContentText() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getContentText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/BrowserPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.concurrent.Worker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebEngine;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.ui.browser.HelpWindow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A handler for the {@code BrowserPanel} of the UI."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String BROWSER_ID \u003d \"#browser\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWebViewLoaded \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL lastRememberedUrl;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle(Node browserPanelNode) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(browserPanelNode);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        WebView webView \u003d getChildNode(BROWSER_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        WebEngine engine \u003d webView.getEngine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        new GuiRobot().interact(() -\u003e engine.getLoadWorker().stateProperty().addListener((obs, oldState, newState) -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newState \u003d\u003d Worker.State.RUNNING) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                isWebViewLoaded \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (newState \u003d\u003d Worker.State.SUCCEEDED) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                isWebViewLoaded \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public URL getLoadedUrl() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return WebViewUtil.getLoadedUrl(getChildNode(BROWSER_ID));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberUrl() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedUrl \u003d getLoadedUrl();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current {@code URL} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberUrl()} call."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isUrlChanged() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedUrl.equals(getLoadedUrl());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns true if the current {@code URL} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * {@code rememberUrl()} call."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean isHelpUrl() throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        URL userGuideUrl \u003d HelpWindow.SHORT_HELP_FILE_PATH.filePathToUrl();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return getLoadedUrl().equals(userGuideUrl);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the browser is done loading a page, or if this browser has yet to load any page."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isLoaded() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWebViewLoaded;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 11,
      "-": 64
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CommandBoxHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle to the {@code CommandBox} in the GUI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle(TextField commandBoxNode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(commandBoxNode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text in the command box."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns the focus state of the command box."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return getRootNode().isFocused();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Enters the given command in the Command Box and presses enter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run(String command) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        setText(command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Enters the given text in the Command Box."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().setText(text));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Enters the given text in the Command Box."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void pressTab() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        guiRobot.push(KeyCode.TAB);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the list of style classes present in the command box."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getStyleClass() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getStyleClass();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 24,
      "-": 41
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/HistoryWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * A handle to the {@code HelpWindow} of the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class HistoryWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String HISTORY_WINDOW_TITLE \u003d \"Command History Report\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String HISTORY_WINDOW_BROWSER_ID \u003d \"#commandHistoryWindow\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public HistoryWindowHandle(Stage historyWindowStage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        super(historyWindowStage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns true if a help window is currently present in the application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static boolean isWindowPresent() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return new GuiRobot().isWindowShown(HISTORY_WINDOW_TITLE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public URL getLoadedUrl() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return WebViewUtil.getLoadedUrl(getChildNode(HISTORY_WINDOW_BROWSER_ID));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 34
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final RideListPanelHandle rideListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        rideListPanel \u003d new RideListPanelHandle(getChildNode(RideListPanelHandle.RIDE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideListPanelHandle getRideListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return rideListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/RideCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Provides a handle to a ride card in the ride list panel."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class RideCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String INFO_FIELD_ID \u003d \"#rideInfo\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String STATUS_FIELD_ID \u003d \"#statusString\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final List\u003cLabel\u003e rideInfoList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final Label statusLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        statusLabel \u003d getChildNode(STATUS_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Region infoContainer \u003d getChildNode(INFO_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        rideInfoList \u003d infoContainer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public String getStatusString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return statusLabel.getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public List\u003cString\u003e getInfo() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return rideInfoList"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns true if this handle contains {@code ride}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public boolean equals(Ride ride) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return getName().equals(ride.getName().fullName)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getInfo()).equals(ImmutableMultiset.copyOf(ride.getInformation()))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(ride.getTags().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .collect(Collectors.toList())))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 getStatusString().equals(ride.getStatus().name());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6,
      "YuPeiHenry": 24,
      "-": 58
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/RideListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Provides a handle for {@code RideListPanel} containing the list of {@code RideCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class RideListPanelHandle extends NodeHandle\u003cListView\u003cRide\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String RIDE_LIST_VIEW_ID \u003d \"#rideListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private Optional\u003cRide\u003e lastRememberedSelectedRideCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideListPanelHandle(ListView\u003cRide\u003e rideListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        super(rideListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns a handle to the selected {@code RideCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError        if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e selectedRideList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (selectedRideList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new AssertionError(\"Ride list size expected 1.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .map(RideCardHandle::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedRideList.get(0)))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Navigates the listview to display {@code ride}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void navigateToCard(Ride ride) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        if (!getRootNode().getItems().contains(ride)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new IllegalArgumentException(\"Ride does not exist.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            getRootNode().scrollTo(ride);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Selects the {@code RideCard} at {@code index} in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns the ride card handle of a ride associated with the {@code index} in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideCardHandle getRideCardHandle(int index) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .map(RideCardHandle::new)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .filter(handle -\u003e handle.equals(getRide(index)))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private Ride getRide(int index) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Remembers the selected {@code RideCard} in the list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void rememberSelectedRideCard() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            lastRememberedSelectedRideCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            lastRememberedSelectedRideCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns true if the selected {@code RideCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * {@code rememberSelectedRideCard()} call."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public boolean isSelectedRideCardChanged() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return lastRememberedSelectedRideCard.isPresent();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return !lastRememberedSelectedRideCard.isPresent()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    || !lastRememberedSelectedRideCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 13,
      "YuPeiHenry": 27,
      "-": 121
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StageHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides access to a stage in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class StageHandle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StageHandle(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stage \u003d requireNonNull(stage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes {@code stage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::close);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(stage.isShowing());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on this {@code stage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String windowTitle \u003d stage.getTitle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Focusing on\" + windowTitle);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::requestFocus);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Finishing focus on\" + windowTitle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if currently focusing on this stage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return stage.isFocused();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code stage}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(String query) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 62
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar syncStatusNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar saveLocationNode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSyncStatus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSaveLocation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the sync status portion of the status bar."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSyncStatus() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return syncStatusNode.getText();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSaveLocation() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return saveLocationNode.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the sync status portion of the status bar."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSyncStatus() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSyncStatus \u003d getSyncStatus();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current content of the sync status is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSyncStatus()} call."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSyncStatusChanged() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSyncStatus.equals(getSyncStatus());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSaveLocation() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSaveLocation \u003d getSaveLocation();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * recent {@code rememberSaveLocation()} call."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSaveLocationChanged() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSaveLocation.equals(getSaveLocation());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/AppParametersTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ThanePark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.storage.XmlSerializableThanePark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    protected Supplier\u003cReadOnlyThanePark\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyThanePark\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            createDataFileWithData(new XmlSerializableThanePark(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        userPrefs.setThaneParkFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns a defensive copy of the thanepark book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ThanePark readStorageThanePark() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return new ThanePark(storage.readThanePark().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            throw new AssertionError(\"Data is not in the ThanePark format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return storage.getThaneParkFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model copy \u003d new ModelManager((model.getThanePark()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredRideList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6,
      "YuPeiHenry": 19,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/commons/core/CommandsLogCenterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.logging.CommandEntry;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.storage.XmlAdaptedCommandEntry;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.CommandEntryBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Contains integration tests with storage and model for {@code CommandsLogCenter}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class CommandsLogCenterTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private String logfilePathString;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setup() throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert(CommandEntryBuilder.COMMAND_ENTRIES.length \u003e 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandsLogCenter.init();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        logfilePathString \u003d CommandsLogCenter.getFilePathString(CommandsLogCenter.LOG_FILE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        file \u003d new File(logfilePathString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert(file.setWritable(true));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert(file.setReadable(true));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void logAndRetrieveSuccessTest() throws IOException, JAXBException, IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cCommandEntry\u003e expectedCommandEntries \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cXmlAdaptedCommandEntry\u003e expectedXmlAdaptedCommandEntryList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (CommandEntry commandEntry : CommandEntryBuilder.COMMAND_ENTRIES) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CommandsLogCenter.log(commandEntry);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            expectedCommandEntries.add(commandEntry);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            expectedXmlAdaptedCommandEntryList.add(new XmlAdaptedCommandEntry(commandEntry));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cCommandEntry\u003e actualCommandEntries \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cXmlAdaptedCommandEntry\u003e xmlAdaptedCommandEntryList \u003d CommandsLogCenter.retrieve().getValue();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (XmlAdaptedCommandEntry xmlAdaptedCommandEntry : xmlAdaptedCommandEntryList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            actualCommandEntries.add(xmlAdaptedCommandEntry.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedXmlAdaptedCommandEntryList, xmlAdaptedCommandEntryList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedCommandEntries, actualCommandEntries);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void logUnableAccessFileTest() throws IOException, JAXBException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thrown.expect(IOException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        file.setWritable(false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandsLogCenter.init();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CommandsLogCenter.log(CommandEntryBuilder.COMMAND_ENTRIES[0]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (IOException ie) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertEquals(String.format(CommandsLogCenter.MESSAGE_LOG_INACCESSIBLE, logfilePathString), ie.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw ie;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assert(file.setWritable(true));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assert(file.delete());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void logUnableToWriteToFileTest() throws IOException, JAXBException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thrown.expect(IOException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        file.setWritable(false);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CommandsLogCenter.log(CommandEntryBuilder.COMMAND_ENTRIES[0]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (IOException ie) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertTrue(ie.getMessage().contains(\"denied\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw ie;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assert(file.setWritable(true));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assert(file.delete());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void retrieveUnableAccessFileTest() throws IOException, JAXBException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thrown.expect(IOException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        file.setWritable(false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CommandsLogCenter.init();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CommandsLogCenter.retrieve();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } catch (IOException ie) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertEquals(String.format(CommandsLogCenter.MESSAGE_LOG_INACCESSIBLE, logfilePathString), ie.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw ie;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assert(file.setWritable(true));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assert(file.delete());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void retrieveJaxbExceptionTest() throws IOException, JAXBException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //add a CommandEntry first"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandsLogCenter.init();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandsLogCenter.log(CommandEntryBuilder.COMMAND_ENTRIES[0]);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Corrupt the xml file"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fileWriter.append(\"\u003casdnjkdg\u003e\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CommandsLogCenter.retrieve();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assert(file.setWritable(true));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assert(file.delete());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "YuPeiHenry": 125
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : ThanePark\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/commons/core/VersionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Version.fromString(\"This is not a version string\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final Index fifthRideIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(fifthRideIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(fifthRideIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(fifthRideIndex.equals(fifthRideIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(fifthRideIndex.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(fifthRideIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(fifthRideIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 7,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/thanepark_32.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 2,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/commons/util/CollectionUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(objects);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(collection);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/commons/util/ConfigUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        read(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        read(\"NotJsonFormatConfig.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(\"Typical App Title\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        save(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        save(new Config(), null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setAppTitle(\"Updated Title\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/commons/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/commons/util/JsonUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 158
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ThanePark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.storage.XmlAdaptedRide;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.storage.XmlSerializableThanePark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.RideBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.TestUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.testutil.ThaneParkBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validThanePark.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final Path MISSING_RIDE_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingRideField.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final Path INVALID_RIDE_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidRideField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final Path VALID_RIDE_FILE \u003d TEST_DATA_FOLDER.resolve(\"validRide.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempThanePark.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String INVALID_MAINTENANCE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final String VALID_NAME \u003d \"Haunted Mansion\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String VALID_MAINTENANCE \u003d \"9482424\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String VALID_WAIT_TIME \u003d \"13\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlUtil.getDataFromFile(null, ThanePark.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, ThanePark.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, ThanePark.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThanePark dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableThanePark.class).toModelType();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(9, dataFromFile.getRideList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void xmlAdaptedRideFromFile_fileWithMissingRideField_validResult() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedRide actualRide \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                MISSING_RIDE_FIELD_FILE, XmlAdaptedRideWithRootElement.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedRide expectedRide \u003d new XmlAdaptedRide("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                null, VALID_MAINTENANCE, VALID_WAIT_TIME, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedRide, actualRide);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void xmlAdaptedRideFromFile_fileWithInvalidRideField_validResult() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedRide actualRide \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                INVALID_RIDE_FIELD_FILE, XmlAdaptedRideWithRootElement.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedRide expectedRide \u003d new XmlAdaptedRide("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                VALID_NAME, INVALID_MAINTENANCE, VALID_WAIT_TIME, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedRide, actualRide);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void xmlAdaptedRideFromFile_fileWithValidRide_validResult() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedRide actualRide \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                VALID_RIDE_FILE, XmlAdaptedRideWithRootElement.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedRide expectedRide \u003d new XmlAdaptedRide("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                VALID_NAME, VALID_MAINTENANCE, VALID_WAIT_TIME, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedRide, actualRide);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlUtil.saveDataToFile(null, new ThanePark());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new ThanePark());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlSerializableThanePark dataToWrite \u003d new XmlSerializableThanePark(new ThanePark());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlSerializableThanePark dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableThanePark.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ThaneParkBuilder builder \u003d new ThaneParkBuilder(new ThanePark());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        dataToWrite \u003d new XmlSerializableThanePark("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                builder.withRide(new RideBuilder().build()).build());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableThanePark.class);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedRide}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @XmlRootElement(name \u003d \"ride\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static class XmlAdaptedRideWithRootElement extends XmlAdaptedRide {}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 24,
      "YuPeiHenry": 27,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.CommandEntryBuilder.COMMAND_STRINGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.CommandsLogCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.logging.CommandEntry;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.logging.ExecutedCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private String logfilePathString;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert(COMMAND_STRINGS.length \u003e 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        logfilePathString \u003d CommandsLogCenter.getFilePathString(CommandsLogCenter.LOG_FILE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        file \u003d new File(logfilePathString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert(file.setWritable(true));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert(file.setReadable(true));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert(file.delete());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandsLogCenter.init();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void commandHistoryContinues_withIoExceptionTest() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        file.setWritable(false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        history.add(\"delete 1\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        file.setWritable(true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void commandHistoryAdds_multipleCommandWordTest() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cExecutedCommand\u003e expectedExecutedCommandList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (String commandString : COMMAND_STRINGS) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            history.add(commandString);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            expectedExecutedCommandList.add(new ExecutedCommand(commandString));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cExecutedCommand\u003e actualExecutedCommandList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cCommandEntry\u003e actualCommandEntryList \u003d history.getCommandEntryList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(COMMAND_STRINGS.length, actualCommandEntryList.size());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (CommandEntry commandEntry : actualCommandEntryList) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            actualExecutedCommandList.add(commandEntry.getExecutedCommand());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedExecutedCommandList, actualExecutedCommandList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void commandHistoryAdds_invalidCommandWordTest() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String commandString \u003d \"asdk\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        history.add(commandString);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ExecutedCommand expectedExecutedCommand \u003d new ExecutedCommand(commandString);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cCommandEntry\u003e actualCommandEntryList \u003d history.getCommandEntryList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(1, actualCommandEntryList.size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedExecutedCommand, actualCommandEntryList.get(0).getExecutedCommand());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void commandHistoryGetCommandEntry_ioExceptionTest() throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //populate the xml file"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (String commandString : COMMAND_STRINGS) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            history.add(commandString);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //create file problem"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        file.setWritable(false);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandsLogCenter.init();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        file.setWritable(true);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //trigger the delete and file recreation"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cCommandEntry\u003e actualCommandEntryList \u003d history.getCommandEntryList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(0, actualCommandEntryList.size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Compare file content"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        byte[] encoded \u003d Files.readAllBytes(CommandsLogCenter.getFilePath(CommandsLogCenter.LOG_FILE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String fileData \u003d new String(encoded, CommandsLogCenter.STANDARDIZED_ENCODING);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(CommandsLogCenter.STANDARDIZED_XML_HEADER + \"\\n\" + CommandsLogCenter.LIST_HEADER,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                fileData);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void commandHistoryGetCommandEntry_jaxbExceptionTest() throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //populate the xml file"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (String commandString : COMMAND_STRINGS) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            history.add(commandString);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Corrupt the xml file"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fileWriter.append(\"\u003casdnjkdg\u003e\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //trigger the delete and file recreation"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        List\u003cCommandEntry\u003e actualCommandEntryList \u003d history.getCommandEntryList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(0, actualCommandEntryList.size());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Compare file content"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        byte[] encoded \u003d Files.readAllBytes(CommandsLogCenter.getFilePath(CommandsLogCenter.LOG_FILE));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String fileData \u003d new String(encoded, CommandsLogCenter.STANDARDIZED_ENCODING);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(CommandsLogCenter.STANDARDIZED_XML_HEADER + \"\\n\" + CommandsLogCenter.LIST_HEADER,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                fileData);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "YuPeiHenry": 97,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 174
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import static seedu.thanepark.logic.commands.ViewAllCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ViewAllCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.model.ride.Status;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        List\u003cRide\u003e expectedRides \u003d model.getFilteredRideList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        int[] statusArray \u003d new int[3];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        statusArray[0] \u003d (int) expectedRides.stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .filter(x -\u003e x.getStatus() \u003d\u003d Status.OPEN)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        statusArray[1] \u003d (int) expectedRides.stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .filter(x -\u003e x.getStatus() \u003d\u003d Status.SHUTDOWN)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        statusArray[2] \u003d (int) expectedRides.stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .filter(x -\u003e x.getStatus() \u003d\u003d Status.MAINTENANCE)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        String viewAllCommand \u003d ViewAllCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        String message \u003d String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                model.getFilteredRideList().size(), statusArray[0], statusArray[1], statusArray[2]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertCommandSuccess(viewAllCommand, message, model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertHistoryCorrect(viewAllCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void getFilteredRideList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredRideList().remove(0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     *      - {@code expectedModel}\u0027s thanepark book was saved to the storage file."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 13,
      "jiajunteo": 21,
      "leongengsea": 1,
      "YuPeiHenry": 1,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.RideBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_newRide_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride validRide \u003d new RideBuilder().buildDifferent();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.addRide(validRide);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.commitThanePark();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(new AddCommand(validRide), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validRide), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_duplicateRideSameName_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride sameNameRide \u003d new RideBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandFailure(new AddCommand(sameNameRide), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_duplicateRide_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride rideInList \u003d model.getThanePark().getRideList().get(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandFailure(new AddCommand(rideInList), model, commandHistory,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 18,
      "YuPeiHenry": 9,
      "leongengsea": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ThanePark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.RideBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void constructor_nullRide_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_rideAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelStubAcceptingRideAdded modelStub \u003d new ModelStubAcceptingRideAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride validRide \u003d new RideBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validRide).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validRide), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Arrays.asList(validRide), modelStub.ridesAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_duplicateRide_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride validRide \u003d new RideBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validRide);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithRide(validRide);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride alice \u003d new RideBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride bob \u003d new RideBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different ride -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public void addRide(Ride ride) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public void resetData(ReadOnlyThanePark newData) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public ReadOnlyThanePark getThanePark() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public boolean hasRide(Ride ride) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public void deleteRide(Ride target) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public void updateRide(Ride target, Ride editedRide) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public ObservableList\u003cRide\u003e getFilteredRideList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public void updateFilteredRideList(Predicate\u003cRide\u003e predicate) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public boolean canUndoThanePark() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public boolean canRedoThanePark() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public void undoThanePark() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public void redoThanePark() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public void commitThanePark() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * A Model stub that contains a single ride."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private class ModelStubWithRide extends ModelStub {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        private final Ride ride;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelStubWithRide(Ride ride) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            requireNonNull(ride);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            this.ride \u003d ride;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public boolean hasRide(Ride ride) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            requireNonNull(ride);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return this.ride.isSameRide(ride);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * A Model stub that always accept the ride being added."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private class ModelStubAcceptingRideAdded extends ModelStub {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        final ArrayList\u003cRide\u003e ridesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public boolean hasRide(Ride ride) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            requireNonNull(ride);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return ridesAdded.stream().anyMatch(ride::isSameRide);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public void addRide(Ride ride) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            requireNonNull(ride);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            ridesAdded.add(ride);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public void commitThanePark() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public ReadOnlyThanePark getThanePark() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return new ThanePark();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 49,
      "YuPeiHenry": 8,
      "leongengsea": 1,
      "-": 147
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ThanePark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_emptyThanePark_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.commitThanePark();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_nonEmptyThanePark_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.resetData(new ThanePark());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.commitThanePark();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 13,
      "YuPeiHenry": 2,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_MAINTENANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_WAITING_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_ZONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ThanePark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.RideContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.UpdateRideDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String VALID_NAME_JESSIE \u003d \"Jessie \u0026 James\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String VALID_MAINTENANCE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String VALID_MAINTENANCE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String VALID_WAIT_TIME_AMY \u003d \"1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String VALID_WAIT_TIME_BOB \u003d \"2\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String VALID_ZONE_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String VALID_ZONE_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MAINTENANCE_DESC_AMY \u003d \" \" + PREFIX_MAINTENANCE + VALID_MAINTENANCE_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String MAINTENANCE_DESC_BOB \u003d \" \" + PREFIX_MAINTENANCE + VALID_MAINTENANCE_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String WAIT_TIME_DESC_AMY \u003d \" \" + PREFIX_WAITING_TIME + VALID_WAIT_TIME_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String WAIT_TIME_DESC_BOB \u003d \" \" + PREFIX_WAITING_TIME + VALID_WAIT_TIME_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String ZONE_DESC_AMY \u003d \" \" + PREFIX_ZONE + VALID_ZONE_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String ZONE_DESC_BOB \u003d \" \" + PREFIX_ZONE + VALID_ZONE_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String VALID_NAME_SYMBOLS \u003d \" \" + PREFIX_NAME + VALID_NAME_JESSIE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    // \u0027a\u0027 not allowed in days since maintenance"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"[@]!!!!!\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String INVALID_MAINTENANCE_DESC \u003d \" \" + PREFIX_MAINTENANCE + \"911a\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String INVALID_WAIT_TIME_DESC \u003d \" \" + PREFIX_WAITING_TIME + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String INVALID_ZONE_DESC \u003d \" \" + PREFIX_ZONE; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public static final UpdateCommand.UpdateRideDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public static final UpdateCommand.UpdateRideDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        DESC_AMY \u003d new UpdateRideDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                .withMaintenance(VALID_MAINTENANCE_AMY).withWaitTime(VALID_WAIT_TIME_AMY).withZone(VALID_ZONE_AMY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        DESC_BOB \u003d new UpdateRideDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                .withMaintenance(VALID_MAINTENANCE_BOB).withWaitTime(VALID_WAIT_TIME_BOB).withZone(VALID_ZONE_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * - the thanepark book and the filtered ride list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ThanePark expectedThanePark \u003d new ThanePark(actualModel.getThanePark());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredRideList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertEquals(expectedThanePark, actualModel.getThanePark());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredRideList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to showWithFilePath only the ride at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code model}\u0027s thanepark book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static void showRideAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredRideList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride ride \u003d model.getFilteredRideList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        final String[] splitName \u003d ride.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.updateFilteredRideList(new RideContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(1, model.getFilteredRideList().size());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Deletes the first ride in {@code model}\u0027s filtered list from {@code model}\u0027s thanepark book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static void deleteFirstRide(Model model) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride firstRide \u003d model.getFilteredRideList().get(0);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.deleteRide(firstRide);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.commitThanePark();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 40,
      "YuPeiHenry": 13,
      "leongengsea": 4,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.showRideAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_THIRD_RIDE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride rideToDelete \u003d model.getFilteredRideList().get(INDEX_FIRST_RIDE.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_RIDE_SUCCESS, rideToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.deleteRide(rideToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.commitThanePark();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRideList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRideAtIndex(model, INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride rideToDelete \u003d model.getFilteredRideList().get(INDEX_FIRST_RIDE.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_RIDE_SUCCESS, rideToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.deleteRide(rideToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.commitThanePark();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showNoRide(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRideAtIndex(model, INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of thanepark book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getThanePark().getRideList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride rideToDelete \u003d model.getFilteredRideList().get(INDEX_FIRST_RIDE.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.deleteRide(rideToDelete);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.commitThanePark();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // delete -\u003e first ride deleted"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // undo -\u003e reverts thanepark back to previous state and filtered ride list to showWithFilePath all rides"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.undoThanePark();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // redo -\u003e same first ride deleted again"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.redoThanePark();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRideList().size() + 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // execution failed -\u003e thanepark book state not added into model"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // single thanepark book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * 1. Deletes a {@code Ride} from a filtered list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted ride in the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the ride object regardless of indexing."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameRideDeleted() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRideAtIndex(model, INDEX_THIRD_RIDE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride rideToDelete \u003d model.getFilteredRideList().get(INDEX_FIRST_RIDE.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.deleteRide(rideToDelete);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.commitThanePark();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // delete -\u003e deletes second ride in unfiltered ride list / first ride in filtered ride list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // undo -\u003e reverts thanepark back to previous state and filtered ride list to showWithFilePath all rides"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.undoThanePark();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertNotEquals(rideToDelete, model.getFilteredRideList().get(INDEX_FIRST_RIDE.getZeroBased()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // redo -\u003e deletes same second ride in unfiltered ride list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.redoThanePark();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_RIDE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different ride -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to showWithFilePath no one."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void showNoRide(Model model) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.updateFilteredRideList(p -\u003e false);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(model.getFilteredRideList().isEmpty());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 45,
      "YuPeiHenry": 25,
      "leongengsea": 5,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d new ExitCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MESSAGE_EXIT_ACKNOWLEDGEMENT, result.feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(1, eventsCollectorRule.eventsCollector.getSize());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 7,
      "YuPeiHenry": 1,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/commands/FilterCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_RIDES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.ACCELERATOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.BIG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.CASTLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.DUMBO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.FANTASY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.GALAXY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.AttributePredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Maintenance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.RideContainsConditionPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.WaitTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FilterCommand}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class FilterCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsConditionPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new RideContainsConditionPredicate(List.of(new AttributePredicate(\"\u003c\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        new Maintenance(\"100\"))));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsConditionPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new RideContainsConditionPredicate(List.of(new AttributePredicate(\"\u003c\u003d\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        new WaitTime(\"100\"))));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        FilterCommand filterFirstCommand \u003d new FilterCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        FilterCommand filterSecondCommand \u003d new FilterCommand(secondPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(filterFirstCommand.equals(filterFirstCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // same values -\u003e return true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        FilterCommand filterFirstCommandCopy \u003d new FilterCommand(firstPredicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(filterFirstCommand.equals(filterFirstCommandCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(filterFirstCommand.equals(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(filterFirstCommand.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(filterFirstCommand.equals(filterSecondCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void execute_zeroPredicates_noRideFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RIDES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsConditionPredicate predicate \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new RideContainsConditionPredicate(List.of(new AttributePredicate(\" \", new Maintenance(\"0\"))));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredRideList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicate \u003d new RideContainsConditionPredicate(List.of(new AttributePredicate(\" \", new WaitTime(\"0\"))));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredRideList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void execute_singlePredicate_multipleRidesFound() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RIDES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsConditionPredicate predicate \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new RideContainsConditionPredicate(Arrays.asList(prepareMaintenancePredicate(\"\u003e\u003d\", \"15\")));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Arrays.asList(BIG, DUMBO, GALAXY), model.getFilteredRideList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_RIDES_LISTED_OVERVIEW, 5);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicate \u003d new RideContainsConditionPredicate(Arrays.asList(prepareWaitTimePredicate(\"\u003c\", \"15\")));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Arrays.asList(ACCELERATOR, CASTLE, DUMBO, FANTASY, GALAXY), model.getFilteredRideList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void execute_multiplePredicates_multipleRidesFound() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RIDES_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsConditionPredicate predicate \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new RideContainsConditionPredicate(Arrays.asList(prepareMaintenancePredicate(\"\u003e\", \"15\"),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                        prepareMaintenancePredicate(\"\u003c\u003d\", \"50\")));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        FilterCommand command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Arrays.asList(BIG, GALAXY), model.getFilteredRideList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_RIDES_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicate \u003d new RideContainsConditionPredicate(Arrays.asList(prepareWaitTimePredicate(\"\u003c\u003d\", \"15\"),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                prepareWaitTimePredicate(\"\u003e\", \"5\")));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Arrays.asList(CASTLE, FANTASY), model.getFilteredRideList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_RIDES_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicate \u003d new RideContainsConditionPredicate(Arrays.asList(prepareWaitTimePredicate(\"\u003c\u003d\", \"15\"),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                prepareMaintenancePredicate(\"\u003e\u003d\", \"15\")));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Arrays.asList(DUMBO, GALAXY), model.getFilteredRideList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private AttributePredicate prepareMaintenancePredicate(String s, String value) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new AttributePredicate(s, new Maintenance(value));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private AttributePredicate prepareWaitTimePredicate(String s, String value) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new AttributePredicate(s, new WaitTime(value));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 138
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_RIDES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_TAG_FULL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_ZONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_ZONE_FULL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.ACCELERATOR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.BIG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.CASTLE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.DUMBO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.ENCHANTED;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.FANTASY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.RideContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Zone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new RideContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new RideContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different ride -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void execute_zeroKeywords_noRideFound() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RIDES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredRideList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void execute_multipleKeywords_multipleRidesFound() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RIDES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate predicate \u003d preparePredicate(\"carrousel Enchanted final\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Arrays.asList(CASTLE, ENCHANTED, FANTASY), model.getFilteredRideList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void execute_singleTag_multipleRidesFound() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RIDES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Tag tag1 \u003d new Tag(\"rollerCoaster\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Tag tag2 \u003d new Tag(\"heightRestrictions\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String userInput \u003d PREFIX_TAG + tag1.tagName + \" \" + PREFIX_TAG_FULL + tag2.tagName;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(Arrays.asList(tag1, tag2));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate predicate \u003d preparePredicate(userInput, tags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Arrays.asList(ACCELERATOR, BIG, DUMBO), model.getFilteredRideList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void execute_address_multipleRidesFound() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RIDES_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Zone zone \u003d new Zone(\"10th Street\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String userInput \u003d PREFIX_ZONE + zone.value;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate predicate \u003d preparePredicate(userInput, zone);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Arrays.asList(DUMBO), model.getFilteredRideList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        userInput \u003d PREFIX_ZONE_FULL + zone.value;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicate \u003d preparePredicate(userInput, zone);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Arrays.asList(DUMBO), model.getFilteredRideList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Parses {@code userInput} into a {@code RideContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private RideContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new RideContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Parses {@code userInput} and {@code object} into a {@code RideContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private RideContainsKeywordsPredicate preparePredicate(String userInput, Object object) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new RideContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")), Optional.ofNullable(object));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 84,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.HelpCommand.SHOWING_SHORT_HELP_MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.logic.parser.HelpCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandSuccess(new HelpCommand(true, \"\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                model, commandHistory, SHOWING_SHORT_HELP_MESSAGE, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        BaseEvent recentEvent \u003d eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(recentEvent instanceof ShowHelpRequestEvent);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(((ShowHelpRequestEvent) recentEvent).isRequestSummarized());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(1, eventsCollectorRule.eventsCollector.getSize());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_helpMore_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final String args \u003d \"more\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandSuccess(new HelpCommandParser().parse(args),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                model, commandHistory, SHOWING_HELP_MESSAGE, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        BaseEvent recentEvent \u003d eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(recentEvent instanceof ShowHelpRequestEvent);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(((ShowHelpRequestEvent) recentEvent).isRequestSummarized());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(1, eventsCollectorRule.eventsCollector.getSize());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_helpSpecificCommand_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        int numEvents \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (String commandWord : AllCommandWords.COMMAND_WORDS) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            numEvents++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            final String args \u003d commandWord;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertCommandSuccess(new HelpCommand(false, args),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    model, commandHistory, SHOWING_HELP_MESSAGE, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            BaseEvent recentEvent \u003d eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertTrue(recentEvent instanceof ShowHelpRequestEvent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertFalse(((ShowHelpRequestEvent) recentEvent).isRequestSummarized());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertEquals(commandWord, ((ShowHelpRequestEvent) recentEvent).getCommandWord());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertEquals(numEvents, eventsCollectorRule.eventsCollector.getSize());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 10,
      "YuPeiHenry": 39,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/commands/MaintainCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.showRideAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " * MaintainCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "public class MaintainCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public void execute_invalidRideIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRideList().size() + 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        MaintainCommand maintainCommand \u003d new MaintainCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertCommandFailure(maintainCommand, model, commandHistory, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * maintain ride where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * but smaller than size of thanepark book"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public void execute_invalidRideIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRideAtIndex(model, INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of thanepark list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getThanePark().getRideList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        MaintainCommand maintainCommand \u003d new MaintainCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertCommandFailure(maintainCommand, model, commandHistory, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRideList().size() + 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        MaintainCommand maintainCommand \u003d new MaintainCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // execution failed -\u003e thanepark state not added into model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertCommandFailure(maintainCommand, model, commandHistory, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // single thanepark state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final MaintainCommand standardCommand \u003d new MaintainCommand(INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        MaintainCommand commandWithSameValues \u003d new MaintainCommand(INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertFalse(standardCommand.equals(new MaintainCommand(INDEX_SECOND_RIDE)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiajunteo": 81,
      "YuPeiHenry": 5
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/commands/OpenCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.showRideAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " * OpenCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "public class OpenCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public void execute_duplicateRideUnfilteredList_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        OpenCommand openCommand \u003d new OpenCommand(INDEX_SECOND_RIDE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(openCommand, model, commandHistory, OpenCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public void execute_duplicateRideFilteredList_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRideAtIndex(model, INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        //open ride in filtered list into a duplicate in thanepark book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        OpenCommand openCommand \u003d new OpenCommand(INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(openCommand, model, commandHistory, OpenCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public void execute_invalidRideIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRideList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        OpenCommand openCommand \u003d new OpenCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(openCommand, model, commandHistory, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * open ride where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * but smaller than size of thanepark"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public void execute_invalidRideIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRideAtIndex(model, INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of thanepark list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getThanePark().getRideList().size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        OpenCommand openCommand \u003d new OpenCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(openCommand, model, commandHistory, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRideList().size() + 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        OpenCommand openCommand \u003d new OpenCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // execution failed -\u003e thanepark state not added into model"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(openCommand, model, commandHistory, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // single thanepark state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final OpenCommand standardCommand \u003d new OpenCommand(INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        OpenCommand commandWithSameValues \u003d new OpenCommand(INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertFalse(standardCommand.equals(new OpenCommand(INDEX_SECOND_RIDE)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 16,
      "leongengsea": 80,
      "YuPeiHenry": 7
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.deleteFirstRide;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        deleteFirstRide(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        deleteFirstRide(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.undoThanePark();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.undoThanePark();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        deleteFirstRide(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        deleteFirstRide(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.undoThanePark();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.undoThanePark();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.redoThanePark();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.redoThanePark();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 16,
      "YuPeiHenry": 5,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/commands/ShutDownCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.showRideAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " * ShutDownCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "public class ShutDownCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public void execute_invalidRideIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRideList().size() + 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        ShutDownCommand shutdownCommand \u003d new ShutDownCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(shutdownCommand, model, commandHistory, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * shutdown ride where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * but smaller than size of thanepark book"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public void execute_invalidRideIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRideAtIndex(model, INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of thanepark list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getThanePark().getRideList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        ShutDownCommand shutdownCommand \u003d new ShutDownCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(shutdownCommand, model, commandHistory, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRideList().size() + 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        ShutDownCommand shutdownCommand \u003d new ShutDownCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // execution failed -\u003e thanepark state not added into model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(shutdownCommand, model, commandHistory, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // single thanepark state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final ShutDownCommand standardCommand \u003d new ShutDownCommand(INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ShutDownCommand commandWithSameValues \u003d new ShutDownCommand(INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertFalse(standardCommand.equals(new ShutDownCommand(INDEX_SECOND_RIDE)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 15,
      "leongengsea": 66,
      "YuPeiHenry": 5
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/commands/SuggestCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.SuggestCommand.MESSAGE_SUGGEST_COMMAND_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.ThaneParkParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Contains unit tests for {@code SuggestCommand}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class SuggestCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final ThaneParkParser parser \u003d new ThaneParkParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void constructor_nullString_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new SuggestCommand(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_suggestCommand_success() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"a\", \"add\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"c\", \"clear\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"d\", \"delete\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"e\", \"exit\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"f\", \"find\", \"filter\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"h\", \"help\", \"history\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"m\", \"maintain\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"r\", \"redo\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"u\", \"update\", \"undo\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"v\", \"viewall\", \"viewstatus\", \"view\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"a j\\\\km bu/ni i?@w 359h\", \"add\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_suggestCommand_failure() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"b\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_suggestCommand2_failure() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"g\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Verifies behavior of successful suggest."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param commandWords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertSuggestCommandSuccessBehavior(String userInput, String... commandWords) throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUGGEST_COMMAND_SUCCESS,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                SuggestCommand.combineCommandWords(commandWords));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Command command \u003d parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(command instanceof SuggestCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        SuggestCommand suggestCommand \u003d (SuggestCommand) command;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedMessage, suggestCommand.execute(model, history).feedbackToUser);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Verifies behavior of failed suggest"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertSuggestCommandFailureBehavior(String userInput) throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 10,
      "jiajunteo": 2,
      "YuPeiHenry": 75,
      "leongengsea": 2
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.deleteFirstRide;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.UpdateCommand.UpdateRideDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ThanePark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.RideBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.UpdateRideDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //setup"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        deleteFirstRide(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        deleteFirstRide(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        deleteFirstRide(expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        deleteFirstRide(expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.undoThanePark();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.undoThanePark();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void undoRedoCommandsAreIncluded() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //includes add, clear, delete and edit"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        int total \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride validRide \u003d new RideBuilder().buildDifferent();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new AddCommand(validRide).execute(model, commandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.addRide(validRide);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.commitThanePark();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        total++;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride rideToDelete \u003d model.getFilteredRideList().get(INDEX_FIRST_RIDE.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new DeleteCommand(INDEX_FIRST_RIDE).execute(model, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.deleteRide(rideToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.commitThanePark();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        total++;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Change some ride back to the deleted one"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride editedRide \u003d rideToDelete;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder(editedRide).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateRide(model.getFilteredRideList().get(0), editedRide);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new UpdateCommand(INDEX_FIRST_RIDE, descriptor).execute(model, commandHistory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.commitThanePark();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        total++;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        expectedModel.resetData(new ThanePark());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.commitThanePark();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new ClearCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        total++;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (int i \u003d 0; i \u003c total; i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            expectedModel.undoThanePark();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (int i \u003d 0; i \u003c total; i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            expectedModel.redoThanePark();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 26,
      "YuPeiHenry": 47,
      "leongengsea": 1,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/commands/UpdateCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_MAINTENANCE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.showRideAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_THIRD_RIDE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.UpdateCommand.UpdateRideDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ThanePark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.RideBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.UpdateRideDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " * UpdateCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "public class UpdateCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride editedRide \u003d new RideBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder(editedRide).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(INDEX_FIRST_RIDE, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_RIDE_SUCCESS, editedRide);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ThanePark(model.getThanePark()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateRide(model.getFilteredRideList().get(0), editedRide);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.commitThanePark();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Index indexLastRide \u003d Index.fromOneBased(model.getFilteredRideList().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride lastRide \u003d model.getFilteredRideList().get(indexLastRide.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        RideBuilder rideInList \u003d new RideBuilder(lastRide);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride editedRide \u003d rideInList.withName(VALID_NAME_BOB).withMaintenance(VALID_MAINTENANCE_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withMaintenance(VALID_MAINTENANCE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(indexLastRide, descriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_RIDE_SUCCESS, editedRide);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ThanePark(model.getThanePark()), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateRide(lastRide, editedRide);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.commitThanePark();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(INDEX_FIRST_RIDE, new UpdateRideDescriptor());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride editedRide \u003d model.getFilteredRideList().get(INDEX_FIRST_RIDE.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_RIDE_SUCCESS, editedRide);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ThanePark(model.getThanePark()), new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.commitThanePark();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRideAtIndex(model, INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride rideInFilteredList \u003d model.getFilteredRideList().get(INDEX_FIRST_RIDE.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride editedRide \u003d new RideBuilder(rideInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(INDEX_FIRST_RIDE,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                new UpdateRideDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_RIDE_SUCCESS, editedRide);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ThanePark(model.getThanePark()), new UserPrefs());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateRide(model.getFilteredRideList().get(0), editedRide);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.commitThanePark();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_duplicateRideUnfilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride firstRide \u003d model.getFilteredRideList().get(INDEX_FIRST_RIDE.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder(firstRide).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(INDEX_SECOND_RIDE, descriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, UpdateCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_duplicateRideFilteredList_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRideAtIndex(model, INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // edit ride in filtered list into a duplicate in thanepark book"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride rideInList \u003d model.getThanePark().getRideList().get(INDEX_SECOND_RIDE.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(INDEX_FIRST_RIDE,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                new UpdateRideDescriptorBuilder(rideInList).build());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, UpdateCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_invalidRideIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRideList().size() + 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * but smaller than size of thanepark book"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void execute_invalidRideIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRideAtIndex(model, INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of thanepark book list"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getThanePark().getRideList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                new UpdateRideDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride editedRide \u003d new RideBuilder().build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride rideToEdit \u003d model.getFilteredRideList().get(INDEX_FIRST_RIDE.getZeroBased());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder(editedRide).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(INDEX_FIRST_RIDE, descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ThanePark(model.getThanePark()), new UserPrefs());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateRide(rideToEdit, editedRide);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.commitThanePark();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // edit -\u003e first ride edited"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // undo -\u003e reverts thanepark back to previous state and filtered ride list to showWithFilePath all rides"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.undoThanePark();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // redo -\u003e same first ride edited again"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.redoThanePark();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRideList().size() + 1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // execution failed -\u003e thanepark book state not added into model"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // single thanepark book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * 1. Edits a {@code Ride} from a filtered list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited ride in the"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the ride object regardless of indexing."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameRideEdited() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride editedRide \u003d new RideBuilder().buildDifferent();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder(editedRide).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UpdateCommand editCommand \u003d new UpdateCommand(INDEX_FIRST_RIDE, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ThanePark(model.getThanePark()), new UserPrefs());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRideAtIndex(model, INDEX_THIRD_RIDE);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride rideToEdit \u003d model.getFilteredRideList().get(INDEX_FIRST_RIDE.getZeroBased());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateRide(rideToEdit, editedRide);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.commitThanePark();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // edit -\u003e edits second ride in unfiltered ride list / first ride in filtered ride list"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // undo -\u003e reverts thanepark back to previous state and filtered ride list to showWithFilePath all rides"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.undoThanePark();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertNotEquals(model.getFilteredRideList().get(INDEX_FIRST_RIDE.getZeroBased()), rideToEdit);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // redo -\u003e edits same second ride in unfiltered ride list"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.redoThanePark();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final UpdateCommand standardCommand \u003d new UpdateCommand(INDEX_FIRST_RIDE, DESC_AMY);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateRideDescriptor copyDescriptor \u003d new UpdateCommand.UpdateRideDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UpdateCommand commandWithSameValues \u003d new UpdateCommand(INDEX_FIRST_RIDE, copyDescriptor);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(INDEX_SECOND_RIDE, DESC_AMY)));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(INDEX_FIRST_RIDE, DESC_BOB)));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 59,
      "YuPeiHenry": 42,
      "leongengsea": 26,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/commands/UpdateRideDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_MAINTENANCE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_WAIT_TIME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_ZONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.UpdateRideDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "public class UpdateRideDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateCommand.UpdateRideDescriptor descriptorWithSameValues \u003d new UpdateCommand.UpdateRideDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateCommand.UpdateRideDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                new UpdateRideDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // different maintenance -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        editedAmy \u003d new UpdateRideDescriptorBuilder(DESC_AMY).withMaintenance(VALID_MAINTENANCE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // different waiting time -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        editedAmy \u003d new UpdateRideDescriptorBuilder(DESC_AMY).withWaitTime(VALID_WAIT_TIME_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different thanepark -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        editedAmy \u003d new UpdateRideDescriptorBuilder(DESC_AMY).withZone(VALID_ZONE_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        editedAmy \u003d new UpdateRideDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 12,
      "jiajunteo": 2,
      "leongengsea": 7,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/commands/ViewAllCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.showRideAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import static seedu.thanepark.logic.commands.ViewAllCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.model.ride.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ViewAllCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewAllCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        List\u003cRide\u003e expectedRides \u003d expectedModel.getFilteredRideList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        int[] statusArray \u003d new int[3];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        statusArray[0] \u003d (int) expectedRides.stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .filter(x -\u003e x.getStatus() \u003d\u003d Status.OPEN)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        statusArray[1] \u003d (int) expectedRides.stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .filter(x -\u003e x.getStatus() \u003d\u003d Status.SHUTDOWN)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        statusArray[2] \u003d (int) expectedRides.stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .filter(x -\u003e x.getStatus() \u003d\u003d Status.MAINTENANCE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                expectedModel.getFilteredRideList().size(), statusArray[0], statusArray[1], statusArray[2]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ViewAllCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        List\u003cRide\u003e expectedRides \u003d expectedModel.getFilteredRideList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        int[] statusArray \u003d new int[3];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        statusArray[0] \u003d (int) expectedRides.stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .filter(x -\u003e x.getStatus() \u003d\u003d Status.OPEN)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        statusArray[1] \u003d (int) expectedRides.stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .filter(x -\u003e x.getStatus() \u003d\u003d Status.SHUTDOWN)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        statusArray[2] \u003d (int) expectedRides.stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .filter(x -\u003e x.getStatus() \u003d\u003d Status.MAINTENANCE)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                expectedModel.getFilteredRideList().size(), statusArray[0], statusArray[1], statusArray[2]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRideAtIndex(model, INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ViewAllCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 9,
      "jiajunteo": 33,
      "YuPeiHenry": 3,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/commands/ViewCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.showRideAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_THIRD_RIDE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ViewCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Index lastRideIndex \u003d Index.fromOneBased(model.getFilteredRideList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_RIDE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertExecutionSuccess(lastRideIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredRideList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRideAtIndex(model, INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRideAtIndex(expectedModel, INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRideAtIndex(model, INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRideAtIndex(expectedModel, INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of thanepark book list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getThanePark().getRideList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ViewCommand selectFirstCommand \u003d new ViewCommand(INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ViewCommand selectSecondCommand \u003d new ViewCommand(INDEX_SECOND_RIDE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ViewCommand selectFirstCommandCopy \u003d new ViewCommand(INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different ride -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code ViewCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        String expectedName \u003d expectedModel.getFilteredRideList().get(index.getZeroBased()).getName().fullName;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String expectedMessage \u003d String.format(ViewCommand.MESSAGE_SELECT_RIDE_SUCCESS, expectedName,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                index.getOneBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(viewCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code ViewCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(index);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(viewCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 19,
      "jiajunteo": 2,
      "YuPeiHenry": 16,
      "leongengsea": 2,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/commands/ViewStatusCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_RIDES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.RideStatusPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ViewStatusCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "public class ViewStatusCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalThanePark(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        RideStatusPredicate firstPredicate \u003d new RideStatusPredicate(Status.OPEN);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        RideStatusPredicate secondPredicate \u003d new RideStatusPredicate(Status.MAINTENANCE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        ViewStatusCommand firstCommand \u003d new ViewStatusCommand(firstPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        ViewStatusCommand secondCommand \u003d new ViewStatusCommand(secondPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        ViewStatusCommand thirdCommand \u003d new ViewStatusCommand(firstPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommand));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertTrue(firstCommand.equals(thirdCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertFalse(firstCommand.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertFalse(firstCommand.equals(\"open\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // different status -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertFalse(firstCommand.equals(secondCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public void execute_noRideFound() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RIDES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        RideStatusPredicate predicate \u003d new RideStatusPredicate(Status.MAINTENANCE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        ViewStatusCommand command \u003d new ViewStatusCommand(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        expectedModel.updateFilteredRideList(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredRideList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 10,
      "jiajunteo": 54
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.INVALID_MAINTENANCE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.INVALID_WAIT_TIME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.INVALID_ZONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.MAINTENANCE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.MAINTENANCE_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_MAINTENANCE_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_NAME_JESSIE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_NAME_SYMBOLS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_WAIT_TIME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_ZONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.WAIT_TIME_DESC_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.WAIT_TIME_DESC_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.ZONE_DESC_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.ZONE_DESC_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Maintenance;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.WaitTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Zone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.RideBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride expectedRide \u003d new RideBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + MAINTENANCE_DESC_BOB + WAIT_TIME_DESC_BOB"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + ZONE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedRide));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + MAINTENANCE_DESC_BOB + WAIT_TIME_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + ZONE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedRide));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MAINTENANCE_DESC_AMY + MAINTENANCE_DESC_BOB + WAIT_TIME_DESC_BOB"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + ZONE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedRide));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // multiple waitTimes - last waitTime accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MAINTENANCE_DESC_BOB + WAIT_TIME_DESC_AMY + WAIT_TIME_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + ZONE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedRide));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // multiple addresses - last thanepark accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MAINTENANCE_DESC_BOB + WAIT_TIME_DESC_BOB + ZONE_DESC_AMY"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + ZONE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedRide));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride expectedRideMultipleTags \u003d new RideBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + MAINTENANCE_DESC_BOB + WAIT_TIME_DESC_BOB + ZONE_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedRideMultipleTags));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // valid name with symbols"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride expectedRideWithSymbols \u003d new RideBuilder(BOB).withName(VALID_NAME_JESSIE)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, VALID_NAME_SYMBOLS + MAINTENANCE_DESC_BOB + WAIT_TIME_DESC_BOB + ZONE_DESC_BOB"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedRideWithSymbols));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride expectedRide \u003d new RideBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + MAINTENANCE_DESC_AMY + WAIT_TIME_DESC_AMY + ZONE_DESC_AMY,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new AddCommand(expectedRide));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + MAINTENANCE_DESC_BOB + WAIT_TIME_DESC_BOB + ZONE_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_MAINTENANCE_BOB + WAIT_TIME_DESC_BOB + ZONE_DESC_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // missing waitTime prefix"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MAINTENANCE_DESC_BOB + VALID_WAIT_TIME_BOB + ZONE_DESC_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // missing thanepark prefix"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MAINTENANCE_DESC_BOB + WAIT_TIME_DESC_BOB + VALID_ZONE_BOB,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_MAINTENANCE_BOB + VALID_WAIT_TIME_BOB + VALID_ZONE_BOB,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + MAINTENANCE_DESC_BOB + WAIT_TIME_DESC_BOB + ZONE_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_MAINTENANCE_DESC + WAIT_TIME_DESC_BOB + ZONE_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Maintenance.MESSAGE_MAINTENANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // invalid waitTime"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MAINTENANCE_DESC_BOB + INVALID_WAIT_TIME_DESC + ZONE_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, WaitTime.MESSAGE_WAIT_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // invalid thanepark"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MAINTENANCE_DESC_BOB + WAIT_TIME_DESC_BOB + INVALID_ZONE_DESC"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Zone.MESSAGE_ZONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + MAINTENANCE_DESC_BOB + WAIT_TIME_DESC_BOB + ZONE_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_SYMBOLS + MAINTENANCE_DESC_BOB + INVALID_WAIT_TIME_DESC"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + INVALID_ZONE_DESC, WaitTime.MESSAGE_WAIT_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + MAINTENANCE_DESC_BOB + WAIT_TIME_DESC_BOB"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + ZONE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 83,
      "YuPeiHenry": 8,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_RIDE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "YuPeiHenry": 2,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/parser/FilterCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_MAINTENANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_TAG_FULL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_WAITING_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_ZONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_ZONE_FULL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.AttributePredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.Maintenance;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.RideContainsConditionPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.WaitTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class FilterCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private FilterCommandParser parser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void parse_validArgs_returnsFilterCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cAttributePredicate\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // Tests with 2 attributes of same type for waiting time"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        predicates.add(new AttributePredicate(\"\u003c\", new WaitTime(\"100\")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        predicates.add(new AttributePredicate(\"\u003e\", new WaitTime(\"5\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        FilterCommand expectedFilterCommand \u003d new FilterCommand(new RideContainsConditionPredicate(predicates));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_WAITING_TIME + \" \u003c 100 \" + PREFIX_WAITING_TIME + \" \u003e 5\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedFilterCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicates.clear();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // Tests with Maintenance"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        predicates.add(new AttributePredicate(\"\u003c\", new Maintenance(\"100\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        predicates.add(new AttributePredicate(\"\u003e\", new Maintenance(\"5\")));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedFilterCommand \u003d new FilterCommand(new RideContainsConditionPredicate(predicates));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        userInput \u003d \" \" + PREFIX_MAINTENANCE + \" \u003c 100 \" + PREFIX_MAINTENANCE + \" \u003e 5\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedFilterCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicates.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // Test with 2 different types"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        predicates.add(new AttributePredicate(\"\u003c\", new Maintenance(\"100\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        predicates.add(new AttributePredicate(\"\u003e\", new WaitTime(\"5\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedFilterCommand \u003d new FilterCommand(new RideContainsConditionPredicate(predicates));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        userInput \u003d \" \" + PREFIX_MAINTENANCE + \" \u003c 100 \" + PREFIX_WAITING_TIME + \" \u003e 5\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedFilterCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_MAINTENANCE + \"\u003c 1 - 2\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String expectMessage \u003d String.format(FilterCommandParser.MESSAGE_INVALID_ARGS, \"-\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseFailure(parser, userInput, expectMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        userInput \u003d \" \" + PREFIX_NAME + \" \u003c ho \" + PREFIX_ZONE + \" geo \" + PREFIX_ZONE_FULL + \" fff \" + PREFIX_TAG"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + \" ggg \" + PREFIX_TAG_FULL + \" HHH \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectMessage \u003d String.format(FilterCommandParser.MESSAGE_INVALID_PREFIXES_USED, PREFIX_NAME"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + \" \" + PREFIX_TAG + \" \" + PREFIX_TAG_FULL + \" \" + PREFIX_ZONE + \" \" + PREFIX_ZONE_FULL);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseFailure(parser, userInput, expectMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 59,
      "YuPeiHenry": 17
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_TAG_FULL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_ZONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_ZONE_FULL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.RideContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Zone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(new RideContainsKeywordsPredicate("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // input looking with thanepark prefix"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new RideContainsKeywordsPredicate("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new ArrayList\u003c\u003e(), Optional.of(new Zone(\"10th street\"))));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, PREFIX_ZONE.getPrefix() + \" 10th street\", expectedFindCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // input with thanepark in full"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new RideContainsKeywordsPredicate("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new ArrayList\u003c\u003e(), Optional.of(new Zone(\"10th street\"))));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, PREFIX_ZONE_FULL.getPrefix() + \" 10th street\", expectedFindCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // input with single tag prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cString\u003e list \u003d Arrays.asList(PREFIX_TAG.getPrefix(), \"friends\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String userInput \u003d getUserInput(list);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        tags.add(new Tag(\"friends\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new RideContainsKeywordsPredicate(new ArrayList\u003c\u003e(), Optional.of(tags)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedFindCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // input with single tag prefix in full"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        list \u003d Arrays.asList(PREFIX_TAG_FULL.getPrefix(), \"friends\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        userInput \u003d getUserInput(list);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new RideContainsKeywordsPredicate(new ArrayList\u003c\u003e(), Optional.of(tags)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedFindCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // input with multiple tags prefix"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        list \u003d Arrays.asList(PREFIX_TAG.getPrefix(), \"friends\", PREFIX_TAG.getPrefix(), \"neighbours\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        userInput \u003d getUserInput(list);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        tags.add(new Tag(\"neighbours\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new RideContainsKeywordsPredicate(new ArrayList\u003c\u003e(), Optional.of(tags)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedFindCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // input with multiple tag prefix in full"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        list \u003d Arrays.asList(PREFIX_TAG_FULL.getPrefix(), \"friends\", PREFIX_TAG_FULL.getPrefix(), \"neighbours\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        userInput \u003d getUserInput(list);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new RideContainsKeywordsPredicate(new ArrayList\u003c\u003e(), Optional.of(tags)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedFindCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Creates a user input from a list of strings"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private String getUserInput(List\u003cString\u003e strings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String userInput \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        for (String s : strings) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            userInput \u003d userInput.concat(s).concat(\" \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 66,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/parser/HelpCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class HelpCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private HelpCommandParser parser \u003d new HelpCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void parse_validArgs_returnsHistoryCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, \"\", new HelpCommand(true, \"\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final String args2 \u003d \"more\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, args2, new HelpCommand(false, \"\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final String args3 \u003d \"add\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, args3, new HelpCommand(false, args3));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final String args4 \u003d args3 + \" 1234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, args4, new HelpCommand(false, args3));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "YuPeiHenry": 27
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/parser/HistoryCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class HistoryCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private HistoryCommandParser parser \u003d new HistoryCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void parse_validArgs_returnsHistoryCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, \"\", new HistoryCommand());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final String[] args \u003d {\"more\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, \"more\", new HistoryCommand(args));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            HistoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "YuPeiHenry": 29
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/parser/MaintainCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.logic.commands.MaintainCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " * outside of the MaintainCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " * same path through the MaintainCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "public class MaintainCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MaintainCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    private MaintainCommandParser parser \u003d new MaintainCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public void parse_validArgs_returnsMaintainCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, \"1\", new MaintainCommand(INDEX_FIRST_RIDE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertParseFailure(parser, \"abc\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // no index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiajunteo": 38,
      "YuPeiHenry": 2
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/parser/OpenCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import seedu.thanepark.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " * outside of the OpenCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " * same path through the OpenCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "public class OpenCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    private OpenCommandParser parser \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public void parse_validArgs_returnsOpenCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, \"1\", new OpenCommand(INDEX_FIRST_RIDE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leongengsea": 30,
      "YuPeiHenry": 2
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Maintenance;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.WaitTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Zone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final String INVALID_NAME \u003d \"@@@@@@@A\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String INVALID_MAINTENANCE \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String INVALID_WAIT_TIME \u003d \"example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String VALID_MAINTENANCE \u003d \"123456\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String VALID_WAIT_TIME \u003d \"18\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(INDEX_FIRST_RIDE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(INDEX_FIRST_RIDE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMaintenance((String) null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseMaintenance(INVALID_MAINTENANCE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Maintenance expectedMaintenance \u003d new Maintenance(VALID_MAINTENANCE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedMaintenance, ParserUtil.parseMaintenance(VALID_MAINTENANCE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String maintenanceWithWhitespace \u003d WHITESPACE + VALID_MAINTENANCE + WHITESPACE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Maintenance expectedMaintenance \u003d new Maintenance(VALID_MAINTENANCE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedMaintenance, ParserUtil.parseMaintenance(maintenanceWithWhitespace));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Zone expectedZone \u003d new Zone(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(expectedZone, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Zone expectedZone \u003d new Zone(VALID_ADDRESS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(expectedZone, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void parseWaitingTime_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseWaitingTime((String) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void parseWaitingTime_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseWaitingTime(INVALID_WAIT_TIME));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void parseWaitingTime_validValueWithoutWhitespace_returnsWaitingTime() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        WaitTime expectedWaitTime \u003d new WaitTime(VALID_WAIT_TIME);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(expectedWaitTime, ParserUtil.parseWaitingTime(VALID_WAIT_TIME));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void parseWaitingTime_validValueWithWhitespace_returnsTrimmedWaitingTime() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String waitTimeWithWhitespace \u003d WHITESPACE + VALID_WAIT_TIME + WHITESPACE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        WaitTime expectedWaitTime \u003d new WaitTime(VALID_WAIT_TIME);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedWaitTime, ParserUtil.parseWaitingTime(waitTimeWithWhitespace));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 17,
      "YuPeiHenry": 22,
      "-": 168
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/parser/ShutDownCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "import seedu.thanepark.logic.commands.ShutDownCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " * outside of the ShutDownCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " * same path through the ShutDownCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "public class ShutDownCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    private ShutDownCommandParser parser \u003d new ShutDownCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public void parse_validArgs_returnsShutDownCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ShutDownCommand(INDEX_FIRST_RIDE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leongengsea"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShutDownCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leongengsea": 30,
      "YuPeiHenry": 2
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/parser/ThaneParkParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.logic.commands.AllCommandWords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.UpdateCommand.UpdateRideDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ViewAllCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.logic.commands.ViewStatusCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.RideContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.model.ride.RideStatusPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.model.ride.Status;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.RideBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.RideUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.UpdateRideDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class ThaneParkParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final ThaneParkParser parser \u003d new ThaneParkParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride ride \u003d new RideBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(RideUtil.getAddCommand(ride));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(new AddCommand(ride), command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RIDE.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_RIDE), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride ride \u003d new RideBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder(ride).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateCommand command \u003d (UpdateCommand) parser.parseCommand(UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + INDEX_FIRST_RIDE.getOneBased() + \" \" + RideUtil.getEditRideDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(new UpdateCommand(INDEX_FIRST_RIDE, descriptor), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(new FindCommand(new RideContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" more\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" more 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final String commandWord \u003d \"add\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert (AllCommandWords.isCommandWord(commandWord));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" \" + commandWord) instanceof HelpCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" \" + commandWord"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" more\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ViewAllCommand.COMMAND_WORD) instanceof ViewAllCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ViewAllCommand.COMMAND_WORD + \" 3\") instanceof ViewAllCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        ViewCommand command \u003d (ViewCommand) parser.parseCommand("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RIDE.getOneBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(new ViewCommand(INDEX_FIRST_RIDE), command);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public void parseCommand_viewstatus() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        RideStatusPredicate predicate \u003d new RideStatusPredicate(Status.OPEN);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        ViewStatusCommand command \u003d (ViewStatusCommand) parser.parseCommand("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                ViewStatusCommand.COMMAND_WORD + \" open\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertEquals(new ViewStatusCommand(predicate), command);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 26,
      "jiajunteo": 11,
      "YuPeiHenry": 21,
      "leongengsea": 3,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/parser/UpdateCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.INVALID_MAINTENANCE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.INVALID_WAIT_TIME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.INVALID_ZONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.MAINTENANCE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.MAINTENANCE_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_MAINTENANCE_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_MAINTENANCE_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_NAME_JESSIE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_NAME_SYMBOLS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_WAIT_TIME_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_WAIT_TIME_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_ZONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_ZONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.WAIT_TIME_DESC_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.WAIT_TIME_DESC_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.ZONE_DESC_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.ZONE_DESC_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_THIRD_RIDE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.UpdateCommand.UpdateRideDescriptor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Maintenance;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.WaitTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Zone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.UpdateRideDescriptorBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "public class UpdateCommandParserTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    private UpdateCommandParser parser \u003d new UpdateCommandParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertParseFailure(parser, \"1\", UpdateCommand.MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // invalid maintenance"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MAINTENANCE_DESC,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Maintenance.MESSAGE_MAINTENANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // invalid waitTime"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_WAIT_TIME_DESC, WaitTime.MESSAGE_WAIT_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // invalid thanepark"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ZONE_DESC, Zone.MESSAGE_ZONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // invalid maintenance followed by valid waitTime"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MAINTENANCE_DESC + WAIT_TIME_DESC_AMY,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Maintenance.MESSAGE_MAINTENANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // valid maintenance followed by invalid maintenance. The test case for invalid maintenance followed by"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // valid maintenance is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, \"1\" + MAINTENANCE_DESC_BOB + INVALID_MAINTENANCE_DESC,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Maintenance.MESSAGE_MAINTENANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Ride} being edited,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseFailure(parser, \"1\" + VALID_NAME_SYMBOLS + INVALID_WAIT_TIME_DESC + INVALID_ZONE_DESC"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        + VALID_MAINTENANCE_AMY,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                WaitTime.MESSAGE_WAIT_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MAINTENANCE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + WAIT_TIME_DESC_AMY + ZONE_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                .withMaintenance(VALID_MAINTENANCE_BOB).withWaitTime(VALID_WAIT_TIME_AMY).withZone(VALID_ZONE_AMY)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MAINTENANCE_DESC_BOB + WAIT_TIME_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder().withMaintenance(VALID_MAINTENANCE_BOB)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withWaitTime(VALID_WAIT_TIME_AMY).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_RIDE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // name with symbols"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        targetIndex \u003d INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + VALID_NAME_SYMBOLS;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        descriptor \u003d new UpdateRideDescriptorBuilder().withName(VALID_NAME_JESSIE).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // maintenance"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MAINTENANCE_DESC_AMY;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        descriptor \u003d new UpdateRideDescriptorBuilder().withMaintenance(VALID_MAINTENANCE_AMY).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // waitTime"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + WAIT_TIME_DESC_AMY;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        descriptor \u003d new UpdateRideDescriptorBuilder().withWaitTime(VALID_WAIT_TIME_AMY).build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // thanepark"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ZONE_DESC_AMY;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        descriptor \u003d new UpdateRideDescriptorBuilder().withZone(VALID_ZONE_AMY).build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        descriptor \u003d new UpdateRideDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MAINTENANCE_DESC_AMY + ZONE_DESC_AMY + WAIT_TIME_DESC_AMY"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + TAG_DESC_FRIEND + MAINTENANCE_DESC_AMY + ZONE_DESC_AMY + WAIT_TIME_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + MAINTENANCE_DESC_BOB + ZONE_DESC_BOB + WAIT_TIME_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder().withMaintenance(VALID_MAINTENANCE_BOB)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withWaitTime(VALID_WAIT_TIME_BOB)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                .withZone(VALID_ZONE_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_MAINTENANCE_DESC + MAINTENANCE_DESC_BOB;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withMaintenance(VALID_MAINTENANCE_BOB).build();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + WAIT_TIME_DESC_BOB + INVALID_MAINTENANCE_DESC + ZONE_DESC_BOB"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                + MAINTENANCE_DESC_BOB;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        descriptor \u003d new UpdateRideDescriptorBuilder()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withMaintenance(VALID_MAINTENANCE_BOB).withWaitTime(VALID_WAIT_TIME_BOB)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                .withZone(VALID_ZONE_BOB).build();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_RIDE;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateRideDescriptor descriptor \u003d new UpdateRideDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 72,
      "YuPeiHenry": 40,
      "leongengsea": 25,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/parser/ViewCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ViewCommand(INDEX_FIRST_RIDE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "YuPeiHenry": 2,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/logic/parser/ViewStatusCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ViewStatusCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.RideStatusPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Status;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "public class ViewStatusCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    private ViewStatusCommandParser parser \u003d new ViewStatusCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewStatusCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public void parse_multipleArgs_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertParseFailure(parser, \"open shutdown\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewStatusCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertParseFailure(parser, \"close\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewStatusCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public void parse_validArg_returnsViewStatusCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        ViewStatusCommand expectedCommand \u003d new ViewStatusCommand(new RideStatusPredicate(Status.OPEN));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // no leading or trailing whitespaces"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertParseSuccess(parser, \"open\", expectedCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // contains whitespaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertParseSuccess(parser, \" \\n open \\t \", expectedCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // mixed-case"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertParseSuccess(parser, \"OpEn\", expectedCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 7,
      "jiajunteo": 41
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.model.Model.PREDICATE_SHOW_ALL_RIDES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.ACCELERATOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.BIG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.RideContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.testutil.ThaneParkBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void hasRide_nullRide_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        modelManager.hasRide(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void hasRide_rideNotInThanePark_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(modelManager.hasRide(ACCELERATOR));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void hasRide_rideInThanePark_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        modelManager.addRide(ACCELERATOR);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(modelManager.hasRide(ACCELERATOR));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void getFilteredRideList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        modelManager.getFilteredRideList().remove(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ThanePark thanePark \u003d new ThaneParkBuilder().withRide(ACCELERATOR).withRide(BIG).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ThanePark differentThanePark \u003d new ThanePark();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        modelManager \u003d new ModelManager(thanePark, userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(thanePark, userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // different thanePark -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentThanePark, userPrefs)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String[] keywords \u003d ACCELERATOR.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        modelManager.updateFilteredRideList(new RideContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(thanePark, userPrefs)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredRideList(PREDICATE_SHOW_ALL_RIDES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        differentUserPrefs.setThaneParkFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(thanePark, differentUserPrefs)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 7,
      "YuPeiHenry": 19,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/model/ThaneParkTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_ZONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.ACCELERATOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.exceptions.DuplicateRideException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.RideBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class ThaneParkTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private final ThanePark thanePark \u003d new ThanePark();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(Collections.emptyList(), thanePark.getRideList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thanePark.resetData(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void resetData_withValidReadOnlyThanePark_replacesData() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThanePark newData \u003d getTypicalThanePark();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thanePark.resetData(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(newData, thanePark);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void resetData_withDuplicateRides_throwsDuplicateRideException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // Two rides with the same identity fields"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride editedAlice \u003d new RideBuilder(ACCELERATOR).withAddress(VALID_ZONE_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e newRides \u003d Arrays.asList(ACCELERATOR, editedAlice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThaneParkStub newData \u003d new ThaneParkStub(newRides);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thrown.expect(DuplicateRideException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thanePark.resetData(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void hasRide_nullRide_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thanePark.hasRide(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void hasRide_rideNotInThanePark_returnsFalse() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(thanePark.hasRide(ACCELERATOR));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void hasRide_rideInThanePark_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thanePark.addRide(ACCELERATOR);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(thanePark.hasRide(ACCELERATOR));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void hasRide_rideWithSameIdentityFieldsInThanePark_returnsTrue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thanePark.addRide(ACCELERATOR);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride editedAlice \u003d new RideBuilder(ACCELERATOR).withAddress(VALID_ZONE_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(thanePark.hasRide(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void getRideList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thanePark.getRideList().remove(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * A stub ReadOnlyThanePark whose rides list can violate interface constraints."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static class ThaneParkStub implements ReadOnlyThanePark {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        private final ObservableList\u003cRide\u003e rides \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThaneParkStub(Collection\u003cRide\u003e rides) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            this.rides.setAll(rides);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public ObservableList\u003cRide\u003e getRideList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            return rides;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 37,
      "YuPeiHenry": 7,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/model/VersionedThaneParkTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.CASTLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.testutil.ThaneParkBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class VersionedThaneParkTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final ReadOnlyThanePark thaneParkWithAmy \u003d new ThaneParkBuilder().withRide(AMY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final ReadOnlyThanePark thaneParkWithBob \u003d new ThaneParkBuilder().withRide(BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final ReadOnlyThanePark thaneParkWithCastle \u003d new ThaneParkBuilder().withRide(CASTLE).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final ReadOnlyThanePark emptyThanePark \u003d new ThaneParkBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void commit_singleThanePark_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark versionedThanePark \u003d prepareThaneParkList(emptyThanePark);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        versionedThanePark.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertThaneParkListStatus(versionedThanePark,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Collections.singletonList(emptyThanePark),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                emptyThanePark,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void commit_multipleThaneParkPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark versionedThanePark \u003d prepareThaneParkList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                emptyThanePark, thaneParkWithAmy, thaneParkWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        versionedThanePark.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertThaneParkListStatus(versionedThanePark,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Arrays.asList(emptyThanePark, thaneParkWithAmy, thaneParkWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                thaneParkWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void commit_multipleThaneParkPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark versionedThanePark \u003d prepareThaneParkList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                emptyThanePark, thaneParkWithAmy, thaneParkWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedThanePark, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        versionedThanePark.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertThaneParkListStatus(versionedThanePark,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Collections.singletonList(emptyThanePark),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                emptyThanePark,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void canUndo_multipleThaneParkPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark versionedThanePark \u003d prepareThaneParkList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                emptyThanePark, thaneParkWithAmy, thaneParkWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(versionedThanePark.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void canUndo_multipleThaneParkPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark versionedThanePark \u003d prepareThaneParkList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                emptyThanePark, thaneParkWithAmy, thaneParkWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedThanePark, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(versionedThanePark.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void canUndo_singleThanePark_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark versionedThanePark \u003d prepareThaneParkList(emptyThanePark);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(versionedThanePark.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void canUndo_multipleThaneParkPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark versionedThanePark \u003d prepareThaneParkList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                emptyThanePark, thaneParkWithAmy, thaneParkWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedThanePark, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(versionedThanePark.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void canRedo_multipleThaneParkPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark versionedThanePark \u003d prepareThaneParkList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                emptyThanePark, thaneParkWithAmy, thaneParkWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedThanePark, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(versionedThanePark.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void canRedo_multipleThaneParkPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark versionedThanePark \u003d prepareThaneParkList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                emptyThanePark, thaneParkWithAmy, thaneParkWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedThanePark, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(versionedThanePark.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void canRedo_singleThanePark_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark versionedThanePark \u003d prepareThaneParkList(emptyThanePark);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(versionedThanePark.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void canRedo_multipleThaneParkPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark versionedThanePark \u003d prepareThaneParkList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                emptyThanePark, thaneParkWithAmy, thaneParkWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(versionedThanePark.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void undo_multipleThaneParkPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark versionedThanePark \u003d prepareThaneParkList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                emptyThanePark, thaneParkWithAmy, thaneParkWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        versionedThanePark.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertThaneParkListStatus(versionedThanePark,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Collections.singletonList(emptyThanePark),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                thaneParkWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Collections.singletonList(thaneParkWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void undo_multipleThaneParkPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark versionedThanePark \u003d prepareThaneParkList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                emptyThanePark, thaneParkWithAmy, thaneParkWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedThanePark, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        versionedThanePark.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertThaneParkListStatus(versionedThanePark,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                emptyThanePark,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Arrays.asList(thaneParkWithAmy, thaneParkWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void undo_singleThanePark_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark versionedThanePark \u003d prepareThaneParkList(emptyThanePark);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertThrows(VersionedThanePark.NoUndoableStateException.class, versionedThanePark::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void undo_multipleThaneParkPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark versionedThanePark \u003d prepareThaneParkList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                emptyThanePark, thaneParkWithAmy, thaneParkWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedThanePark, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertThrows(VersionedThanePark.NoUndoableStateException.class, versionedThanePark::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void redo_multipleThaneParkPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark versionedThanePark \u003d prepareThaneParkList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                emptyThanePark, thaneParkWithAmy, thaneParkWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedThanePark, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        versionedThanePark.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertThaneParkListStatus(versionedThanePark,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Arrays.asList(emptyThanePark, thaneParkWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                thaneParkWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void redo_multipleThaneParkPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark versionedThanePark \u003d prepareThaneParkList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                emptyThanePark, thaneParkWithAmy, thaneParkWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedThanePark, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        versionedThanePark.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertThaneParkListStatus(versionedThanePark,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Collections.singletonList(emptyThanePark),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                thaneParkWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Collections.singletonList(thaneParkWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void redo_singleThanePark_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark versionedThanePark \u003d prepareThaneParkList(emptyThanePark);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertThrows(VersionedThanePark.NoRedoableStateException.class, versionedThanePark::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void redo_multipleThaneParkPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark versionedThanePark \u003d prepareThaneParkList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                emptyThanePark, thaneParkWithAmy, thaneParkWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertThrows(VersionedThanePark.NoRedoableStateException.class, versionedThanePark::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark versionedThanePark \u003d prepareThaneParkList(thaneParkWithAmy, thaneParkWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark copy \u003d prepareThaneParkList(thaneParkWithAmy, thaneParkWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(versionedThanePark.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(versionedThanePark.equals(versionedThanePark));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(versionedThanePark.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(versionedThanePark.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark differentThaneParkList \u003d prepareThaneParkList(thaneParkWithBob, thaneParkWithCastle);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(versionedThanePark.equals(differentThaneParkList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark differentCurrentStatePointer \u003d prepareThaneParkList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                thaneParkWithAmy, thaneParkWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedThanePark, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(versionedThanePark.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Asserts that {@code versionedThanePark} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * states before {@code versionedThanePark#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * and states after {@code versionedThanePark#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertThaneParkListStatus(VersionedThanePark versionedThanePark,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                                             List\u003cReadOnlyThanePark\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                                             ReadOnlyThanePark expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                                             List\u003cReadOnlyThanePark\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(new ThanePark(versionedThanePark), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        while (versionedThanePark.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            versionedThanePark.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (ReadOnlyThanePark expectedThanePark : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertEquals(expectedThanePark, new ThanePark(versionedThanePark));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            versionedThanePark.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (ReadOnlyThanePark expectedThanePark : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            versionedThanePark.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertEquals(expectedThanePark, new ThanePark(versionedThanePark));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(versionedThanePark.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedThanePark.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Creates and returns a {@code VersionedThanePark} with the {@code thaneParkStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code VersionedThanePark#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private VersionedThanePark prepareThaneParkList(ReadOnlyThanePark... thaneParkStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(thaneParkStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        VersionedThanePark versionedThanePark \u003d new VersionedThanePark(thaneParkStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (int i \u003d 1; i \u003c thaneParkStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            versionedThanePark.resetData(thaneParkStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            versionedThanePark.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return versionedThanePark;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Shifts the {@code versionedThanePark#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedThanePark versionedThanePark, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            versionedThanePark.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 9,
      "YuPeiHenry": 151,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/model/ride/MaintenanceTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class MaintenanceTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Maintenance(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void constructor_invalidMaintenance_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String invalidMaintenance \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Maintenance(invalidMaintenance));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void equal() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Maintenance firstMaintenance \u003d new Maintenance(\"100\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Maintenance secondMaintenance \u003d new Maintenance(100);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Maintenance thirdMaintenance \u003d new Maintenance(50);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(firstMaintenance.equals(firstMaintenance));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // same value using different methods -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(firstMaintenance.equals(secondMaintenance));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(firstMaintenance.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(firstMaintenance.equals(1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(firstMaintenance.equals(thirdMaintenance));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void isValidMaintenance() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // null days since last maintenance"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Maintenance.isValidMaintenance(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // invalid days since last maintenance"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(Maintenance.isValidMaintenance(\"\")); // empty string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(Maintenance.isValidMaintenance(\" \")); // spaces only"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertFalse(Maintenance.isValidMaintenance(\"-1\")); // negative integers"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertFalse(Maintenance.isValidMaintenance(\"9p01\")); // alphabets within digits"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertFalse(Maintenance.isValidMaintenance(\"9312 4\")); // spaces within digits"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertFalse(Maintenance.isValidMaintenance(\"1000012345\")); // more than 9 digits"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // valid days since last maintenance"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertTrue(Maintenance.isValidMaintenance(\"0\")); // smallest acceptable integer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(Maintenance.isValidMaintenance(\"1\")); // exactly 1 numbers"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertTrue(Maintenance.isValidMaintenance(\"9999\")); // largest acceptable integer"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 23,
      "jiajunteo": 9,
      "YuPeiHenry": 30
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/model/ride/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/model/ride/RideContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.RideBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class RideContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate firstPredicate \u003d new RideContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate secondPredicate \u003d new RideContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate firstPredicateCopy \u003d new RideContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different ride -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate predicate \u003d new RideContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(predicate.test(new RideBuilder().withName(\"Alice Big\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicate \u003d new RideContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Big\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(predicate.test(new RideBuilder().withName(\"Alice Big\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicate \u003d new RideContainsKeywordsPredicate(Arrays.asList(\"Big\", \"Castle\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(predicate.test(new RideBuilder().withName(\"Alice Castle\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicate \u003d new RideContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(predicate.test(new RideBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        RideContainsKeywordsPredicate predicate \u003d new RideContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(predicate.test(new RideBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        predicate \u003d new RideContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(predicate.test(new RideBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // Keywords match days since last maintenance, current waiting time and thanepark, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        predicate \u003d new RideContainsKeywordsPredicate(Arrays.asList(\"12345\", \"1\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(predicate.test(new RideBuilder().withName(\"Alice\").withMaintenance(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                .withWaitTime(\"1\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 19,
      "YuPeiHenry": 4,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/model/ride/RideStatusPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "public class RideStatusPredicateTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        Status statusOpen \u003d Status.OPEN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        Status statusMaintenance \u003d Status.MAINTENANCE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        RideStatusPredicate predicateOpen \u003d new RideStatusPredicate(statusOpen);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        RideStatusPredicate predicateOpenCopy \u003d new RideStatusPredicate(statusOpen);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        RideStatusPredicate predicateMaintenance \u003d new RideStatusPredicate(statusMaintenance);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertTrue(predicateOpen.equals(predicateOpen));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertTrue(predicateOpen.equals(predicateOpenCopy));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertFalse(predicateOpen.equals(1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertFalse(predicateOpen.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        // different ride -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertFalse(predicateOpen.equals(predicateMaintenance));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "jiajunteo": 33
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/model/ride/RideTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_MAINTENANCE_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_WAIT_TIME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_ZONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.ACCELERATOR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.RideBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class RideTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride ride \u003d new RideBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ride.getTags().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void isSameRide() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(ACCELERATOR.isSameRide(ACCELERATOR));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(ACCELERATOR.isSameRide(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // different phone and waitTime but same name -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride editedAlice \u003d new RideBuilder(ACCELERATOR)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withMaintenance(VALID_MAINTENANCE_BOB)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withWaitTime(VALID_WAIT_TIME_BOB)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(ACCELERATOR.isSameRide(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        editedAlice \u003d new RideBuilder(ACCELERATOR).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(ACCELERATOR.isSameRide(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        editedAlice \u003d new RideBuilder(ACCELERATOR).withWaitTime(VALID_WAIT_TIME_BOB).withAddress(VALID_ZONE_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(ACCELERATOR.isSameRide(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // same name, same waitTime, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        editedAlice \u003d new RideBuilder(ACCELERATOR).withMaintenance(VALID_MAINTENANCE_BOB).withAddress(VALID_ZONE_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(ACCELERATOR.isSameRide(editedAlice));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // same name, same phone, same waitTime, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        editedAlice \u003d new RideBuilder(ACCELERATOR).withAddress(VALID_ZONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(ACCELERATOR.isSameRide(editedAlice));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride aliceCopy \u003d new RideBuilder(ACCELERATOR).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(ACCELERATOR.equals(aliceCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(ACCELERATOR.equals(ACCELERATOR));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(ACCELERATOR.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(ACCELERATOR.equals(5));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different ride -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(ACCELERATOR.equals(BOB));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride editedAlice \u003d new RideBuilder(ACCELERATOR).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(ACCELERATOR.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        editedAlice \u003d new RideBuilder(ACCELERATOR).withMaintenance(VALID_MAINTENANCE_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(ACCELERATOR.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // different waitTime -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        editedAlice \u003d new RideBuilder(ACCELERATOR).withWaitTime(VALID_WAIT_TIME_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(ACCELERATOR.equals(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different thanepark -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        editedAlice \u003d new RideBuilder(ACCELERATOR).withAddress(VALID_ZONE_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(ACCELERATOR.equals(editedAlice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        editedAlice \u003d new RideBuilder(ACCELERATOR).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(ACCELERATOR.equals(editedAlice));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 42,
      "YuPeiHenry": 8,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/model/ride/UniqueRideListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_ZONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.ACCELERATOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.exceptions.DuplicateRideException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.exceptions.RideNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.RideBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class UniqueRideListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final UniqueRideList uniqueRideList \u003d new UniqueRideList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void contains_nullRide_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uniqueRideList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void contains_rideNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(uniqueRideList.contains(ACCELERATOR));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void contains_rideInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(uniqueRideList.contains(ACCELERATOR));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void contains_rideWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride editedAlice \u003d new RideBuilder(ACCELERATOR).withAddress(VALID_ZONE_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(uniqueRideList.contains(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void add_nullRide_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uniqueRideList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void add_duplicateRide_throwsDuplicateRideException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thrown.expect(DuplicateRideException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setRide_nullTargetRide_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.setRide(null, ACCELERATOR);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setRide_nullEditedRide_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.setRide(ACCELERATOR, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setRide_targetRideNotInList_throwsRideNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thrown.expect(RideNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.setRide(ACCELERATOR, ACCELERATOR);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setRide_editedRideIsSameRide_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.setRide(ACCELERATOR, ACCELERATOR);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UniqueRideList expectedUniqueRideList \u003d new UniqueRideList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedUniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedUniqueRideList, uniqueRideList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setRide_editedRideHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride editedAlice \u003d new RideBuilder(ACCELERATOR).withAddress(VALID_ZONE_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.setRide(ACCELERATOR, editedAlice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UniqueRideList expectedUniqueRideList \u003d new UniqueRideList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        expectedUniqueRideList.add(editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedUniqueRideList, uniqueRideList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setRide_editedRideHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.setRide(ACCELERATOR, BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UniqueRideList expectedUniqueRideList \u003d new UniqueRideList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        expectedUniqueRideList.add(BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedUniqueRideList, uniqueRideList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setRide_editedRideHasNonUniqueIdentity_throwsDuplicateRideException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uniqueRideList.add(BOB);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thrown.expect(DuplicateRideException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.setRide(ACCELERATOR, BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void remove_nullRide_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uniqueRideList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void remove_rideDoesNotExist_throwsRideNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thrown.expect(RideNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.remove(ACCELERATOR);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void remove_existingRide_removesRide() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.remove(ACCELERATOR);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UniqueRideList expectedUniqueRideList \u003d new UniqueRideList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedUniqueRideList, uniqueRideList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setRides_nullUniqueRideList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uniqueRideList.setRides((UniqueRideList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setRides_uniqueRideList_replacesOwnListWithProvidedUniqueRideList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UniqueRideList expectedUniqueRideList \u003d new UniqueRideList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        expectedUniqueRideList.add(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uniqueRideList.setRides(expectedUniqueRideList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedUniqueRideList, uniqueRideList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setRides_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uniqueRideList.setRides((List\u003cRide\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setRides_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        uniqueRideList.add(ACCELERATOR);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e rideList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uniqueRideList.setRides(rideList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        UniqueRideList expectedUniqueRideList \u003d new UniqueRideList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        expectedUniqueRideList.add(BOB);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedUniqueRideList, uniqueRideList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setRides_listWithDuplicateRides_throwsDuplicateRideException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cRide\u003e listWithDuplicateRides \u003d Arrays.asList(ACCELERATOR, ACCELERATOR);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        thrown.expect(DuplicateRideException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uniqueRideList.setRides(listWithDuplicateRides);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uniqueRideList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 41,
      "YuPeiHenry": 49,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/model/ride/WaitTimeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class WaitTimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new WaitTime(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void constructor_invalidWaitingTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String invalidWaitingTime \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new WaitTime(invalidWaitingTime));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void isValidWaitTime() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // null waiting time"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e WaitTime.isValidWaitTime(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // blank waiting time"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(WaitTime.isValidWaitTime(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // valid waiting time"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(WaitTime.isValidWaitTime(\"17\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "YuPeiHenry": 61
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/model/ride/ZoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.ride;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class ZoneTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Zone(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Zone(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void isValidZone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // null thanepark"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Zone.isValidZone(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(Zone.isValidZone(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(Zone.isValidZone(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(Zone.isValidZone(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(Zone.isValidZone(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(Zone.isValidZone(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long thanepark"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 13,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/model/tag/TagTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        userPrefs.setThaneParkFilePath(Paths.get(\"thanepark.xml\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "YuPeiHenry": 1,
      "-": 130
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.events.model.ThaneParkChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ThanePark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlThaneParkStorage thaneParkStorage \u003d new XmlThaneParkStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        storageManager \u003d new StorageManager(thaneParkStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void thaneParkReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "         * {@link XmlThaneParkStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlThaneParkStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThanePark original \u003d getTypicalThanePark();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        storageManager.saveThanePark(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ReadOnlyThanePark retrieved \u003d storageManager.readThanePark().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(original, new ThanePark(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void getThaneParkFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertNotNull(storageManager.getThaneParkFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void handleThaneParkChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlThaneParkStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        storage.handleThaneParkChangedEvent(new ThaneParkChangedEvent(new ThanePark()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    class XmlThaneParkStorageExceptionThrowingStub extends XmlThaneParkStorage {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        public XmlThaneParkStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void saveThanePark(ReadOnlyThanePark thanePark, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 7,
      "YuPeiHenry": 18,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/storage/XmlAdaptedRideTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.storage.XmlAdaptedRide.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.BIG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.RACHEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.Maintenance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.WaitTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Zone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class XmlAdaptedRideTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final String INVALID_NAME \u003d \"!@#$%^\u0026*()\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String INVALID_MAINTENANCE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String INVALID_WAIT_TIME \u003d \"-123\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final String VALID_NAME_WITH_SYMBOLS \u003d \"R@chel\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final String VALID_NAME \u003d BIG.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String VALID_MAINTENANCE \u003d String.valueOf(BIG.getDaysSinceMaintenance().getValue());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String VALID_WAIT_TIME \u003d String.valueOf(BIG.getWaitingTime().getValue());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BIG.getZone().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BIG.getTags().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void toModelType_validRideDetails_returnsRide() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedRide ride \u003d new XmlAdaptedRide(BIG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(BIG, ride.toModelType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedRide ride \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new XmlAdaptedRide(INVALID_NAME, VALID_MAINTENANCE, VALID_WAIT_TIME, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, ride::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void toModelType_validNameWithSymbols() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedRide ride \u003d new XmlAdaptedRide(VALID_NAME_WITH_SYMBOLS, VALID_MAINTENANCE, VALID_WAIT_TIME,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(RACHEL, ride.toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedRide ride \u003d new XmlAdaptedRide(null,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                VALID_MAINTENANCE, VALID_WAIT_TIME, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, ride::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void toModelType_invalidMaintenance_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedRide ride \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new XmlAdaptedRide(VALID_NAME, INVALID_MAINTENANCE, VALID_WAIT_TIME, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String expectedMessage \u003d Maintenance.MESSAGE_MAINTENANCE_CONSTRAINTS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, ride::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void toModelType_nullMaintenance_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedRide ride \u003d new XmlAdaptedRide(VALID_NAME, null, VALID_WAIT_TIME, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Maintenance.class.getSimpleName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, ride::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void toModelType_invalidWaitingTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedRide ride \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                new XmlAdaptedRide(VALID_NAME, VALID_MAINTENANCE, INVALID_WAIT_TIME, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String expectedMessage \u003d WaitTime.MESSAGE_WAIT_TIME_CONSTRAINTS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, ride::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void toModelType_nullWaitingTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedRide ride \u003d new XmlAdaptedRide(VALID_NAME, VALID_MAINTENANCE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, WaitTime.class.getSimpleName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, ride::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedRide ride \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new XmlAdaptedRide(VALID_NAME, VALID_MAINTENANCE, VALID_WAIT_TIME, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String expectedMessage \u003d Zone.MESSAGE_ZONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, ride::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedRide ride \u003d new XmlAdaptedRide(VALID_NAME,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                VALID_MAINTENANCE, VALID_WAIT_TIME, null, VALID_TAGS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Zone.class.getSimpleName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, ride::toModelType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlAdaptedRide ride \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                new XmlAdaptedRide(VALID_NAME, VALID_MAINTENANCE, VALID_WAIT_TIME, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, ride::toModelType);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 21,
      "YuPeiHenry": 46,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/storage/XmlSerializableThaneParkTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ThanePark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.TypicalRides;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class XmlSerializableThaneParkTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableThaneParkTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final Path TYPICAL_RIDES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalRideThanePark.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final Path INVALID_RIDE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidRideThanePark.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final Path DUPLICATE_RIDE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateRideThanePark.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void toModelType_typicalRidesFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlSerializableThanePark dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_RIDES_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                XmlSerializableThanePark.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ThanePark thaneParkFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ThanePark typicalRidesThanePark \u003d TypicalRides.getTypicalThanePark();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(thaneParkFromFile, typicalRidesThanePark);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void toModelType_invalidRideFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlSerializableThanePark dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_RIDE_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                XmlSerializableThanePark.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void toModelType_duplicateRides_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        XmlSerializableThanePark dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_RIDE_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                XmlSerializableThanePark.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thrown.expectMessage(XmlSerializableThanePark.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 16,
      "YuPeiHenry": 7,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/storage/XmlThaneParkStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.ACCELERATOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.HAUNTED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.getTypicalThanePark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ThanePark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class XmlThaneParkStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlThaneParkStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void readThanePark_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        readThanePark(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private java.util.Optional\u003cReadOnlyThanePark\u003e readThanePark(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return new XmlThaneParkStorage(Paths.get(filePath)).readThanePark(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(readThanePark(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        readThanePark(\"NotXmlFormatThanePark.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void readThanePark_invalidRideThanePark_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        readThanePark(\"invalidRideThanePark.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void readThanePark_invalidAndValidRideThanePark_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        readThanePark(\"invalidAndValidRideThanePark.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void readAndSaveThanePark_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempThanePark.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThanePark original \u003d getTypicalThanePark();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlThaneParkStorage xmlThaneParkStorage \u003d new XmlThaneParkStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        xmlThaneParkStorage.saveThanePark(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ReadOnlyThanePark readBack \u003d xmlThaneParkStorage.readThanePark(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(original, new ThanePark(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        original.addRide(HAUNTED);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        original.removeRide(ACCELERATOR);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        xmlThaneParkStorage.saveThanePark(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        readBack \u003d xmlThaneParkStorage.readThanePark(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(original, new ThanePark(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        original.addRide(IDA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        xmlThaneParkStorage.saveThanePark(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        readBack \u003d xmlThaneParkStorage.readThanePark().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(original, new ThanePark(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void saveThanePark_nullThanePark_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        saveThanePark(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Saves {@code thanePark} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void saveThanePark(ReadOnlyThanePark thanePark, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            new XmlThaneParkStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    .saveThanePark(thanePark, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void saveThanePark_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        saveThanePark(new ThanePark(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 10,
      "YuPeiHenry": 34,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/testutil/Assert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expected} Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expected, null, callable);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                                    VoidCallable callable) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            callable.call();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable actualException) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String errorMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!actualException.getClass().isAssignableFrom(expectedException)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        expectedException.getName(), actualException.getClass().getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(errorMessage, actualException);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(String.format("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function which does not return anything and may throw an exception."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface VoidCallable {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        void call() throws Exception;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/testutil/CommandEntryBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.logging.CommandEntry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.logging.ExecutedCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Builds valid CommandEntry for test and valid/invalid Command Strings."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class CommandEntryBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final CommandEntry[] COMMAND_ENTRIES \u003d {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new CommandEntry(Instant.now(), new ExecutedCommand(\"add asdfvf\")),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new CommandEntry(Instant.now(), new ExecutedCommand(\"delete 1\")),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new CommandEntry(Instant.now(), new ExecutedCommand(\"help\"))};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String[] COMMAND_STRINGS \u003d {\"add 20\", \"delete 1\", \"history\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "YuPeiHenry": 16
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/testutil/EventsUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper methods related to events."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers. This method will return successfully after the {@code event}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * has been posted to all subscribers."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postNow(BaseEvent event) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        new GuiRobot().interact(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers at some unspecified time in the future."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postLater(BaseEvent event) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/testutil/RideBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Maintenance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.WaitTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Zone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * A utility class to help with building Ride objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class RideBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Accelerator\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String DEFAULT_MAINTENANCE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String DEFAULT_WAIT_TIME \u003d \"1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final String DEFAULT_DIFFERENT_NAME \u003d \"Alice\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private Maintenance maintenance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private WaitTime waitingTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private Zone zone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private Name differentName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        maintenance \u003d new Maintenance(DEFAULT_MAINTENANCE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        waitingTime \u003d new WaitTime(DEFAULT_WAIT_TIME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        zone \u003d new Zone(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        differentName \u003d new Name(DEFAULT_DIFFERENT_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Initializes the RideBuilder with the data of {@code rideToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideBuilder(Ride rideToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        name \u003d rideToCopy.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        maintenance \u003d rideToCopy.getDaysSinceMaintenance();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        waitingTime \u003d rideToCopy.getWaitingTime();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        zone \u003d rideToCopy.getZone();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(rideToCopy.getTags());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Sets the {@code Name} of the {@code Ride} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Ride} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Sets the {@code Zone} of the {@code Ride} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        this.zone \u003d new Zone(address);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Sets the {@code Maintenance} of the {@code Ride} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideBuilder withMaintenance(String daysSinceLastMaintenanceString) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.maintenance \u003d new Maintenance(daysSinceLastMaintenanceString);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Sets the {@code WaitTime} of the {@code Ride} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideBuilder withWaitTime(String waitingTime) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.waitingTime \u003d new WaitTime(waitingTime);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public Ride build() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new Ride(name, maintenance, waitingTime, zone, tags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public Ride buildDifferent() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new Ride(differentName, maintenance, waitingTime, zone, tags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 22,
      "YuPeiHenry": 27,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/testutil/RideUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_MAINTENANCE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_WAITING_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_ZONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.logic.commands.UpdateCommand.UpdateRideDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * A utility class for Ride."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "public class RideUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns an add command string for adding the {@code ride}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static String getAddCommand(Ride ride) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getRideDetails(ride);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns the part of command string for the given {@code ride}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static String getRideDetails(Ride ride) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        sb.append(PREFIX_NAME + ride.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        sb.append(PREFIX_MAINTENANCE + String.valueOf(ride.getDaysSinceMaintenance().getValue()) + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        sb.append(PREFIX_WAITING_TIME + String.valueOf(ride.getWaitingTime().getValue()) + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        sb.append(PREFIX_ZONE + ride.getZone().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ride.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * Returns the part of command string for the given {@code UpdateRideDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static String getEditRideDescriptorDetails(UpdateRideDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        descriptor.getMaintenance().ifPresent("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            phone -\u003e sb.append(PREFIX_MAINTENANCE).append(phone.getValue()).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        descriptor.getWaitTime().ifPresent("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            waitTime-\u003e sb.append(PREFIX_WAITING_TIME).append(waitTime.getValue()).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        descriptor.getZone().ifPresent(address -\u003e sb.append(PREFIX_ZONE).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 9,
      "YuPeiHenry": 18,
      "leongengsea": 2,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/testutil/SerializableTestClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns the middle index of the ride in the {@code model}\u0027s ride list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return Index.fromOneBased(model.getFilteredRideList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns the last index of the ride in the {@code model}\u0027s ride list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return Index.fromOneBased(model.getFilteredRideList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns the ride in the {@code model}\u0027s ride list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static Ride getRide(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return model.getFilteredRideList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 10,
      "YuPeiHenry": 1,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/testutil/ThaneParkBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ThanePark;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * A utility class to help with building ThanePark objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " *     {@code ThanePark ab \u003d new ThaneParkBuilder().withRide(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class ThaneParkBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private ThanePark thanePark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ThaneParkBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thanePark \u003d new ThanePark();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ThaneParkBuilder(ThanePark thanePark) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        this.thanePark \u003d thanePark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Adds a new {@code Ride} to the {@code ThanePark} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ThaneParkBuilder withRide(Ride ride) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        thanePark.addRide(ride);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public ThanePark build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return thanePark;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 34
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final Index INDEX_FIRST_RIDE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final Index INDEX_SECOND_RIDE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final Index INDEX_THIRD_RIDE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "YuPeiHenry": 3,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/testutil/TypicalRides.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_MAINTENANCE_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_MAINTENANCE_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_WAIT_TIME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_WAIT_TIME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_ZONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_ZONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ThanePark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * A utility class containing a list of {@code Ride} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class TypicalRides {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Ride ACCELERATOR \u003d new RideBuilder().withName(\"Accelerator\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withWaitTime(\"1\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            .withMaintenance(\"9\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            .withTags(\"rollerCoaster\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Ride BIG \u003d new RideBuilder().withName(\"The Big Thunder Mountain\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            .withWaitTime(\"16\").withMaintenance(\"31\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            .withTags(\"heightRestrictions\", \"rollerCoaster\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Ride CASTLE \u003d new RideBuilder().withName(\"Castle Carrousel\").withMaintenance(\"1\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withWaitTime(\"13\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Ride DUMBO \u003d new RideBuilder().withName(\"Dumbo The Flying Elephant\").withMaintenance("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            \"87\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            .withWaitTime(\"3\").withAddress(\"10th street\").withTags(\"rollerCoaster\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Ride ENCHANTED \u003d new RideBuilder().withName(\"Enchanted Airways\").withMaintenance(\"4\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withWaitTime(\"21\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Ride FANTASY \u003d new RideBuilder().withName(\"Final Fantasy\").withMaintenance(\"12\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withWaitTime(\"12\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Ride GALAXY \u003d new RideBuilder().withName(\"Galaxy Road\").withMaintenance(\"24\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withWaitTime(\"1\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Ride HAUNTED \u003d new RideBuilder().withName(\"The Haunted Mansion\").withMaintenance(\"21\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withWaitTime(\"19\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Ride IDA \u003d new RideBuilder().withName(\"Ida Mueller\").withMaintenance(\"31\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withWaitTime(\"13\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    // Manually added - Ride\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final Ride AMY \u003d new RideBuilder().withName(VALID_NAME_AMY).withMaintenance(VALID_MAINTENANCE_AMY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            .withWaitTime(VALID_WAIT_TIME_AMY).withAddress(VALID_ZONE_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static final Ride BOB \u003d new RideBuilder().withName(VALID_NAME_BOB).withMaintenance(VALID_MAINTENANCE_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            .withWaitTime(VALID_WAIT_TIME_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            .withAddress(VALID_ZONE_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final Ride RACHEL \u003d new RideBuilder().withName(\"R@chel\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            .withWaitTime(\"16\").withMaintenance(\"31\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            .withTags(\"heightRestrictions\", \"rollerCoaster\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static final String KEYWORD_MATCHING_THE \u003d \"The\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private TypicalRides() {} // prevents instantiation"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns an {@code ThanePark} with all the typical rides."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static ThanePark getTypicalThanePark() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ThanePark ab \u003d new ThanePark();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        for (Ride ride : getTypicalRides()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            ab.addRide(ride);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static List\u003cRide\u003e getTypicalRides() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ACCELERATOR, BIG, CASTLE, DUMBO, ENCHANTED, FANTASY, GALAXY));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 45,
      "YuPeiHenry": 11,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/testutil/UpdateRideDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.UpdateCommand.UpdateRideDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Maintenance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.WaitTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Zone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leongengsea"
        },
        "content": " * A utility class to help with building UpdateRideDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "public class UpdateRideDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    private UpdateRideDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public UpdateRideDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        descriptor \u003d new UpdateRideDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public UpdateRideDescriptorBuilder(UpdateRideDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        this.descriptor \u003d new UpdateRideDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * Returns an {@code UpdateRideDescriptor} with fields containing {@code ride}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public UpdateRideDescriptorBuilder(Ride ride) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        descriptor \u003d new UpdateRideDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        descriptor.setName(ride.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        descriptor.setMaintenance(ride.getDaysSinceMaintenance());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        descriptor.setWaitTime(ride.getWaitingTime());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        descriptor.setZone(ride.getZone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        descriptor.setTags(ride.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * Sets the {@code Name} of the {@code UpdateRideDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public UpdateRideDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * Sets the {@code Maintenance} of the {@code UpdateRideDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public UpdateRideDescriptorBuilder withMaintenance(String daysSinceMaintenanceString) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        descriptor.setMaintenance(new Maintenance(daysSinceMaintenanceString));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * Sets the {@code WaitTime} of the {@code UpdateRideDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public UpdateRideDescriptorBuilder withWaitTime(String waitTime) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        descriptor.setWaitTime(new WaitTime(waitTime));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Sets the {@code Zone} of the {@code UpdateRideDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public UpdateRideDescriptorBuilder withZone(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        descriptor.setZone(new Zone(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code UpdateRideDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public UpdateRideDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "    public UpdateRideDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 13,
      "jiajunteo": 1,
      "leongengsea": 18,
      "YuPeiHenry": 5,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.ACCELERATOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.events.ui.RidePanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.ui.browser.BrowserPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.ui.browser.HelpWindow;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private RidePanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        selectionChangedEventStub \u003d new RidePanelSelectionChangedEvent(ACCELERATOR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        URL expectedDefaultPageUrl \u003d HelpWindow.SHORT_HELP_FILE_PATH.filePathToUrl();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // associated web page of a ride"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        URL expectedRideUrl \u003d BrowserPanel.RIDE_PAGE_PATH.filePathToUrl();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedRideUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "YuPeiHenry": 8,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.LogicManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ViewAllCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ViewAllCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        String thirdCommand \u003d \"viewall\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 7,
      "jiajunteo": 1,
      "YuPeiHenry": 1,
      "-": 150
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * A GUI unit test class for ThanePark."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 5,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.ui.browser.HelpWindow.USER_GUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.ui.browser.HelpWindow;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        URL expectedHelpPage \u003d USER_GUIDE_FILE_PATH.filePathToUrl();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 3,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/ui/HistoryWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import guitests.guihandles.HistoryWindowHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.core.StorageFileCreatingClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.util.FilePathToUrl;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.ui.browser.HistoryWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class HistoryWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private HistoryWindow historyWindow;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private HistoryWindowHandle historyWindowHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private URL expectedHistoryPage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final String testFilePath \u003d StorageFileCreatingClass.getFilePathString(\"test.html\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        file \u003d new File(testFilePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert (file.createNewFile());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        final FilePathToUrl filePathToUrl \u003d new FilePathToUrl(testFilePath, true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        expectedHistoryPage \u003d filePathToUrl.filePathToUrl();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        guiRobot.interact(() -\u003e historyWindow \u003d new HistoryWindow());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        historyWindow.loadPage(filePathToUrl);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        FxToolkit.registerStage(historyWindow::getRoot);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        historyWindowHandle \u003d new HistoryWindowHandle(historyWindow.getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assert (file.delete());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedHistoryPage, historyWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void isShowing_historyWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        guiRobot.interact(historyWindow::show);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(historyWindow.isShowing());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void isShowing_historyWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(historyWindow.isShowing());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void focus_historyWindowNotFocused_focused() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        guiRobot.interact(historyWindow::show);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // Focus on another stage to remove focus from the historyWindow"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        });"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(historyWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        guiRobot.interact(historyWindow::focus);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(historyWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 90
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.LogicManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new Config(), new UserPrefs(), new LogicManager(new ModelManager()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(mainWindow.getRoot().getScene());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 8,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final NewResultAvailableEvent NEW_RESULT_EVENT_STUB \u003d new NewResultAvailableEvent(\"Stub\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(NEW_RESULT_EVENT_STUB);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(NEW_RESULT_EVENT_STUB.message, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 4,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/ui/RideCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.ui.testutil.GuiTestAssert.assertCardDisplaysRide;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import guitests.guihandles.RideCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.testutil.RideBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.ui.exceptions.AccessibilityException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class RideCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void display() throws AccessibilityException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride rideWithNoTags \u003d new RideBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        RideCard rideCard \u003d new RideCard(rideWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uiPartRule.setUiPart(rideCard);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCardDisplay(rideCard, rideWithNoTags, 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride rideWithTags \u003d new RideBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        rideCard \u003d new RideCard(rideWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uiPartRule.setUiPart(rideCard);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCardDisplay(rideCard, rideWithTags, 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void equals() throws AccessibilityException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride ride \u003d new RideBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        RideCard rideCard \u003d new RideCard(ride, 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // same ride, same index -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        RideCard copy \u003d new RideCard(ride, 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(rideCard.equals(copy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(rideCard.equals(rideCard));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(rideCard.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(rideCard.equals(0));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // different ride, same index -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride differentRide \u003d new RideBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(rideCard.equals(new RideCard(differentRide, 0)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // same ride, different index -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(rideCard.equals(new RideCard(ride, 1)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Asserts that {@code rideCard} displays the details of {@code expectedRide} correctly and matches"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertCardDisplay(RideCard rideCard, Ride expectedRide, int expectedId) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        RideCardHandle rideCardHandle \u003d new RideCardHandle(rideCard.getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", rideCardHandle.getId());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // verify ride details are displayed correctly"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCardDisplaysRide(expectedRide, rideCardHandle);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 43,
      "YuPeiHenry": 31
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/ui/RideListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.getTypicalRides;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.ui.testutil.GuiTestAssert.assertCardDisplaysRide;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import guitests.guihandles.RideCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import guitests.guihandles.RideListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.util.FileUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.storage.XmlSerializableThanePark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class RideListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final ObservableList\u003cRide\u003e TYPICAL_RIDES \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            FXCollections.observableList(getTypicalRides());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_RIDE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private RideListPanelHandle rideListPanelHandle;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        initUi(TYPICAL_RIDES);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_RIDES.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            rideListPanelHandle.navigateToCard(TYPICAL_RIDES.get(i));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            Ride expectedRide \u003d TYPICAL_RIDES.get(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            RideCardHandle actualCard \u003d rideListPanelHandle.getRideCardHandle(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertCardDisplaysRide(expectedRide, actualCard);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        initUi(TYPICAL_RIDES);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        RideCardHandle expectedRide \u003d rideListPanelHandle.getRideCardHandle(INDEX_SECOND_RIDE.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        RideCardHandle selectedRide \u003d rideListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCardEquals(expectedRide, selectedRide);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Verifies that creating and deleting large number of rides in {@code RideListPanel} requires lesser than"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ObservableList\u003cRide\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        }, \"Creation and deletion of ride cards exceeded time limit\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns a list of rides containing {@code rideCount} rides that is used to populate the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * {@code RideListPanel}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private ObservableList\u003cRide\u003e createBackingList(int rideCount) throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithRides(rideCount);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        XmlSerializableThanePark xmlThanePark \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableThanePark.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return FXCollections.observableArrayList(xmlThanePark.toModelType().getRideList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Returns a .xml file containing {@code rideCount} rides. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private Path createXmlFileWithRides(int rideCount) throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        builder.append(\"\u003cthanepark\u003e\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        for (int i \u003d 0; i \u003c rideCount; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            builder.append(\"\u003crides\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            builder.append(\"\u003czone\u003e000\u003c/zone\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            builder.append(\"\u003cdaysSinceMaintenanceString\u003e000\u003c/daysSinceMaintenanceString\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            builder.append(\"\u003cwaitingTimeString\u003e123\u003c/waitingTimeString\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            builder.append(\"\u003cthanepark\u003ea\u003c/thanepark\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            builder.append(\"\u003cstatusString\u003eOPEN\u003c/statusString\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keenlok"
        },
        "content": "            builder.append(\"\u003c/rides\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        builder.append(\"\u003c/thanepark\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Path manyRidesFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyRides.xml\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        FileUtil.createFile(manyRidesFile);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        FileUtil.writeToFile(manyRidesFile, builder.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        manyRidesFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return manyRidesFile;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Initializes {@code rideListPanelHandle} with a {@code RideListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code RideListPanel}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private void initUi(ObservableList\u003cRide\u003e backingList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        RideListPanel rideListPanel \u003d new RideListPanel(backingList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        uiPartRule.setUiPart(rideListPanel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        rideListPanelHandle \u003d new RideListPanelHandle(getChildNode(rideListPanel.getRoot(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                RideListPanelHandle.RIDE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 17,
      "YuPeiHenry": 46,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.model.ThaneParkChangedEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ThanePark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final ThaneParkChangedEvent EVENT_STUB \u003d new ThaneParkChangedEvent(new ThanePark());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // after thanepark book is updated"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 9,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/ui/TestFxmlObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/ui/UiPartTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 4,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/ui/testutil/EventsCollectorRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Sets up an {@code EventsCollector} and tears it down after each test."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsCollectorRule implements TestRule {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollector eventsCollector \u003d new EventsCollector();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * A class that collects events raised by other classes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public class EventsCollector {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        private List\u003cBaseEvent\u003e events \u003d new ArrayList\u003cBaseEvent\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        public EventsCollector() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * Collects any event raised by any class"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        @Subscribe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        public void collectEvent(BaseEvent event) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            events.add(event);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * Removes collected events from the collected list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        public void reset() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            events.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        public int getSize() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns the most recent event collected"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        public BaseEvent getMostRecent() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            if (events.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.get(events.size() - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if the collector did not receive any events"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isEmpty() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.isEmpty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import guitests.guihandles.RideCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import guitests.guihandles.RideListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static void assertCardEquals(RideCardHandle expectedCard, RideCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedCard.getStatusString(), actualCard.getStatusString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedCard.getInfo(), actualCard.getInfo());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedRide}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static void assertCardDisplaysRide(Ride expectedRide, RideCardHandle actualCard) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(expectedRide.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedRide.getStatus().name(), actualCard.getStatusString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedRide.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(expectedRide.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Asserts that the list in {@code rideListPanelHandle} displays the details of {@code rides} correctly and"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static void assertListMatching(RideListPanelHandle rideListPanelHandle, Ride... rides) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        for (int i \u003d 0; i \u003c rides.length; i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            rideListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            assertCardDisplaysRide(rides[i], rideListPanelHandle.getRideCardHandle(i));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Asserts that the list in {@code rideListPanelHandle} displays the details of {@code rides} correctly and"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static void assertListMatching(RideListPanelHandle rideListPanelHandle, List\u003cRide\u003e rides) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertListMatching(rideListPanelHandle, rides.toArray(new Ride[0]));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Asserts the size of the list in {@code rideListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static void assertListSize(RideListPanelHandle rideListPanelHandle, int size) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        int numberOfPeople \u003d rideListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6,
      "YuPeiHenry": 20,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/ui/testutil/StageRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package seedu.thanepark.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Properly sets up and tears down a JavaFx stage for our testing purposes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StageRule implements TestRule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() throws Throwable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() throws Throwable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/thanepark/ui/testutil/UiPartRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package seedu.thanepark.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartRule extends StageRule {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/BlueTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "YuPeiHenry": 3,
      "-": 26
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.INVALID_MAINTENANCE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.INVALID_WAIT_TIME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.INVALID_ZONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.MAINTENANCE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.MAINTENANCE_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_MAINTENANCE_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_MAINTENANCE_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_NAME_JESSIE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_NAME_SYMBOLS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_WAIT_TIME_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_WAIT_TIME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_ZONE_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_ZONE_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.WAIT_TIME_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.WAIT_TIME_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.ZONE_DESC_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.ZONE_DESC_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.ACCELERATOR;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.CASTLE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.HAUNTED;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.IDA;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.KEYWORD_MATCHING_THE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.Messages;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Maintenance;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.WaitTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Zone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.RideBuilder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.RideUtil;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class AddCommandSystemTest extends ThaneParkSystemTest {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: add a ride without tags to a non-empty thanepark book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride toAdd \u003d AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + MAINTENANCE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + WAIT_TIME_DESC_AMY + \"   \" + ZONE_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.addRide(toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: add a ride with all fields same as another ride in the thanepark book except name -\u003e added */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        toAdd \u003d new RideBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + MAINTENANCE_DESC_AMY + WAIT_TIME_DESC_AMY + ZONE_DESC_AMY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /* Case: add a ride with all fields same as another ride in the thanepark book except phone and waitTime"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        toAdd \u003d new RideBuilder(AMY).withName(\"Different\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withMaintenance(VALID_MAINTENANCE_BOB).withWaitTime(VALID_WAIT_TIME_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        command \u003d RideUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: add to empty thanepark book -\u003e added */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        deleteAllRides();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(ACCELERATOR);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: add a ride with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + MAINTENANCE_DESC_BOB + ZONE_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + TAG_DESC_HUSBAND + WAIT_TIME_DESC_BOB;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: add a ride, missing tags -\u003e added */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(HAUNTED);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: valid name with symbols -\u003e accepted */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        toAdd \u003d new RideBuilder(AMY).withName(VALID_NAME_JESSIE).withMaintenance(VALID_MAINTENANCE_AMY)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                .withAddress(VALID_ZONE_AMY).withWaitTime(VALID_WAIT_TIME_AMY).withTags().build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + VALID_NAME_SYMBOLS"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + MAINTENANCE_DESC_AMY + WAIT_TIME_DESC_AMY + ZONE_DESC_AMY;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: filters the ride list before adding -\u003e added */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRidesWithName(KEYWORD_MATCHING_THE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* ------------------------ Perform add operation while a ride card is selected --------------------------- */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: selects first card in the ride list, add a ride -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        selectRide(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(CASTLE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: add a duplicate ride -\u003e rejected */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        command \u003d RideUtil.getAddCommand(HAUNTED);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: add a duplicate ride except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        toAdd \u003d new RideBuilder(HAUNTED).withMaintenance(VALID_MAINTENANCE_BOB).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        command \u003d RideUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /* Case: add a duplicate ride except with different waitTime -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        toAdd \u003d new RideBuilder(HAUNTED).withWaitTime(VALID_WAIT_TIME_BOB).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        command \u003d RideUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: add a duplicate ride except with different thanepark -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        toAdd \u003d new RideBuilder(HAUNTED).withAddress(VALID_ZONE_BOB).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        command \u003d RideUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: add a duplicate ride except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        command \u003d RideUtil.getAddCommand(HAUNTED) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + MAINTENANCE_DESC_AMY + WAIT_TIME_DESC_AMY + ZONE_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + WAIT_TIME_DESC_AMY + ZONE_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /* Case: missing waitTime -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + MAINTENANCE_DESC_AMY + ZONE_DESC_AMY;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: missing thanepark -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + MAINTENANCE_DESC_AMY + WAIT_TIME_DESC_AMY;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        command \u003d \"adds \" + RideUtil.getRideDetails(toAdd);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + MAINTENANCE_DESC_AMY + WAIT_TIME_DESC_AMY + ZONE_DESC_AMY;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: invalid maintenance -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + INVALID_MAINTENANCE_DESC + WAIT_TIME_DESC_AMY + ZONE_DESC_AMY;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandFailure(command, Maintenance.MESSAGE_MAINTENANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /* Case: invalid waitTime -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + MAINTENANCE_DESC_AMY + INVALID_WAIT_TIME_DESC + ZONE_DESC_AMY;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandFailure(command, WaitTime.MESSAGE_WAIT_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: invalid zone -\u003e rejected */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + MAINTENANCE_DESC_AMY + WAIT_TIME_DESC_AMY + INVALID_ZONE_DESC;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandFailure(command, Zone.MESSAGE_ZONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + MAINTENANCE_DESC_AMY + WAIT_TIME_DESC_AMY + ZONE_DESC_AMY"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * 4. {@code Storage} and {@code RideListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private void assertCommandSuccess(Ride toAdd) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandSuccess(RideUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Ride)}. Executes {@code command}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Ride)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private void assertCommandSuccess(String command, Ride toAdd) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.addRide(toAdd);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Ride)} except asserts that"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * 2. {@code Storage} and {@code RideListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Ride)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * 4. {@code Storage} and {@code RideListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 103,
      "YuPeiHenry": 20,
      "leongengsea": 12,
      "-": 130
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.KEYWORD_MATCHING_THE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class ClearCommandSystemTest extends ThaneParkSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: clear non-empty thanepark book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: undo clearing thanepark book -\u003e original thanepark book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: redo clearing thanepark book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: selects first card in ride list and clears thanepark book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original thanepark book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        selectRide(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: filters the ride list before clearing -\u003e entire thanepark book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original thanepark book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRidesWithName(KEYWORD_MATCHING_THE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: clear empty thanepark book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 21,
      "YuPeiHenry": 2,
      "-": 78
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 56
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.DeleteCommand.MESSAGE_DELETE_RIDE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TestUtil.getRide;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.KEYWORD_MATCHING_THE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class DeleteCommandSystemTest extends ThaneParkSystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void delete() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: delete the first ride in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_RIDE.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride deletedRide \u003d removeRide(expectedModel, INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_RIDE_SUCCESS, deletedRide);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: delete the last ride in the list -\u003e deleted */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Index lastRideIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandSuccess(lastRideIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: undo deleting the last ride in the list -\u003e last ride restored */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: redo deleting the last ride in the list -\u003e last ride deleted again */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        removeRide(modelBeforeDeletingLast, lastRideIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: delete the middle ride in the list -\u003e deleted */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Index middleRideIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandSuccess(middleRideIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: filtered ride list, delete index within bounds of thanepark book and ride list -\u003e deleted */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRidesWithName(KEYWORD_MATCHING_THE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Index index \u003d INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredRideList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: filtered ride list, delete index within bounds of thanepark book but out of bounds of ride list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRidesWithName(KEYWORD_MATCHING_THE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        int invalidIndex \u003d getModel().getThanePark().getRideList().size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* --------------------- Performing delete operation while a ride card is selected ------------------------ */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: delete the selected ride -\u003e ride list panel selects the ride before the deleted ride */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showAllRides();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        selectRide(selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        deletedRide \u003d removeRide(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_RIDE_SUCCESS, deletedRide);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                getModel().getThanePark().getRideList().size() + 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Removes the {@code Ride} at the specified {@code index} in {@code model}\u0027s thanepark book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @return the removed ride"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private Ride removeRide(Model model, Index index) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride targetRide \u003d getRide(model, index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.deleteRide(targetRide);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return targetRide;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Deletes the ride at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) throws IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride deletedRide \u003d removeRide(expectedModel, toDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_RIDE_SUCCESS, deletedRide);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see ThaneParkSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Index expectedSelectedCardIndex) throws IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 36,
      "YuPeiHenry": 24,
      "leongengsea": 5,
      "-": 131
    }
  },
  {
    "path": "src/test/java/systemtests/ErrorDialogGuiTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.EventsUtil.postLater;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.AlertDialogHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class ErrorDialogGuiTest extends ThaneParkSystemTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showErrorDialogs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                alertDialog.getContentText());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6,
      "-": 29
    }
  },
  {
    "path": "src/test/java/systemtests/FilterCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "keenlok"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_RIDES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_MAINTENANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_WAITING_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.ACCELERATOR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.BIG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.DUMBO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.GALAXY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class FilterCommandSystemTest extends ThaneParkSystemTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final String LESS_THAN_TEN_STRING \u003d \" \u003c 10\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final String MORE_THAN_THIRTY_STRING \u003d \" \u003e 30\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final String MORE_THAN_EQUAL_TEN_STRING \u003d \" \u003e\u003d 10\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static final String LESS_THAN_EQUAL_THIRTY_STRING \u003d \" \u003c\u003d 30\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public void filter() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: filter multiple rides in thane park with a single waitTime condition, command with leading spaces and"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        trailing spaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "         * -\u003e 3 rides found"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "         */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String command \u003d \"    \" + FilterCommand.COMMAND_WORD + \" \" + PREFIX_WAITING_TIME + LESS_THAN_TEN_STRING + \"   \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ACCELERATOR, DUMBO, GALAXY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /* Case: repeat previous command where ride list is displaying the rides we are searching"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "         * -\u003e 3 rides found"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FilterCommand.COMMAND_WORD + \" \" + PREFIX_WAITING_TIME + LESS_THAN_TEN_STRING;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: Filter one ride with multiple conditions -\u003e 2 rides found */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FilterCommand.COMMAND_WORD + \" \" + PREFIX_WAITING_TIME + LESS_THAN_EQUAL_THIRTY_STRING + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + PREFIX_MAINTENANCE + MORE_THAN_THIRTY_STRING;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BIG, DUMBO);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: the arguments in filter has spaces -\u003e 2 rides found */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FilterCommand.COMMAND_WORD + \" \" + PREFIX_WAITING_TIME + \" \u003c \u003d 30 \" + PREFIX_MAINTENANCE + \"   \u003e   \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + \"30\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BIG, DUMBO);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: undo previous filter command -\u003e rejected */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: redo previous filter commant -\u003e rejected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find same rides in thane park after deleting 1 of them -\u003e 1 ride found */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(getModel().getThanePark().getRideList().contains(BIG));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FilterCommand.COMMAND_WORD + \" \" + PREFIX_WAITING_TIME + LESS_THAN_EQUAL_THIRTY_STRING + \" \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + PREFIX_MAINTENANCE + MORE_THAN_THIRTY_STRING;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DUMBO);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * box displays {@code Messages#MESSAGE_RIDES_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                MESSAGE_RIDES_LISTED_OVERVIEW, expectedModel.getFilteredRideList().size());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keenlok"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 115,
      "YuPeiHenry": 1
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_RIDES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_ZONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.ACCELERATOR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.BIG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.CASTLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.DUMBO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.KEYWORD_MATCHING_THE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class FindCommandSystemTest extends ThaneParkSystemTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find multiple rides in thane park, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "         * -\u003e 2 rides found"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_THE + \"   \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BIG, DUMBO); // names of BIG and DUMBO contains \"The\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: repeat previous find command where ride list is displaying the rides we are finding"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "         * -\u003e 2 rides found"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_THE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find ride where ride list is not displaying the ride we are finding -\u003e 1 ride found */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" CASTLE\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CASTLE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find multiple rides in thane park, 2 keywords -\u003e 2 rides found */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Big Elephant\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BIG, DUMBO);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find multiple rides in thane park, 2 keywords in reversed order -\u003e 2 rides found */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Dumbo Big\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find multiple rides in thane park, 2 keywords with 1 repeat -\u003e 2 rides found */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Dumbo Big Dumbo\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find multiple rides in thane park, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "         * -\u003e 2 rides found"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Dumbo Big NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find same rides in thane park after deleting 1 of them -\u003e 1 ride found */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(getModel().getThanePark().getRideList().contains(BIG));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_THE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DUMBO);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find ride in thane park, keyword is same as name but of different case -\u003e 1 ride found */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" tHe\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find ride in thane park, keyword is substring of name -\u003e 0 rides found */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" th\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find ride in thane park, name is substring of keyword -\u003e 0 rides found */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" their\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find ride not in thane park -\u003e 0 rides found */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find phone number of ride in thane park -\u003e 0 rides found */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DUMBO.getDaysSinceMaintenance().toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find thanepark of ride in thane park -\u003e 0 rides found */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DUMBO.getZone().value;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find thanepark of ride in thane park -\u003e 1 rides found */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_ZONE + DUMBO.getZone().value;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DUMBO);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find waiting time of ride in thane park -\u003e 0 rides found */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DUMBO.getWaitingTime().toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find tags of ride in thane park -\u003e 0 rides found */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DUMBO.getTags());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find tags of ride in thane park -\u003e 3 rides found */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_TAG + tags.get(0).tagName;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ACCELERATOR, DUMBO);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find while a ride is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showAllRides();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        selectRide(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(getRideListPanel().getHandleToSelectedCard().getName().equals(DUMBO.getName().fullName));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Dumbo\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DUMBO);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: find ride in empty thane park -\u003e 0 rides found */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        deleteAllRides();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_THE;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DUMBO);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * box displays {@code Messages#MESSAGE_RIDES_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                MESSAGE_RIDES_LISTED_OVERVIEW, expectedModel.getFilteredRideList().size());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 79,
      "YuPeiHenry": 4,
      "-": 129
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.ui.browser.HelpWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class HelpCommandSystemTest extends ThaneParkSystemTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void openHelpWindow() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        getRideListPanel().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD + \" more\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD + \" more\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RIDE.getOneBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertNotEquals(HelpWindow.SHORT_HELP_FILE_PATH.filePathToUrl(), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertListMatching(getRideListPanel(), getModel().getFilteredRideList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RIDE.getOneBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void openHelpSummary() throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //already open on startup"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertShortHelpDisplayed();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //select something"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RIDE.getOneBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertShortHelpNotDisplayed();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertShortHelpDisplayed();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void openHelpWindowAtCommand() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD + \" add\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD + \" delete\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD + \" asdgf\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD + \" more\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the short help"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @see BrowserPanelHandle#isHelpUrl()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertShortHelpDisplayed() throws IOException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(getMainWindowHandle().getBrowserPanel().isHelpUrl());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Asserts that the browser\u0027s url is not displaying the short help"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @see BrowserPanelHandle#isHelpUrl()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertShortHelpNotDisplayed() throws IOException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(getMainWindowHandle().getBrowserPanel().isHelpUrl());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 7,
      "YuPeiHenry": 57,
      "-": 90
    }
  },
  {
    "path": "src/test/java/systemtests/HistoryCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HistoryWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * A system test class for the history window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class HistoryCommandSystemTest extends ThaneParkSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void openHistoryWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HistoryCommand.COMMAND_WORD + \" more\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertHistoryWindowOpen();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // open history window and give it focus"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HistoryCommand.COMMAND_WORD + \" more\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // assert that while the history window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RIDE.getOneBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertNotEquals(HistoryCommand.MESSAGE_HISTORY_WINDOW, getResultDisplay().getText());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertListMatching(getRideListPanel(), getModel().getFilteredRideList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // assert that the status bar too is updated correctly while the history window is open"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RIDE.getOneBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void history_multipleCommands_onlyOneHistoryWindowOpen() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HistoryCommand.COMMAND_WORD + \" more\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(HistoryCommand.COMMAND_WORD + \" more\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HistoryWindowHandle.HISTORY_WINDOW_TITLE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Asserts that the history window is open, and closes it after checking."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertHistoryWindowOpen() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HistoryWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new HistoryWindowHandle(guiRobot.getStage(HistoryWindowHandle.HISTORY_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Asserts that the history window isn\u0027t open."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertHistoryWindowNotOpen() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HistoryWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 6,
      "YuPeiHenry": 65,
      "-": 11
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private static final Predicate\u003cRide\u003e PREDICATE_MATCHING_NO_RIDES \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cRide\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Optional\u003cPredicate\u003cRide\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        model.updateFilteredRideList(predicate.orElse(PREDICATE_MATCHING_NO_RIDES));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    public static void setFilteredList(Model model, Ride... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Ride} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private static Predicate\u003cRide\u003e getPredicateMatching(Ride other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return ride -\u003e ride.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 7,
      "YuPeiHenry": 3,
      "-": 29
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ThanePark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class SampleDataTest extends ThaneParkSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    protected ThanePark getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void thanePark_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride[] expectedList \u003d SampleDataUtil.getSampleRides();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertListMatching(getRideListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 8,
      "YuPeiHenry": 2,
      "-": 41
    }
  },
  {
    "path": "src/test/java/systemtests/SuggestCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.SuggestCommand.MESSAGE_SUGGEST_COMMAND_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " * Contains system tests for {@code SuggestCommand}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class SuggestCommandSystemTest extends ThaneParkSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void suggestCommand() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"a\", \"add\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"c\", \"clear\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"d\", \"delete\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"e\", \"exit\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"f\", \"find\", \"filter\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"h\", \"help\", \"history\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"m\", \"maintain\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"o\", \"open\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"r\", \"redo\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"s\", \"shutdown\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"u\", \"update\", \"undo\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertSuggestCommandSuccessBehavior(\"v\", \"viewall\", \"viewstatus\", \"view\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"b\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"g\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"i\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"j\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"k\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"l\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"p\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"q\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"t\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"w\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"x\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"y\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertSuggestCommandFailureBehavior(\"z\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * The commandResult of pressing tab is tested by SuggestCommandTest"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void handleKeyPress_tab() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //TODO: Assert that commands are valid or invalid"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Check that tab does not do anything on an invalid command"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTabBehavior(\"fail\", \"fail\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Check that tab does not execute commands"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTabBehavior(\"help\", \"help\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Check that tab does complete commands"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTabBehavior(\"dele\", \"delete\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Check that tab does not complete when there are multiple commands"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTabBehavior(\"h\", \"h\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Performs UI visible verification of suggest command behavior resulting in 1 or more suggested commands."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Logic tests are done by SuggestCommandTest"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see seedu.thanepark.logic.commands.SuggestCommandTest"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertSuggestCommandSuccessBehavior(String command, String... commandWords) throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_SUGGEST_COMMAND_SUCCESS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                SuggestCommand.combineCommandWords(commandWords));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String expectedCommandBoxText;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        if (commandWords.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            expectedCommandBoxText \u003d commandWords[0];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else if (commandWords.length \u003e 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            expectedCommandBoxText \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            throw new Exception(\"Wrong use of assertCommandSuccess!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertApplicationDisplaysExpected(expectedCommandBoxText, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Performs UI visible verification of suggest command behavior resulting in no suggested commands."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Logic tests are done by SuggestCommandTest"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see seedu.thanepark.logic.commands.SuggestCommandTest"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertSuggestCommandFailureBehavior(String command) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String expectedResultMessage \u003d MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String expectedCommandBoxText \u003d command;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertApplicationDisplaysExpected(expectedCommandBoxText, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Checks the behavior of tab inside the commandBox"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertTabBehavior(String input, String expectedCommandBoxText) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        getCommandBox().setText(input);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        getCommandBox().pressTab();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedCommandBoxText, getCommandBox().getInput());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertTrue(getCommandBox().isFocused());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 8,
      "jiajunteo": 3,
      "YuPeiHenry": 99,
      "leongengsea": 4,
      "-": 1
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.TestApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ReadOnlyThanePark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyThanePark\u003e thanePark, Path saveFileLocation) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(thanePark, saveFileLocation));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 3,
      "YuPeiHenry": 2,
      "-": 70
    }
  },
  {
    "path": "src/test/java/systemtests/ThaneParkSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import guitests.guihandles.RideListPanelHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.TestApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ViewAllCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ThanePark;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.TypicalRides;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.ui.CommandBox;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.ui.browser.BrowserPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import seedu.thanepark.ui.browser.HelpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": " *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": " * A system test class for ThanePark, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public abstract class ThaneParkSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    protected ThanePark getInitialData() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        return TypicalRides.getTypicalThanePark();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public RideListPanelHandle getRideListPanel() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return mainWindowHandle.getRideListPanel();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Displays all rides in the thanepark book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected void showAllRides() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ViewAllCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(getModel().getThanePark().getRideList().size(), getModel().getFilteredRideList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Displays all rides with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected void showRidesWithName(String keyword) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(getModel().getFilteredRideList().size() \u003c getModel().getThanePark().getRideList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Selects the ride at {@code index} of the displayed list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected void selectRide(Index index) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ViewCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(index.getZeroBased(), getRideListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Deletes all rides in the thanepark book."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected void deleteAllRides() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertEquals(0, getModel().getThanePark().getRideList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same ride objects as {@code expectedModel}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * and the ride list panel displays the rides in the model correctly."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(new ThanePark(expectedModel.getThanePark()), testApp.readStorageThanePark());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertListMatching(getRideListPanel(), expectedModel.getFilteredRideList());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code RideListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        getRideListPanel().rememberSelectedRideCard();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * of the previously selected ride."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(getRideListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the ride in the ride list panel at"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @see RideListPanelHandle#isSelectedRideCardChanged()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) throws IOException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        getRideListPanel().navigateToCard(getRideListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //TODO: Check that the ride information displays the correct name"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String selectedCardName \u003d getRideListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        URL expectedUrl \u003d BrowserPanel.RIDE_PAGE_PATH.filePathToUrl();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getRideListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the ride list panel remain unchanged."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * @see RideListPanelHandle#isSelectedRideCardChanged()"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertFalse(getRideListPanel().isSelectedRideCardChanged());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() throws IOException {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertListMatching(getRideListPanel(), getModel().getFilteredRideList());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertEquals(HelpWindow.SHORT_HELP_FILE_PATH.filePathToUrl(), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 26,
      "YuPeiHenry": 34,
      "-": 228
    }
  },
  {
    "path": "src/test/java/systemtests/UpdateCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.INVALID_MAINTENANCE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.INVALID_WAIT_TIME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.INVALID_ZONE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.MAINTENANCE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.MAINTENANCE_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_MAINTENANCE_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.VALID_WAIT_TIME_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.WAIT_TIME_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.WAIT_TIME_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.ZONE_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.commands.CommandTestUtil.ZONE_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.model.Model.PREDICATE_SHOW_ALL_RIDES;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.KEYWORD_MATCHING_THE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.Messages;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Maintenance;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.WaitTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.ride.Zone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.tag.Tag;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.RideBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.testutil.RideUtil;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class UpdateCommandSystemTest extends ThaneParkSystemTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void update() throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Index index \u003d INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        String command \u003d \" \" + UpdateCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + MAINTENANCE_DESC_BOB + \" \" + WAIT_TIME_DESC_BOB + \"  \" + ZONE_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Ride editedRide \u003d new RideBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, index, editedRide);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: undo editing the last ride in the list -\u003e last ride restored */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: redo editing the last ride in the list -\u003e last ride edited again */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        model.updateRide("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                getModel().getFilteredRideList().get(INDEX_FIRST_RIDE.getZeroBased()), editedRide);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: edit a ride with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + NAME_DESC_BOB + MAINTENANCE_DESC_BOB + WAIT_TIME_DESC_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + ZONE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: edit a ride with new values same as another ride\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(getModel().getThanePark().getRideList().contains(BOB));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        index \u003d INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertNotEquals(getModel().getFilteredRideList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + NAME_DESC_AMY + MAINTENANCE_DESC_BOB + WAIT_TIME_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + ZONE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        editedRide \u003d new RideBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, index, editedRide);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /* Case: edit a ride with new values same as another ride\u0027s values but with different phone and waitTime"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        index \u003d INDEX_SECOND_RIDE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String editedName \u003d \"Different\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + \" \" + PREFIX_NAME + editedName + MAINTENANCE_DESC_AMY + WAIT_TIME_DESC_AMY"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + ZONE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        editedRide \u003d new RideBuilder(BOB).withName(editedName)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .withMaintenance(VALID_MAINTENANCE_AMY).withWaitTime(VALID_WAIT_TIME_AMY).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, index, editedRide);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        index \u003d INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        Ride rideToEdit \u003d getModel().getFilteredRideList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        editedRide \u003d new RideBuilder(rideToEdit).withTags().build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, index, editedRide);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: filtered ride list, edit index within bounds of thanepark book and ride list -\u003e edited */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRidesWithName(KEYWORD_MATCHING_THE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        index \u003d INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        editedName \u003d \"Another name\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredRideList().size());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_NAME + editedName;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        rideToEdit \u003d getModel().getFilteredRideList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        editedRide \u003d new RideBuilder(rideToEdit).withName(editedName).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, index, editedRide);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: filtered ride list, edit index within bounds of thanepark book but out of bounds of ride list"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRidesWithName(KEYWORD_MATCHING_THE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        int invalidIndex \u003d getModel().getThanePark().getRideList().size();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* --------------------- Performing edit operation while a ride card is selected -------------------------- */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: selects first card in the ride list, edit a ride -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showAllRides();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        index \u003d INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        selectRide(index);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + NAME_DESC_AMY + MAINTENANCE_DESC_AMY + WAIT_TIME_DESC_AMY"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + ZONE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        // browser\u0027s url is updated to reflect the new ride\u0027s name"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredRideList().size() + 1;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RIDE.getOneBased(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                UpdateCommand.MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        + INDEX_FIRST_RIDE.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "keenlok"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: invalid maintenance -\u003e rejected */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        + INDEX_FIRST_RIDE.getOneBased() + INVALID_MAINTENANCE_DESC,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Maintenance.MESSAGE_MAINTENANCE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: invalid wait time -\u003e rejected */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        + INDEX_FIRST_RIDE.getOneBased() + INVALID_WAIT_TIME_DESC,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                WaitTime.MESSAGE_WAIT_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: invalid zone -\u003e rejected */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        + INDEX_FIRST_RIDE.getOneBased() + INVALID_ZONE_DESC,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                Zone.MESSAGE_ZONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        + INDEX_FIRST_RIDE.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: edit a ride with new values same as another ride\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        executeCommand(RideUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(getModel().getThanePark().getRideList().contains(BOB));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        index \u003d INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertFalse(getModel().getFilteredRideList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + NAME_DESC_BOB + MAINTENANCE_DESC_BOB + WAIT_TIME_DESC_BOB"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + ZONE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(command, UpdateCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: edit a ride with new values same as another ride\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + NAME_DESC_BOB + MAINTENANCE_DESC_BOB + WAIT_TIME_DESC_BOB"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + ZONE_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(command, UpdateCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: edit a ride with new values same as another ride\u0027s values but with different thanepark -\u003e rejected */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + NAME_DESC_BOB + MAINTENANCE_DESC_BOB + WAIT_TIME_DESC_BOB"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + ZONE_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(command, UpdateCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: edit a ride with new values same as another ride\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + NAME_DESC_BOB + MAINTENANCE_DESC_AMY + WAIT_TIME_DESC_BOB"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + ZONE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(command, UpdateCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /* Case: edit a ride with new values same as another ride\u0027s values but with different waitTime -\u003e rejected */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + NAME_DESC_BOB + MAINTENANCE_DESC_BOB + WAIT_TIME_DESC_AMY"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "keenlok"
        },
        "content": "                + ZONE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "        assertCommandFailure(command, UpdateCommand.MESSAGE_DUPLICATE_RIDE);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Ride, Index)} except that"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * @see UpdateCommandSystemTest#assertCommandSuccess(String, Index, Ride, Index)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Ride editedRide) throws IOException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedRide, null);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the ride at index {@code toEdit} being"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * updated to values specified {@code editedRide}.\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * @see UpdateCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "keenlok"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Ride editedRide,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Index expectedSelectedCardIndex) throws IOException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        expectedModel.updateRide(expectedModel.getFilteredRideList().get(toEdit.getZeroBased()), editedRide);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredRideList(PREDICATE_SHOW_ALL_RIDES);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                String.format(UpdateCommand.MESSAGE_UPDATE_RIDE_SUCCESS, editedRide), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "     * @see UpdateCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see ThaneParkSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Index expectedSelectedCardIndex) throws IOException {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredRideList(PREDICATE_SHOW_ALL_RIDES);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 108,
      "YuPeiHenry": 39,
      "leongengsea": 37,
      "-": 135
    }
  },
  {
    "path": "src/test/java/systemtests/ViewCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_RIDE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.logic.commands.ViewCommand.MESSAGE_SELECT_RIDE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import static seedu.thanepark.testutil.TypicalIndexes.INDEX_FIRST_RIDE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.testutil.TypicalRides.KEYWORD_MATCHING_THE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import seedu.thanepark.model.ride.Ride;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class ViewCommandSystemTest extends ThaneParkSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public void select() throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: select the first card in the ride list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        String command \u003d \"   \" + ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RIDE.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_RIDE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: select the last card in the ride list -\u003e selected */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Index rideCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        command \u003d ViewCommand.COMMAND_WORD + \" \" + rideCount.getOneBased();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandSuccess(command, rideCount);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: select the middle card in the ride list -\u003e selected */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d ViewCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: filtered ride list, select index within bounds of thanepark book but out of bounds of ride list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        showRidesWithName(KEYWORD_MATCHING_THE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        int invalidIndex \u003d getModel().getThanePark().getRideList().size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: filtered ride list, select index within bounds of thanepark book and ride list -\u003e selected */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredRideList().size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d ViewCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredRideList().size() + 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(ViewCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(ViewCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"VieW 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "keenlok"
        },
        "content": "        /* Case: select from empty thanepark book -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        deleteAllRides();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        assertCommandFailure(ViewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RIDE.getOneBased(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leongengsea"
        },
        "content": "                MESSAGE_INVALID_RIDE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected ride.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * 4. {@code Storage} and {@code RideListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see ThaneParkSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        Ride expectedRide \u003d expectedModel.getFilteredRideList().get(expectedSelectedCardIndex.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        String expectedName \u003d expectedRide.getName().fullName;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                MESSAGE_SELECT_RIDE_SUCCESS, expectedName, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getRideListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "     * 4. {@code Storage} and {@code RideListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 27,
      "jiajunteo": 3,
      "YuPeiHenry": 18,
      "leongengsea": 1,
      "-": 111
    }
  },
  {
    "path": "src/test/java/systemtests/ViewStatusCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_RIDES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import static seedu.thanepark.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.logic.commands.ViewStatusCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "keenlok"
        },
        "content": "import seedu.thanepark.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "keenlok"
        },
        "content": "public class ViewStatusCommandSystemTest extends ThaneParkSystemTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    public void viewStatus() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        String command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        String invalid \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewStatusCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        /* Case:  lower case command word, mixed case argument -\u003e success */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        command \u003d \"viewstatus oPen\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertCommandSuccess(command, getModel());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        /* Case: multiple arguments -\u003e rejected */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        command \u003d \"viewstatus maintenance open\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertCommandFailure(command, invalid);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        command \u003d \"VieWsTaTus open\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * box displays {@code Messages#MESSAGE_RIDES_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "                MESSAGE_RIDES_LISTED_OVERVIEW, expectedModel.getFilteredRideList().size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * {@code ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "keenlok"
        },
        "content": "     * @see ThaneParkSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiajunteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "keenlok": 10,
      "jiajunteo": 59
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c?import seedu.thanepark.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003c?import seedu.thanepark.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "keenlok"
        },
        "content": "\u003cfx:root type\u003d\"seedu.thanepark.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "keenlok": 2,
      "-": 5
    }
  }
]
