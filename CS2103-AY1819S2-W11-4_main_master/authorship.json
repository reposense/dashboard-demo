[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d BookSquirrel"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "https://travis-ci.org/cs2103-ay1819s2-w11-4/main[image:https://travis-ci.org/cs2103-ay1819s2-w11-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "https://coveralls.io/github/cs2103-ay1819s2-w11-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/cs2103-ay1819s2-w11-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "https://app.codacy.com/project/0blivious/main/dashboard[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* BookSquirrel is a desktop app for the user to take notes when reading book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* It can be used to record books read, give tags and ratings to books, and record book reviews."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* More importantly, BookSquirrel is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* Want to capture idea and inspirations from reading books? Jump to the \u003c\u003cUserGuide#, User Guide\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* This application is developed from the codebase of https://github.com/se-edu/addressbook-level4[AddressBook-level 4]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 7,
      "-": 24,
      "0blivious": 2
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "      \"githubId\": \"Jiangqinhua\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "      \"displayName\": \"JIA...HUA\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "      \"authorNames\": [\"Jiangqinhua\", \"jiangqinhua\", \"jiang\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "      \"githubId\": \"0blivious\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "      \"displayName\": \"LIU...WEN\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "      \"authorNames\": [\"0blivious\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "      \"githubId\": \"EleenYang\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "      \"displayName\": \"YAN...HAN\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "      \"authorNames\": [\"EleenYang\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "      \"githubId\": \"Miaaaaa97\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "      \"displayName\": \"ZHA...EZE\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "      \"authorNames\": [\"Miaaaaa97\", \"tieze zhang\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 1,
      "Jiangqinhua": 24
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    archiveName \u003d \u0027bookSquirrel.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        \u0027site-name\u0027: \u0027Book-Squirrel\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/cs2103-ay1819s2-w11-4/main\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 234,
      "0blivious": 3
    }
  },
  {
    "path": "config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "  \"logLevel\" : \"INFO\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "  \"userPrefsFilePath\" : \"preferences.json\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 4
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Book Squirrel is developed by the https://github.com/cs2103-ay1819s2-w11-4.html[cs2103-ay1819s2-w11-4] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "_{The original codebase, AddressBook 4, was developed by the se-edu team.}_ +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d Liu Yiwen"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "image::0blivious.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "{empty}[https://github.com/0blivious[github]] [\u003c\u003c0blivious#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d Jiang Qinhua"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "image::jiangqinhua.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "{empty}[https://github.com/jiangqinhua[github]] [\u003c\u003cjiangqinhua#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d Yang Sihan"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "image::eleenyang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "{empty}[https://github.com/eleenyang[github]] [\u003c\u003celeenyang#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d Zhang Tieze"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "image::miaaaaa97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "{empty}[https://github.com/miaaaaa97[github]] [\u003c\u003cmiaaaaa97#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 16,
      "EleenYang": 2,
      "-": 26,
      "0blivious": 1
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/cs2103-ay1819s2-w11-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* *Email us* : You can also reach us at tieze.zhang@u.nus.edu"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 1,
      "Jiangqinhua": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d BookSquirrel - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w11-4/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "By: `Team W11-4`      Since: `Jun 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "BookSquirrel is for those who *want to keep a record of books they\u0027ve read*. More importantly, BookSquirrel is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, BookSquirrel can get your management of books done faster than traditional GUI apps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "IntelliJ by default has Gradle and JavaFX plugins installed. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "This will generate all the resources required by the application and tests."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `cs2103-ay1819s2-w11-4/main` repo."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `cs2103-ay1819s2-w11-4/main`), you should do the following:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".Component interactions for `deleteBook 1` command"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "image::SDforDeleteBook.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "//tag::uidiagram[]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "//end::uidiagram[]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `BookListPanel`, `ReviewListPanel`, `StatusBarFooter`, `ReviewBrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".  `Logic` uses the `BookShelfParser` class to parse the user command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a book)."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "//tag::logicdiagram[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"deleteBook 1\")` API call."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".Interactions Inside the Logic Component for the `deleteBook 1` Command"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "image::DeleteBookSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "//end::logicdiagram[]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "//tag::modeldiagram[]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "//end::modeldiagram[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* stores the BookShelf data."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cBook\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `BookShelf`, which `Book` can reference. This would allow `BookShelf` to only require one `Tag` object per unique `Tag`, instead of each `Book` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "// tag::storage[]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* can save `UserPref` objects in JSON format and read it back."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* can save the BookShelf data in JSON format and read it back."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* both the data of books and reviews will be saved."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* users are not supposed to touch the data file (the file inside the `data` folder) directly. If the user insists on doing so, the data might be corrupted."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* users are not supposed to add data files into the app manually. If the user accidentally corrupts the data file, he or she may have to reinstall the app and all data will get lost."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* developers can edit the data file for the purpose of testing."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "// end::storage[]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "// tag::sortBook[]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "\u003d\u003d\u003d SortBook feature"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "The sortBook mechanism is facilitated by `VersionedBookShelf`."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "It extends `BookShelf` with the sort function which will sort the `UniqueBookList`. `UniqueBookList` implemented the BookList as `ObservableList\u003cBook\u003e`. sortBook command sort the booklist in specify order by implementing the `Comparator\u003cBook\u003e`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Additionally, it uses/implements the following operations:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* `VersionedBookShelf#sort()` -- It calls `UniqueBookList` sortBooks function and notifies the listeners."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* `BookShelf#indicateModified()` -- Notifies listeners that the bookshelf has been modified."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* `UniqueBookList#sortBooks()` -- Implement the comparator, call `ObservableList\u003cBook\u003e` and pass in the comparator."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* `ObservableList\u003cBook\u003e#sort()` -- sort the internalList is specify order."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Given below is an example usage scenario and how the sortBook mechanism behaves at each step."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedBookShelf` will be initialized with the initial bookshelf state, and the `currentStatePointer` pointing to that single bookshelf state."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Step 2. The user executes `sortBook st/rating` command to sort all the books in the bookshelf in ascending order. The command will be pass to SortBookCommand Parser to convert it to SortBook command, the parser will check the correctness of the command. If the command is in an incorrect format, the parser will show correct command instruction to the user, otherwise, the parser will call the constructor of SortBook command."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Step 3. `SortBookCommand#execute` will be call, it will check whether the Bookshelf is empty before proceed to call `ModelManager#sort()`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "If the Bookshelf is empty, CommandException(MESSAGE_BOOK_LIST_EMPTY) will be thrown."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Step 4. If everything is correct, `VersionedBookShelf#sort()` will be called. It will execute `UniqueBookList#sortBooks` and `BookShelf#indicateModified` will be called after the list is been sorted to notify the listener that display data has been modified."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Step 5. `ObservableList\u003cBook\u003e` was implemented in `UniqueBookList` as internal list. `UniqueBookList#sortBooks` will call `ObservableList\u003cBook\u003e#sort` to sort the internal list by providing custom Comparator."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Step 6. ` model#commitBookShelf()` will be executed to store the current Bookshelf into `List\u003cReadOnlyBookShelf\u003e` for support undo/redo command after the list is sorted and notify the listener."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Sorting algorithm implemented."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* **Alternative 1 (current choice):** Sorts using library sorting method."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** Pros: Easy to implement, easy to maintain."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** Cons: The sorting method is too general, can have a better sorting algorithm."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* **Alternative 2:** Using custom sorting method."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** Pros: more custom, may improve performance."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** Cons: hard to maintain and easy to produce bugs."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the sort commands"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* **Alternative 1 (current choice):** Sorts with the complete list."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** Pros: Easy to implement, as the list coming with sort function."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** Cons: May have performance issues in terms of speed, as we need to sort the whole list."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* **Alternative 2:** Sorts with sub-list that available to the user."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** Pros: It is faster than the first choice as we only need to sort a partial list."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** Cons: The sub-list is not supported sort function, it\u0027s hard and time consumed to manipulate sorting and put it back to sub-list."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "// end::sortBook[]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedBookShelf`."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "It extends `BookShelf` with an undo/redo history, stored internally as a `BookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* `VersionedBookShelf#commit()` -- Saves the current bookshelf state in its history."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* `VersionedBookShelf#undo()` -- Restores the previous bookshelf state from its history."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* `VersionedBookShelf#redo()` -- Restores a previously undone bookshelf state from its history."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitBookShelf()`, `Model#undoBookShelf()` and `Model#redoBookShelf()` respectively."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedBookShelf` will be initialized with the initial bookshelf state, and the `currentStatePointer` pointing to that single bookshelf state."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Step 2. The user executes `deleteBook 1` command to delete the first book in the bookshelf. The `deleteBook` command calls `Model#commitBookShelf()`, causing the modified state of the Bookshelf after the `deleteBook 1` command executes to be saved in the `BookShelfStateList`, and the `currentStatePointer` is shifted to the newly inserted Bookshelf state."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 3. The user executes `addBook n/David ...` to add a new book. The `addBook` command also calls `Model#commitBookShelf()`, causing another modified address book state to be saved into the `BookShelfStateList`."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "If a command fails its execution, it will not call `Model#commitBookShelf()`, so the bookshelf state will not be saved into the `BookShelfStateList`."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 4. The user now decides that adding the book was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoBookShelf()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous bookshelf state, and restores the bookshelf to that state."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial bookshelf state, then there are no previous bookshelf states to restore. The `undo` command uses `Model#canundoBookShelf()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "The following sequence diagram shows how to undo operation works:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoBookShelf()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the bookshelf to that state."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "If the `currentStatePointer` is at index `BookShelfStateList.size() - 1`, pointing to the latest Bookshelf state, then there are no undone bookshelf states to restore. The `redo` command uses `Model#canredoBookShelf()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Step 5. The user then decides to execute the command `listBook`. Commands that do not modify the Bookshelf, such as `listBook`, will usually not call `Model#commitBookShelf()`, `Model#undoBookShelf()` or `Model#redoBookShelf()`. Thus, the `BookShelfStateList` remains unchanged."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitBookShelf()`. Since the `currentStatePointer` is not pointing at the end of the `BookShelfStateList`, all bookshelf states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `addBook n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire Bookshelf."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Pros: Will use less memory (e.g. for `deleteBook`, just save the book being deleted)."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command is correct."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of Bookshelf states."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedBookShelf`."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "0blivious"
        },
        "content": "// tag::book[]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d AddBook feature"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "0blivious"
        },
        "content": "The addBook mechanism is facilitated by `BookShelf`."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "0blivious"
        },
        "content": "It contains `UniqueBookList` in which all the book data are stored and duplicates are not allowed. Books with same book name are considered as duplicates."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Additionally, it uses the following operations from `BookShelf`:"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* `model#hasBook()` -- Check if the book already exists in the Bookshelf."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* `model#addBook()` -- To add the new book into Bookshelf."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* `model#commitBookShelf()` -- Saves the current Bookshelf state for undo/redo.."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "These operations are exposed to the `Model` interface."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Given below is an example usage scenario and how the addBook mechanism behaves at each step."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedBookShelf` will be initialized with the initial bookshelf state, and the `currentStatePointer` pointing to that single bookshelf state."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Step 2. The user executes `addBook n/Alice a/HR m/5 tag/fantasy` command to add the book called Alice, written by HR, with a rating of 5 and tag of fantasy in the Bookshelf. The `AddBookCommandParser` check if the command is in valid format."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "0blivious"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "0blivious"
        },
        "content": "If the command is not in valid format, ParseException(MESSAGE_INVALID_COMMAND_FORMAT) will be thrown. The book will not be added to the bookshelf."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Step 3. The `addBook` command calls `Model#hasBook()`, checking if the book already exists in the bookshelf."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "0blivious"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "If the book already exists, CommandException(MESSAGE_DUPLICATE_BOOK) will be thrown. It will not call `Model#commitBookShelf()`, so the bookshelf state will not be saved into the `BookShelfStateList`."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Step 4. The bookshelf now adds the book to the Bookshelf after making sure there are no duplicates, and calls Model#commitBookShelf(), causing the modified state of the Bookshelf after the `addBook` command executes to be saved in the BookShelfStateList"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "0blivious"
        },
        "content": "The Sequence Diagram below shows how the components interact with each other for the scenario where the user issues the command `addBook n/Alice a/HR m/5 tag/fantasy`."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "0blivious"
        },
        "content": "image::AddBookHighLevelSequenceDiagram.jpg[width\u003d\"800\"]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "0blivious"
        },
        "content": "The following activity diagram summarizes what happens when a user executes an AddBook command:"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "0blivious"
        },
        "content": "image::AddBookActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How duplicate of book is defined"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* **Alternative 1 (current choice):** Books with same book name are considered as duplicates."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** Pros: Easy to support other commands such as addReview which search for the book based on its name."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** Cons: User may encounter trouble if they read two books with the same name but written by different authors."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* **Alternative 2:** Books with multiple identical fields (eg. book name and author, book name and rating, etc) are considered as the same book."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** Pros: Able to store books with same but different in other fields."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** Cons: Causing trouble in executing other commands like addReview as more parameters must be provided to search for a certain book."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the addBook command"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire book as one object contains different fields such as author, rating, etc."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "0blivious"
        },
        "content": "** Pros: Easy to implement delete and other features that change an entire book."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "0blivious"
        },
        "content": "** Cons: Maybe more difficult to implement the summary feature which needs to obtain statistics of all separate fields stored in each book, eg. find the most popular author."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "0blivious"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "0blivious"
        },
        "content": "An example of the current model is given below. +"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "0blivious"
        },
        "content": " +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "0blivious"
        },
        "content": "image:BookModelComponentClassOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* **Alternative 2:** Store a Tag list and an Author List in BookShelf, which Book can reference."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "0blivious"
        },
        "content": "** Pros: Easier to obtain statistics regarding each component."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "0blivious"
        },
        "content": "** Cons: It is harder to manage book object as we need to find a way to connect all components together."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "0blivious"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "0blivious"
        },
        "content": "An example of the alternative model is given below. +"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "0blivious"
        },
        "content": " +"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "0blivious"
        },
        "content": "image:BookModelComponentAlternativeClassOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d EditBook feature"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "0blivious"
        },
        "content": "The editBook mechanism is facilitated by `BookShelf`."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "0blivious"
        },
        "content": "It contains `UniqueBookList` in which all the book data are stored and duplicates are not allowed. Books with same book name are considered as duplicates."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Additionally, it uses the following operations from `BookShelf`:"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* `model#hasBook()` -- Check if the book already exists in the Bookshelf."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `model#setBook()` -- To set a book with field values provided."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* `model#commitBookShelf()` -- Saves the current Bookshelf state for undo/redo.."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "These operations are exposed to the `Model` interface."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Given below is an example usage scenario and how the addBook mechanism behaves at each step."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedBookShelf` will be initialized with the initial bookshelf state, and the `currentStatePointer` pointing to that single bookshelf state."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Step 2. The user executes `editBook 1 n/Alice a/HR m/5 tag/fantasy` command to edit the first book present in the Bookshelf to be a book called Alice, written by HR, with a rating of 5 and tag of fantasy in the Bookshelf. The `addBook` command calls `Model#hasBook()`, checking if the book already exists in the bookshelf."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "0blivious"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "0blivious"
        },
        "content": "If the new book name already exists, CommandException(MESSAGE_DUPLICATE_BOOK) will be thrown. It will not call `Model#commitBookShelf()`, so the bookshelf state will not be saved into the `BookShelfStateList`."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Step 4. The bookshelf now set the fields of the first book to the new ones provided, and calls Model#commitBookShelf(), causing the modified state of the Bookshelf after the `addBook` command executes to be saved in the BookShelfStateList"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How editBook is executed"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* **Alternative 1 (current choice):** Use the index to figure out the book user wishes to edit."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "0blivious"
        },
        "content": "** Pros: Easy to select the book user wish to edit with the support of our UI."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** Cons: A listBook command might be needed before executing editBook if the current filtered Bookshelf is empty"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* **Alternative 2:** Use exact book name to figure out the book user wishes to edit."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** Pros: No need to first filter out a non-empty Bookshelf."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** Cons: Causing trouble for the user to type in the full name of the book."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "0blivious"
        },
        "content": "// end::book[]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "// tag::listBook[]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d ListBook feature"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "The current version of listBook command works to help the user to search books that satisfy certain criteria. The user can look for books by giving keywords of book name, author, tag or rating."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "This would be handy when there are many books on the bookshelf. It also makes the app more user-friendly as the user sometimes cannot remember the exact full name of a book but only know a few things about the book desired."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Compared to the `list` command in the address book app, our `listBookCommand` is an implementation of the combination of `list` and `find` and even more functionally helpful, as it accepts more filtering criteria than the original command does."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Given below is an example usage and how listBook feature behaves at each step."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedBookShelf` will be initialized with the initial bookshelf state, and the `currentStatePointer` pointing to that single bookshelf state."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Step 2. The user executes `listBook n/Life`."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 3. The `ListBookCommandParser` parses this command. It will first create some predicates according to the input and then use theses predicates to create a `ListBookCommand`. The exception will be thrown if the command is invalid. The command is created by the logic manager as follows."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "image::listBookCommandLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 4. The `ListBookCommand` will be executed. The command checks all the books on the `BookShelf`, selects out books whose name contain `Life` based on `BookNameContainsKeywordPredicate`."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "The sequence diagram of the whole process is as follows."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "image::listBookSqDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to select books."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* **Alternative 1 (current choice):** Only books match all criteria provided will be selected. For example, if the user gives 2 book name keywords and 2 ratings, only books matching at least 1 name keyword and at least 1 rating will be selected. Books match 1 name keyword but no ratings will not be considered."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "** Pros: Easy to test and manage."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** Cons: Such search techniques may fail to provide the user with enough information."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* **Alternative 2:** Books that match at least one criteria will be selected. For example, if the user gives 2 book name keywords and 2 ratings, books that match 1 name keyword but no ratings will still be selected."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Pros: More likely to provide the user with the book that the user is looking for."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Cons: Such a design also fails to narrow down search results when the user is providing more keywords for the targeted book. Besides, it\u0027s hard to test and manage."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "// end::listBook[]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "// tag::summary[]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Summary feature"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "The summary feature is a command works to summarize the books on the bookshelf. The user can have an overview of what he/she has read."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Given below is an example of usage and how the summary feature works."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedBookShelf` will be initialized with the initial bookshelf state, and the `currentStatePointer` pointing to that single bookshelf state."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 2. The user executes `summary`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 3. The `SummaryCommandParser` parses this command."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Step 4. The `SummaryCommandParser`returns an `SummaryCommand`. The exception will be thrown if the command is invalid."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 5. The `SummaryCommand` executes. The command will traverse all books in the bookshelf, checks, if there are authors or tags, appear more than once and give relative details. The command will also return the highest rating of books on the bookshelf."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "The summary command creates a summary as follows:"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "image:SummaryActivity.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Component to fetch the data"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* **Alternative 1 (current choice):** Model manager is in charge of data processing, then returns the result to the command."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Pros: This prevents the command from accessing data managed by the model manager, thus independence of different parts is guaranteed."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Cons: More methods are introduced into the model manager. To include more information in the summary, not only the summary command should be modified, but also more information query methodS should be added in The `Model`. This somehow break the abstraction."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* **Alternative 2:** Model manager passes the whole bookshelf to the command, then command process the data according to this list."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Pros: More flexible as the command can extract any information it desires. Whenever we want the summary to include more information, we just directly fetch the data from the copy of the bookshelf."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** Cons: This approach is unsafe and may lead to more bugs as it violates the principle of independence."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* **Alternative 3:** Model manager creates a list of the copies of the books in the bookshelf and passes it to the command."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Pros: More flexible as the command can read whatever information desired, thus keeps the bookshelf safe from any unintended modification."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Cons: The manager no longer has control over what information is accessible to the command, thus may still expose some sensitive information. Besides, making a copy of the whole list is not practical when there are many books in the bookshelf."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "// end::summary[]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "// tag::addReview[]"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d AddReview feature"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Given below is an example usage and how addReview feature behaves at each step."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedBookShelf` will be initialized with the initial bookshelf state, and the `currentStatePointer` pointing to that single bookshelf state."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Step 2. The user executes `addReview n/Alice in Wonderland rt/Carroll has depicted a unique world I hadn\u0027t seen before r/Alice\u0027s Adventures in Wonderland by Lewis Carroll is a story about Alice who falls down a rabbit hole and lands into a fantasy world that is full of weird, wonderful people and animals.`"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Step 3. The `AddReviewCommandParser` parses this command and creates a `Review` object based on the parameters in user input."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Step 4. The `AddReviewCommandParser`returns an `AddReviewCommand`. The exception will be thrown if the command is invalid."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Step 5. The `AddReviewCommand` executes. The command checks if the book to which the review is added exists in the `BookShelf`, based on `BookNameContainsExactKeywordPredicate`. If the book does not exist, an exception is thrown."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Step 6. If the book exists, the review is added to the review list of the Bookshelf."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "The Sequence Diagram below shows how the components interact with each other for the scenario where the user issues the command `addBook n/Alice rt/rt/interesting r/an interesting story book...`"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "image::AddReviewSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to store Reviews"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* **Alternative 1 (current choice):** Use a List to store Reviews"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "** Pros: There will be an order for the reviews added based on time created. More clear to users."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "** Cons: May have unforeseen bugs or implications."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* **Alternative 2:** Use a Set to store all Reviews, just like tags."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "** Pros: Easy to code and manage because it is the same implementation as tags."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "** Cons: Set does not allow duplicate reviews. Need to check for duplicate reviews added."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Where to store Reviews"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* **Alternative 1 (current choice):** Have another independent list for reviews in the bookshelf."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "** Pros: Much easier to implement."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "** Cons: Reviews and Books now have exactly the same structure, which violates the DRY principle."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* **Alternative 2:** Use a Set within a Book, just like tags."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "** Pros: The model makes more sense because Reviews belong to Books."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "** Cons: Makes it more difficult to link with the UI component."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Constraints on Review Parameters"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* ReviewTitle has the same constraints as BookName, less than 50 characters."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* ReviewMessage should be less than or equal to 400 characters. This is because of the"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "BookBrowserPanel used to display the ReviewMessage currently cannot hold more than 400 characters."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "The longer text also makes it more difficult to edit in the small CommandBox. Future releases would consider"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "adding enhanced review input panel to make the review feature more user-friendly."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Auto-creation of Date for the Review"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* Currently, the constructor of Review automatically assigns a dateCreated to it."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "This feature is provided for the convenience of the user. An overloaded constructor"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "is available where the date can be passed in as a parameter, to be used in testing."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d ListReview feature"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Given below are an example of usage and program behavior:"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Step 1. The user executes `listReview 1`"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Step 2. The ListReviewCommandParser parses this command and returns a new ListReviewCommand with the specified index."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Step 3. The ListReviewCommand executes. The book with the specified index is selected."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Step 4. Reviews of the selected book will be displayed in the rightmost panel."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Alternatively, the user can click the book to select it."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect:"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d ListAllReviews feature"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "The ListAllReviews Feature uses the same implementation as the ListBook feature:"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Step 1. The user executes `listAllReviews`"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Step 2. A new ListAllReviewsCommand is returned by the BookShelfParser"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Step 3. The ListAllReviewsCommand executes. Review list panel is updated to show all reviews."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Whether to combine ListAllReviews command with ListReview command"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* **Alternative 1 (current choice):** not to combine."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** Pros: Command is more logical and user-friendly because it is actually not intuitive to have two functions combined in one ListReview command."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "** Cons: Inconsistency with the ListBook command may cause confusion."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* **Alternative 2:** Combine."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "** Pros: Consistency."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "** Cons: Command is not intuitive, and takes extra time to implement review predicates."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d SelectReview feature"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Selection of review is implemented the same way as the selection of a book."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "In addition, review message of a selected review will be displayed in the book browser panel."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Step 1. The user executes `selectReview 1`"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Step 2. The SelectReviewCommandParser parses this command and returns a new SelectReviewCommand with index 1."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Step 3. The SelectReviewCommand executes. The review with the specified index is selected."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Step 4. The BookBrowserPanel listens to the change in the selected review and displays its review message."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d DeleteReview feature"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "The review is deleted based on the index."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Step 1. The user executes `deleteReview 1`"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Step 2. The DeleteReviewCommandParser parses this command and returns a new DeleteReviewCommand with index 1."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Step 3. The DeleteReviewCommand executes. The review with the specified index is deleted."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Other Design Considerations"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Whether to Implement EditReview"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "It seems natural to implement EditReview as one component of the CRUD features. However,"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "editing an existing review requires re-typing everything and seems painstaking to the user. It makes much more sense to just delete"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "the original review and add a new one. Hence. EditReview is currently not implemented."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "// end::addReview[]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Editing documentation"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Publishing documentation"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Converting documentation to PDF format"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting the document to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Site-wide documentation settings"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`]  file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value* if any."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Each `.adoc`  files may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Site template"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Modifying the template files in the link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Running tests"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "e.g. `seedu.address.commons.util.StringUtilTest`"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "..  Hybrids of unit and integration tests. These tests are checking multiple code units as well as how they are connected together. +"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Troubleshooting testing"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Build automation"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Continuous integration"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Coverage reporting"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Documentation previews"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "When a pull request has changed asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Making a release"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Managing dependencies"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "A project often depends on third-party libraries. For example, Bookshelf depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* has a need to manage a significant number of book reviews"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "0blivious"
        },
        "content": "*Value proposition*: manage book reviews faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "// tag::userStories[]"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "|`* * *` |user |add a new book | record a book I have read"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "0blivious"
        },
        "content": "|`* * *` |user |delete a book |remove entries that I no longer need"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "|`* * *` |user |find books by certain criteria such as name |locate details and reviews of the books without having to go through the entire list"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "|`* * *` |user |exist the program |"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "|`* * *` |user |select a review | so that I can view the review"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "|`* * *` |user |save |able to save data in local"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "|`* *` |user |show history |able to see what you did"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "|`* *` |user |undo |able to undo your operation"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "|`* *` |user |redo |able to redo your undo"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "|`* *` |user |clear |clear all entires"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "|`* *` |user |guideline |by typing help to show all commands"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "|`*` |user |sort |sort the book list in specified order"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "// end::userStories[]"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "0blivious"
        },
        "content": "(For all use cases below, the *System* is the `BookSquirrel` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d Use"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Use case: Delete book"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "1.  User requests to list books"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "2.  BookSquirrel shows a list of books"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "3.  User requests to delete a specific book in the list"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "4.  BookSquirrel deletes the book and all its reviews"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "The use case ends."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "The use case ends."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "** 3a1. BookSquirrel shows an error message."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Use case resumes at step 2."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".  Should be able to hold up to 1000 books without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "//tag::manualtesting[]"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "//end::manualtesting[]"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Launch and shutdown"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "0blivious"
        },
        "content": "   Expected: Shows the GUI with a set of sample books and reviews. The window size may not be optimum."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "   Expected: The most recent window size and the location is retained."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Adding a book"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "0blivious"
        },
        "content": ". Adding a book to an empty bookshelf."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".. Prerequisites: Clear the bookshelf using `clear` command. The bookshelf shall be empty after the command execution."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".. Test case: `addBook n/Alice in Wonderland n/multiple name a/Lewis Carroll m/5 t/fantasy t/fairy tale` +"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "0blivious"
        },
        "content": "   Expected: No book is added. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".. Test case: `addBook n/Alice in Wonderland n/multiple name a/Lewis Carroll m/5 t/fantasy t/fairy tale` +"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "0blivious"
        },
        "content": "   Expected: Adds a book named Alice in Wonderland to the record. The book is written by Lewis Carroll, rated 5 stars, and labeled with tags ‘fantasy’ and ‘fairy tale’."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Editing a book"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "0blivious"
        },
        "content": ". Editing an existing book in the bookshelf."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".. Prerequisites: At least one book exists in the bookshelf, and no book in the bookshelf is named `test`."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".. Test case: `editBook 1 n/test a/some author t/some tag` +"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "0blivious"
        },
        "content": "   Expected: Change the name, author, tag of the first book to test, some author, some tag."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".. Test case: `editBook 1 t/` +"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "0blivious"
        },
        "content": "   Expected: Clear all the existing tags of the first book in the result list."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d Deleting a book"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "0blivious"
        },
        "content": ". Deleting a book while all books are listed"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".. Prerequisites: List all book using the `listBook` command. All books present in the bookshelf are shown in the list."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".. Test case: `deleteBook 1` +"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "0blivious"
        },
        "content": "   Expected: First book is deleted from the list. Details of the deleted book shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".. Test case: `deleteBook 0` +"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "0blivious"
        },
        "content": "   Expected: No book is deleted. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".. Other incorrect delete commands to try: `deleteBook` +"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "0blivious"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "\u003d\u003d\u003d Listing books in the bookshelf"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ". Search and display the books in the bookshelf"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".. Prerequisites: The following test cases work as described only when you haven\u0027t deleted or modified _Madame Bovary_ and _Pride and Prejudice_ in the bookshelf. If you have, please only use the following test cases as examples and generate your own test cases accordingly."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".. Test case: `listBook` +"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "   Expected: All books in the bookshelf are shown in the leftmost column"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".. Test case: `listBook n/Madame` +"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "   Expected: _Madame Bovary_ should de displayed in the left column. Any other book whose name contains _Madame_ will also be displayed."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".. Test case: `listBook n/Madame n/Madame` +"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "   Expected: Repeated keywords are acceptable. _Madame Bovary_ should de displayed in the left column. Any other book whose name contains _Madame_ will also be displayed."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".. Test case: `listBook n/Madame n/Bovary` +"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "   Expected: _Madame Bovary_ and any other books contain _Madame_ or _Bovary_ will be displayed."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".. Test case: `listBook n/Madame n/Pride m/6 m/8` +"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "   The book _Madame Bovary_ and _Pride and Prejudice_ will be displayed. Some other books will also be displayed according to what you\u0027ve added into the bookshelf. For example, if you\u0027ve added _Madame Butterfly_ with a rating 6 into the bookshelf, it will also be displayed. But if you added _Madame Serpent_ with rating 7 into the bookshelf, it will not be displayed as it does not match \u0027at least one criteria for very dimensions\u0027."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".. Some incorrect listBook commands to try"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "... `listBook n/Madame Bovary` +"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    Keyword given is not a single word. Error isshown in the status message."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "... `listBook n/Madame c/nonsense` +"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    Prefix `c/` is not recognized, so `Madame c/nonsense` will be regarded as a whole keyword for book name. Since whitespace and \u0027/\u0027 are not allowed for keywords, the input is invalid. Error is shown in the status message."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "... `listBook m/12` +"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    12 is not a valid range for the rating. Error is shown in the status message."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "// tag::mtsortBook[]"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "\u003d\u003d\u003d Sorting the booklist"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ". Sorting the current booklist in a certain order."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ".. Prerequisites: List all book using the `listBook` command. Multiple books on the list."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ".. Test case: `SortBook st/rating` +"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "   Expected: booklist will be sorted with the rating in ascending order."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ".. Test case: `SortBook st/rating st/author o/asc o2/des` +"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "   Expected: The booklist will be sorted in ascending order, if they are having the same rating then it will be sorted in ascending order of author `o2/des` will be ignored as `o/asc` is specified."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ".. Test case: `SortBook st/rating st/author o2/des` +"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "   Expected: The booklist will be sorted in ascending order, if they are having the same rating then it will be sorted in descending order of author `."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ".. Some incorrect sort commands to try:"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "... `sortBook` +"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "   Error message: Sorting type is not provided."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "... `sortBook st/name o1/des o2/asc` +"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "   Error message: Second sorting type does not exist."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "// end::mtsortBook[]"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".. Data is saved in `bookshelf.json`, which is under the `data` directory."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ".. After the installation, `bookshelf.json` is not present. The file is initialized after the main app runs for the first time. At this point, the file is loaded with the sample data."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".. The data will not be saved automatically. If the user does not exit the program using the `exit` command, the changes will not be kept."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".. If the developer modifies the storage component, to make the data structure and content consistent with the newly updated code, The developer should delete the file before relaunching the app."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ".. If the file is corrupted, the developer or the user can manually fix the bookshelf.json to restore the data. However, he or she should stick to the format specified or the data will not be read properly. Therefore, modifying the `bookshelf.json` directly is not encouraged as such behavior will cause unexpected bugs."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "// tag::manualtestreview[]"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d Adding a review"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ". Adding a review with the target book existing in bookshelf"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ".. Test case: `addReview n/Pride and Prejudice rt/Belief Systems r/Most of the characters believe that nothing matters more than social class...` +"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "   Expected: a review titled \"Belief Systems\" should appear in the review list."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ". Adding a review with the target book not existing in bookshelf"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ".. Test case: `addReview n/Invalid Bookname rt/Belief Systems r/Most of the characters believe that nothing matters more than social class...` +"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "   Expected: the following error message should appear: \"The target book does not exist in the book shelf\"."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ". Other invalid commands to try:"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ".. Test case: `addReview n/Pride and Prejudice rt/Belief%Systems r/Most of the characters believe that nothing matters more than social class...` +"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "   Expected: error message: \"Review titles should contains only alphanumeric characters, spaces, \u0027*\u0027, \u0027,\u0027, \u0027.\u0027, \u0027?\u0027, \u0027\u0027\u0027, \u0027()\u0027 and \u0027\u0026\u0027."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                             And it should not be blank or have more than 50 characters (space included).\"."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ".. Test case: `addReview rt/Belief Systems r/Most of the characters believe that nothing matters more than social class...` +"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "   Expected: error message: \"Invalid command format!"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                             addReview: Adds a review to a certain book."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                             Parameters: n/BOOK NAME rt/REVIEW TITLE r/REVIEW"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                             Example: addReview n/Alice in Wonderland rt/A great fairytale r/While Lewis Carroll purists will scoff at the aging of his young protagonist...\""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ".. Test case: `addReview n/Pride and Prejudice rt/Belief Systemssssssssssssssssssssssssssssssssssssss r/Most of the characters believe that nothing matters more than social class...` +"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "   Expected: error message: \"Review titles should contains only alphanumeric characters, spaces, \u0027*\u0027, \u0027,\u0027, \u0027.\u0027, \u0027?\u0027, \u0027\u0027\u0027, \u0027()\u0027 and \u0027\u0026\u0027."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                             And it should not be blank or have more than 50 characters (space included).\"."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d Deleting a review"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ". Deleting a review while all reviews are listed"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ".. Prerequisites: List all reviews using the `listAllReviews` command. All reviews present in the bookshelf are shown in the list."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ".. Test case: `deleteReview 1` +"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "   Expected: First review is deleted from the list. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ".. Test case: `deleteReview 0` +"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "   Expected: No review is deleted. Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ".. Other incorrect delete commands to try: `deleteReview` +"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d Listing reviews"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ". Listing a review of a book"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ".. Prerequisites: 1 or more books are listed in the book list, by the listBook or sortBook command."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ".. Test case: `listReview 1`"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "   Expected: the book with the index is selected. Reviews to that book are listed in the review list."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ".. Test case: `listReview 0`"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "   Expected: Error details are shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ". Listing all reviews"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ".. Test case: `listAllReviews`"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "   Expected: any selected book is deselected. All reviews in the book shelf are listed in the review list."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d Selecting review"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ". Selecting a review while all reviews are listed"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ".. Prerequisites: List all reviews using the `listAllReviews` command. All reviews present in the bookshelf are shown in the list."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ".. Test case: `selectReview 1` +"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "   Expected: First review is selected. The complete review is shown in the selected review panel."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ".. Test case: `selectReview 0` +"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "   Expected: No review is selected. Error details are shown in the status message."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ".. Other incorrect delete commands to try: `selectReview` +"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "// end::manualtestreview[]"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 222,
      "Jiangqinhua": 162,
      "EleenYang": 120,
      "0blivious": 142,
      "-": 549
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "\u003d BookSquirrel - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": ":toclevels: 4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w11-4/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "By: `Team W11-04`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "BookSquirrel is for those who *want to keep a record of books they\u0027ve read*. More importantly, BookSquirrel is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, BookSquirrel can get your book management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".  Download the latest `bookSquirrel.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your application."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".  Double-click the file to start the app. The main window should appear in a few seconds, as shown in the screenshot below."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "E.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* **`addBook`**`n/Alice in Wonderland a/Lewis Carroll m/5 t/fantasy t/fairy tale` : adds a book named `Alice in Wonderland` to the record. The book is written by `Lewis Carroll`, with a rating of 5, and labeled with tags `fairy tale` and `fantasy`."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "// tag::book[]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "[[Command-Format]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* The total length of user input should not exceed 500 characters (space included)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `addBook n/NAME`, `NAME` is a parameter which can be used as `addBook n/Book`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* Words in `UPPER_CASE` without brackets are the parameters that should only be supplied once e.g. in `addBook n/NAME`, `NAME` is a parameter which should only appear once in user input, `addBook n/John Doe n/Alice` is not allowed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* Items in square brackets are optional (can be supplied once or not at all) e.g `n/NAME [a/AUTHOR]` can be used as `n/Alice in Wonderland a/Jack` or as `n/Alice in Wonderland`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/fantasy`, `t/fantasy t/textbook` etc."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME a/AUTHOR`, `a/AUTHOR n/NAME` is also acceptable."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* Book name, review title and review content should only contain alphanumeric characters, space, `*`, `,`, `.`, `?`, `\u0027`, `(`, `)` and `\u0026`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* Author and tag should only contain alphanumeric characters and spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* The Book name and author should not exceed 50 characters (space included)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* Review title should not exceed 50 characters (space included)."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* Review content should not exceed 400 characters (space included)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* Rating should be an integer from 0 to 10 inclusive and the input should be 1 or 2 digit number."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* Tags should not exceed 20 characters (space included)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d Book Commands"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a book: `addBook`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Adds a book to the Bookshelf +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Format: `addBook n/BOOKNAME a/author m/RATING [t/TAG]…​`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "****"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* The book name is case sensitive"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* Two books with same book name are considered the same book"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* Trying to add a book which is already present on the bookshelf will result in duplicate book error, and the addBook command will fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* Take a look at \u003c\u003cCommand-Format\u003e\u003e to see the valid format for each parameter"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "****"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `addBook n/Alice in Wonderland a/Lewis Carroll m/5 t/fantasy t/fairy tale` +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Adds a book named Alice in Wonderland to the record. The book is written by Lewis Carroll, rated 5 stars, and labeled with tags ‘fantasy’ and ‘fairy tale’."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "image::AddBookDisplay.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Figure 1. Result display after successful execution of `addBook n/Alice in Wonderland a/Lewis Carroll m/5 t/fantasy t/fairy tale`."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Editing book entry : `editBook`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Edits an existing book entry (eg. edit the book name, rating, author or tag). +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Format: `editBook INDEX [n/BOOKNAME] [a/AUTHOR] [m/RATING] [t/TAG]...`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* Edit the book at the specified INDEX. The index refers to the index number shown in the displayed Bookshelf. The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* Edit a book with a new name that  already exists on the bookshelf is not allowed"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* Take a look at \u003c\u003cCommand Format\u003e\u003e to see the valid format for each parameter"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* Existing values will be updated to the input values"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* When editing tags, the existing tags of the book will be removed i.e adding of tags is not cumulative"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* You can remove all the book’s tags by typing t/ without specifying any tags after it"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `editBook 1 n/Alice in Wonderland a/some author t/some tag` +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Change the name, author, tag of the first book to Alice in Wonderland, some author, some tag."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "image::EditBookBefore.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Figure 2.1 Result display before the the execution of `editBook 1 n/Alice in Wonderland a/some author t/some tag`."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "image::EditBookAfter.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Figure 2.2 Result display after the the execution of `editBook 1 n/Alice in Wonderland a/some author t/some tag`."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `editBook 2 t/` +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Clear all the existing tags of the second book in the result list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "// end::book[]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a book : `deleteBook`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Deletes the specified book from the Bookshelf. +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Format: `deleteBook INDEX`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* Deletes the book of the specified `INDEX`."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* All the reviews of the deleted book will also be deleted."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* The index refers to the index number shown in the displayed Bookshelf."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `listBook n/Computer Security` +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "`deleteBook 1` +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Deletes the 1st book in the results of the listBook command."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "image::DeleteBookBefore.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Figure 3.1 Result display before the the execution of `deleteBook 1`."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "image::DeleteBookAfter.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Figure 3.1 Result display after the the execution of `deleteBook 1`."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "// tag::list[]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d\u003d Listing book entries : `listBook`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Shows a list of all book entries, with the specified keywords of bookname, author, tag and rating. +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Format: `listBook [n/BOOKNAME] [a/AUTHOR] [t/TAG] [m/RATING]`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* If no parameters are given, the command will give the complete list of all the books"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* Keywords should be single word, or will be rejected as an invalid input."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* Keywords for every type should comply with the constraint enforced for this type."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* Prefixes should be provided for every keyword. For example, `n/Madame Ham` will not be recognized as two separate book name keywords \u0027Madame\u0027 and \u0027Ham\u0027, but will be read as a whole."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* There are no limits of the number of keywords of one type."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* The order of the keywords does not matter. e.g. `Alice Wonderland` will match `Wonderland Alice`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* Only books match at least one criteria for all kinds will be returned. For example, if two book name keywords and two tag keywords are provided, book that matches at least one name keyword and at least one tag keyword will be displayed. Books contain only one name keyword provided and no tag keyword provided will not be selected."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* For book name searching, books matching at least one keyword will be returned. e.g. `Alice` will return `Alice in Wonderland`, `the Westminster Alice`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* For author name searching, books whose author name matching at least one keyword will be returned. e.g. `James` will return books whose author name is `Henry James`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* For tag searching, books containing at least one tag given will be returned. e.g. `computer` will return `Computer Organisation`, `Computer Networks`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* For rating search, books whose rating is included will be returned."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* `listBook t/textbook m/5` +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Books with the rating _5_ or the tag _textbook_ will be displayed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* `listBook n/CS2104T t/textbook` +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Books whose name contains the keyword _CS2104T_ or tags include _textbook_ will be displayed."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* `listBook m/5 m/6` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Books whose rating is _5_ or _6_ wil be displayed."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* `listBook n/Madame n/Prejudice m/6 m/8` +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "_Madame Bovary_ and _Pride and Prejudice_ will be displayed"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "image:ListBookScreenShot.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "// end::list[]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "// tag::sortBook[]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Sort books command : `sortBook`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "image::sortBook.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "sort booklist in specify order. +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Format: `sortBook st/TYPE... [o/ORDER] [o1/ORDER] [o2/ORDER] [o3/ORDER]`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* TYPE can only be either *AUTHOR*, *NAME* or *RATING*."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* Able to sort more than one *TYPE* by writing down more than one *TYPE* after the *sortBook*."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* ORDER can be either *ASC*(ascending) and *DES*(descending)."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* Omit o/ORDER, it will sort in *ASC*(ascending)."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* o1, o2, o3 is corresponding order for each *TYPE* that specify in front."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* o/ORDER is the order for all *TYPEs*, it will overwrite order if both o and o1 appear at the same time."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* *TYPE* and *ORDER* are all case-insensitive."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* `sortBook st/name`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "sort bookList by book name in ascending order."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* `sortBook st/rating st/name o1/des`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "sort bookList by the rating of the book in descending order and if they having the same rating it will sort them by book name in ascending order."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* `sortBook st/author st/rating o/des o2/asc`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "sort bookList by the author in descending order and if they having the same rating it will sort them by rating in des order. (o/des overwrite o2/asc)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* `sortBook st/rating st/author st/name o1/des o3/asc`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "sort bookList by rating in descending order and since the o2 order is not specified, if the same rating it will consider author as ascending order."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "// end::sortBook[]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "// tag::reviews[]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d Review Commands"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a book review: `addReview`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Adds a book review to a certain book in the Bookshelf +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Format: `addReview n/BOOKNAME rt/REVIEW TITLE r/REVIEW MESSAGE`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* `addReview n/Alice in Wonderland rt/An interesting child book r/While Lewis Carroll purists will scoff at the aging of his curious young protagonist, most movie audiences will enjoy this colorful world.`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* `addReview n/Structure and Interpretation of Computer Programs rt/Computing Bible r/A very difficult book:(`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* The book has specified `BOOKNAME` must already exist in the BookShelf."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* `BOOKNAME` and `REVIEW TITLE` should not contain more than 50 characters."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* `REVIEW MESSAGE` should not contain more than 400 characters."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a book review: `deleteReview`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Deletes the review of the specified index number from the review list. +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Format: `deleteReview INDEX`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `deleteReview 1`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0blivious"
        },
        "content": "****"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* Deletes the review of the specified `INDEX`."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* The index refers to the index number shown in the displayed review list."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0blivious"
        },
        "content": "****"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all book reviews: `listAllReviews`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Lists all the reviews in the BookShelf. +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Format: `listAllReviews`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "image::listallreviews.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Listing book reviews of a certain book : `listReview`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Lists the reviews of the book identified by the index number used in the displayed Bookshelf. +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Format: `listReview INDEX`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* `listReview 1`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "****"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* Lists the review of the book at the specified `INDEX`."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* The index refers to the index number shown in the displayed Bookshelf."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "****"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "image::listreview.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Selecting an review: `selectReview`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Selects a review."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Format: `selectReview INDEX`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* `selectReview 1`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "****"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* Selects the review of the specified `INDEX`."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* The complete review will be displayed at the rightmost panel."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* The index refers to the index number shown in the displayed review list."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "****"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "image::selectreview.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "// end::reviews[]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d System Commands"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Offer a guide of all possible commands. +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Restores the records to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Undoable commands: those commands that modify the records content (`addBook`, `addReview`, `deleteBook`, `deleteReview`, `editBook`, `sortBook` and `clear`)."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `listBook n/Alice` +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "0blivious"
        },
        "content": "`deleteBook 1` +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "0blivious"
        },
        "content": "`undo` (reverses the `deleteBook 1` command) +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* `sortBook st/rating` +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "`undo` (reverses the `sortBook st/rating` command) +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `listBook a/James` +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `deleteBook 1` +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "0blivious"
        },
        "content": "`undo` (reverses the `deleteBook 1` command) +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `deleteBook 1` +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "0blivious"
        },
        "content": "`undo` (reverses the `deleteBook 1` command) +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "0blivious"
        },
        "content": "`redo` (reapplies the `deleteBook 1` command) +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* `deleteBook 1` +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "// tag::summary[]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d\u003d\u003d Providing statistics of all the books read : `summary`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Generate a summary of all the books read so far. +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Format: `summary`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "****"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* The summary will list out how many books you\u0027ve read."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* The summary will also list out authors appear more than once on your bookshelf."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* The summary will also list out books of the highest score."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* The summary will also list out tags appear more than once on your bookshelf."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "****"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* `summary`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "An example of a summary `You\u0027ve read 9 books. You prefer books by Erika Leonard, as you\u0027ve read: Fifty Shades of Grey, Fifty Shades Darker. Book(s) receive a rating of 10 from you: To Kill a Mocking Bird. You prefer books that you labeled as fantasy(including The Hunger Games, Life of Pi).`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "// end::summary[]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Clears all entries from the bookshelf. +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "Book review data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous BookSquirrel folder."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d Book Commands"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* *AddBook* `addBook n/BOOKNAME a/author m/RATING(0-10) [t/TAG]…` +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "0blivious"
        },
        "content": "e.g. `addBook n/Alice in Wonderland a/Lewis Carroll m/5 t/fantasy t/textbook`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* *EditBook* : `editBook INDEX [n/BOOKNAME] [a/AUTHOR] [m/RATING]...` +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "0blivious"
        },
        "content": "e.g. `editBook 1 n/Alice in Wonderland a/some author`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* *DeleteBook* : `deleteBook INDEX` +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "e.g. `deleteBook 4`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* *ListBook* : `listBook [n/NAME] [t/TAG] [m/RATING] [a/Author]` +"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "0blivious"
        },
        "content": "e.g. `listBook t/textbook m/5`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* *sortBook* : `sortBook st/TYPE o/ORDER` +"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "e.g. `sortBook st/AUTHOR o/ASC`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d Review Commands"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* *AddReview* `addReview n/BOOKNAME r/review` +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "e.g. `addReview n/Alice in Wonderland r/While Lewis Carroll purists will scoff at the aging of his curious young protagonist, most movie audiences will enjoy this colorful world.`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* *DeleteReview* : `deleteReview INDEX` +"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "0blivious"
        },
        "content": "eg. `deleteReview 1`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* *ListAllReviews* : `listAllReviews` +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "e.g. `listAllReviews`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* *ListReview* : `listReview INDEX` +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "0blivious"
        },
        "content": "e.g. `listReview 1`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* *SelectReview* : `selectReview INDEX` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "e.g. `selectReview 1`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d\u003d System Commands"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* *Summary* : `summary`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* *Exit* : `exit`"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 81,
      "Jiangqinhua": 35,
      "EleenYang": 54,
      "-": 146,
      "0blivious": 103
    }
  },
  {
    "path": "docs/team/0blivious.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d 0blivious - Project Portfolio for BookSquirrel"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003d\u003d About the Project"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "My team and I were tasked with enhancing a application addressbook-level4 for our"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "Software Engineering project. We chose to morph it into an book review recording application called"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "BookSquirrel. This enhanced application enables readers to keep track of their reading, recording down their"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "reviews of books and obtain statistics of their past reading habits."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "My role was to design and write the codes to support the CRUD of books. The following sections"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "illustrate these enhancements in more detail, as well as the relevant sections I have added to the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "user and developer guides in relation to these enhancements."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "team project."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* *Major enhancement*: Support CRUD of book object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "** What it does: Allows the user to add, edit, delete book in the book shelf and check reviews of selected book"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "** Justification: This feature is the basis of the application. As our app is viewed as a big book shelf"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "that keeps numerous books and the reviews related to each book. The CRUD features of book object is necessary to support"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "all the other operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* *Minor enhancement*: Modified the UI to make it better suit our product"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003d0blivious[Link to Code]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "*** Managed releases `v1.1` - `v1.4` (4 releases) on GitHub"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "*** Setting up Travis, Coveralls, Codacy for code checking purpose."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "*** Managing Issue Tracker and merging of PRs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "*** Updated the GUI to show list of reviews of certain book when click on that book card (Pull requests https://github.com/cs2103-ay1819s2-w11-4/main/pull/90[#90])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage (Pull requests https://github.com/cs2103-ay1819s2-w11-4/main/pull/67[#67], https://github.com/cs2103-ay1819s2-w11-4/main/pull/69[#69],"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": " https://github.com/cs2103-ay1819s2-w11-4/main/pull/92[#92])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "*** Update User Guide and Developer Guide to reflect current product (Pull requests https://github.com/cs2103-ay1819s2-w11-4/main/pull/61[#61], https://github.com/cs2103-ay1819s2-w11-4/main/pull/97[#97],"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": " https://github.com/cs2103-ay1819s2-w11-4/main/pull/96[#96])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): (Pull requests https://github.com/cs2103-ay1819s2-w11-4/main/pull/42[#42], https://github.com/cs2103-ay1819s2-w11-4/main/pull/65[#65], https://github.com/cs2103-ay1819s2-w11-4/main/pull/66[#66], , https://github.com/cs2103-ay1819s2-w11-4/main/pull/93[#93])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "We had to update the original addressbook User Guide with instructions for the enhancements that"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "we had added. The following is an excerpt from our BookSquirrel User Guide, showing additions that I have"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "made for the CRUD features for book."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "include::../UserGuide.adoc[tag\u003dbook]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "The following section shows my additions to the BookSquirrel Developer Guide for the addBook"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "features."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dbook]"
      }
    ],
    "authorContributionMap": {
      "0blivious": 37,
      "-": 23
    }
  },
  {
    "path": "docs/team/eleenyang.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "\u003d Yang Sihan - Project Portfolio for Book Squirrel"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "\u003d\u003d PROJECT: BookSquirrel"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "BookSquirrel is for those who want to keep a record of books they’ve read. More importantly, BookSquirrel is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, BookSquirrel can get your note management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* *Major enhancement*: add *the ListBook feature*. https://github.com/cs2103-ay1819s2-w11-4/main/pull/42[#42] https://github.com/cs2103-ay1819s2-w11-4/main/pull/53[#53] https://github.com/cs2103-ay1819s2-w11-4/main/pull/66[#66]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** What it does: allows the user to search the book by using keywords of book name, author name, tags or ratings of books."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Justification: This feature help the user quickly find the books that satisfy certain criteria."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Highlights: This feature is critical for testing as it is used to display the books. As it provides the users a quick and easy method to find books in the bookshelf, it also makes the product much more user friendly especially when the bookshelf contains many books."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* *Major enhancement*: modify *the storage* part of the app. Pull request https://github.com/cs2103-ay1819s2-w11-4/main/pull/70[#70], https://github.com/cs2103-ay1819s2-w11-4/main/pull/85[#85]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** What it does: loads data into the app at runtime and saves data when the program exits."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Justification: This part is critical for data saving and updating."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Highlights: This part is critical for the functionality of the product, since it guarantees the consistency between the saved data and the attempted modification of the bookshelf."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* *Minor enhancement*: added *the Summary feature*. https://github.com/cs2103-ay1819s2-w11-4/main/pull/94[#94] https://github.com/cs2103-ay1819s2-w11-4/main/pull/98[#98]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** What it does: gives a brief summary of books in the book shelf."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Justification: This feature provides the user an overview of what he/she has read."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Highlights: This feature makes the app more interesting. It helps users to have a quick overview of all books have been stored."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003deleenyang[Functional code]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "*** Create the organization"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "*** Make the storage part compatible with the app after the reviews part is added. (Pull request https://github.com/cs2103-ay1819s2-w11-4/main/pull/70[#70], https://github.com/cs2103-ay1819s2-w11-4/main/pull/85[#85])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "*** Write some parts in UI to work with the current version. (Pull request https://github.com/cs2103-ay1819s2-w11-4/main/pull/42[#42])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "*** Update diagrams in the Developer Guide. (Pull request https://github.com/cs2103-ay1819s2-w11-4/main/pull/107[#107], https://github.com/cs2103-ay1819s2-w11-4/main/pull/99[#99], https://github.com/cs2103-ay1819s2-w11-4/main/pull/74[#74])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "*** Update the User Guide and the Developer Guide: (Pull request https://github.com/cs2103-ay1819s2-w11-4/main/pull/107[#107])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "** Data Management:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "*** Write some sample data for testing and initialization"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlist]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsummary]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstorage]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlistBook]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsummary]"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 66
    }
  },
  {
    "path": "docs/team/jiangqinhua.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "\u003d Jiang Qinhua - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "\u003d\u003d PROJECT: BookSquirrel"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "This portfolio is to document my contribution to the project called BookSquirrel. BookSquirrel is a team project for our CS2103T Software Engineering. The aim of this project is to create a new application base on a given project called AddressBook Level 4(AB4), make the new project running without any bugs. In the project, Most of the word documents are written in asciidoc or markdown. +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "There are some basic requirements for this project:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    1. Modifying base on an existing project instead of starting from scratch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    2. Forming a team and collaborate with team members."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    3. Using Github and Version Control System to manage our project, knowing how to use git commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    4. Must follow the coding standard."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    5. Must write various tests for the project such as the Unit test."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    6. Writing Developer guide and User guide is compulsory."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    7. The project is base on Java 9.0, so Java is the only language you can use for this project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    8. Forbidden feathers such as login in, using network function and using database function."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "BookSquirrel is a desktop application for those who want to keep records of books they\u0027ve read. You can write down multiple reviews for a single book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Before you write any reviews for a book, you need to add a book into our application first. The details include book name, author of the book, rating point that you would rate for this book and some optional tags.BookSquirrel is optimized for those who prefer to work with a *Command Line Interface* (CLI) while still having the benefits of a *Graphical User Interface* (GUI). +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "In order to meet the task requirement, I have to consistently write code contribute to my project to avoid last minus work. I will ask for help if I am stuck too long and I will communicate with team members frequently to avoid doing redundant or repeated works."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "My contribution to this project includes: +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* *Major enhancement*: added the *ability to rearrange books in certain order*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "- What it does: allows the user to sort the books they added by book name, author or rating."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "- Justification: This feature improves the product significantly because users can easier arrange all books in the way they want, such as high rating to low rating."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "- Highlights: This enhancement is not simply sorted by one attribute, it can be sorted with more than one attributes at the same time. For example, you want to sort the rating of books in descending, if they are tie you may want them in ascending order of book name."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* *Major enhancement*: added the *ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "- *What it does*: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "- *Justification*: This feature improves the product significantly because a user can make mistakes in commands and the application should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "- *Highlights*: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "- *Credits*: The code is modified base on https://github.com/nus-cs2103-AY1819S2/addressbook-level4[se-edu/addressbook-level4]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* *Minor enhancement*: modifies the UI base on AddressBook- level 4."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* *Code contributed*: https://github.com/cs2103-ay1819s2-w11-4/main/pull/78/files[Functional code] https://github.com/cs2103-ay1819s2-w11-4/main/pull/81/files[Test code]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "- Updates Tag color for the project(Pull requests, https://github.com/cs2103-ay1819s2-w11-4/main/pull/10[#10])"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "- Documentation:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** Did cosmetic tweaks to existing contents of the User Guide: https://github.com/cs2103-ay1819s2-w11-4/main/pull/82[#82],"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "https://github.com/cs2103-ay1819s2-w11-4/main/pull/102[#102]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** Did cosmetic tweaks to existing contents of the Developer Guide: https://github.com/cs2103-ay1819s2-w11-4/main/pull/14[#14], https://github.com/cs2103-ay1819s2-w11-4/main/pull/102[#102]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "- Community:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "** PRs reviewed (with non-trivial review comments)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Given below are sections I contributed to the User Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsortBook]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003duserStories]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsortBook]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmtsortBook]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 82
    }
  },
  {
    "path": "docs/team/miaaaaa97.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d Zhang Tieze - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d PROJECT: BookSquirrel"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "BookSquirrel(v1.4) is for those who want to keep a record of books they’ve read. More importantly, BookSquirrel is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, BookSquirrel can get your note management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* *Major enhancement*: added *the Review feature*."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "** What it does: allows the user to add, list, view, and delete reviews."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "** Justification: This feature enables the user to record their thoughts when they read books."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "** Highlights: This feature requires a lot of change to the UI and model of the application, meanwhile, it is closely linked to the book feature, which"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "makes it challenging and bug-prone. To find a way to store reviews, many architectures were considered."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "Extra care was taken to integrate Reviews with existing Book commands, such as to cascade any deletion or editing of books."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* *Minor enhancement*: fixed the bug that ConfigUtil will always output config.json with missing new line at end of file, which causes the travis build to fail unless a new line is manually added."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dmiaaaaa97[Functional code]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "*** Created and managed the Project board"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "*** Created and organized tags"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 87% to 92% (Pull request https://github.com/cs2103-ay1819s2-w11-4/main/pull/95[#95])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "*** Wrote the AboutUs and ContactUs documents. (Pull request https://github.com/cs2103-ay1819s2-w11-4/main/pull/6[#6])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "*** Update diagrams in README page, UserGuide and DeveloperGuide. (Pull request https://github.com/cs2103-ay1819s2-w11-4/main/pull/17[#17], https://github.com/cs2103-ay1819s2-w11-4/main/pull/21[#21])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "*** Re-organized existing contents of the User Guide and Developer Guide: (Pull request https://github.com/cs2103-ay1819s2-w11-4/main/pull/95[#95])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "include::../UserGuide.adoc[tag\u003dreviews]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003duidiagram]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlogicdiagram]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmodeldiagram]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003daddReview]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmanualtesting]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmanualtestreview]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.storage.BookShelfStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.storage.JsonBookShelfStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 1, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing BookShelf ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookShelfStorage bookShelfStorage \u003d new JsonBookShelfStorage(userPrefs.getBookShelfFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        storage \u003d new StorageManager(bookShelfStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Optional\u003cReadOnlyBookShelf\u003e bookShelfOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ReadOnlyBookShelf initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            bookShelfOptional \u003d storage.readBookShelf();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (!bookShelfOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample BookShelf\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            initialData \u003d bookShelfOptional.orElseGet(SampleDataUtil::getSampleBookShelf);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty BookShelf\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            initialData \u003d new BookShelf();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty BookShelf\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            initialData \u003d new BookShelf();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty BookShelf\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        logger.info(\"Starting BookShelf \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping BookShelf ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 1,
      "Jiangqinhua": 1,
      "EleenYang": 8,
      "-": 166,
      "0blivious": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return sb.toString() + \"\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 700;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1000;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 2,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String MESSAGE_INVALID_REVIEW_DISPLAYED_INDEX \u003d \"The review index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_INVALID_BOOK_DISPLAYED_INDEX \u003d \"The book index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String MESSAGE_BOOKS_LISTED_OVERVIEW \u003d \"%1$d books listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String MESSAGE_BOOK_LIST_EMPTY \u003d \"The book Shelf is empty\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 1,
      "Jiangqinhua": 1,
      "EleenYang": 1,
      "-": 10,
      "0blivious": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize) + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 1,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns the BookShelf."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see seedu.address.model.Model#getBookShelf()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    ReadOnlyBookShelf getBookShelf();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of books */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    ObservableList\u003cBook\u003e getFilteredBookList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of books */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    ObservableList\u003cReview\u003e getFilteredReviewList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns the user prefs\u0027 book shelf file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    Path getBookShelfFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Selected person in the filtered books list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * null if no book is selected."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see seedu.address.model.Model#selectedBookProperty()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    ReadOnlyProperty\u003cBook\u003e selectedBookProperty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Selected person in the filtered books list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * null if no book is selected."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * @see seedu.address.model.Model#selectedBookProperty()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    ReadOnlyProperty\u003cReview\u003e selectedReviewProperty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedBook(Book)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    void setSelectedBook(Book book);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedBook(Book)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    void setSelectedReview(Review review);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 13,
      "EleenYang": 20,
      "-": 57,
      "0blivious": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.parser.BookShelfParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.ReviewBookNameContainsExactKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final BookShelfParser bookShelfParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private boolean bookShelfModified;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        bookShelfParser \u003d new BookShelfParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set addressBookModified to true whenever the models\u0027 address book is modified."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        model.getBookShelf().addListener(observable -\u003e bookShelfModified \u003d true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelfModified \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            Command command \u003d bookShelfParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (bookShelfModified) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            logger.info(\"Bookshelf modified, saving to file.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                storage.saveBookShelf(model.getBookShelf());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ReadOnlyBookShelf getBookShelf() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return model.getBookShelf();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return model.getFilteredBookList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public ObservableList\u003cReview\u003e getFilteredReviewList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return model.getFilteredReviewList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public Path getBookShelfFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return model.getBookShelfFilePath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ReadOnlyProperty\u003cBook\u003e selectedBookProperty() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return model.selectedBookProperty();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public ReadOnlyProperty\u003cReview\u003e selectedReviewProperty() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return model.selectedReviewProperty();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void setSelectedBook(Book book) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (book !\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            model.setSelectedBook(book);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            ReviewBookNameContainsExactKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                    new ReviewBookNameContainsExactKeywordsPredicate(book.getBookName());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            model.updateFilteredReviewList(predicate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void setSelectedReview(Review review) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        model.setSelectedReview(review);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 11,
      "Jiangqinhua": 1,
      "EleenYang": 22,
      "-": 86,
      "0blivious": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddBookCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Adds a book to the book shelf."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class AddBookCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addBook\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a book to the bookShelf. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + PREFIX_AUTHOR + \"AUTHOR \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + PREFIX_RATING + \"RATING \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + PREFIX_NAME + \"Alice in Wonderland \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + PREFIX_AUTHOR + \"Lewis Carroll \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + PREFIX_RATING + \"5 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + PREFIX_TAG + \"fantasy \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + PREFIX_TAG + \"good\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New book added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"This book already exists in the bookShelf\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final Book toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Creates an AddBookCommand to add the specified {@code Book}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public AddBookCommand(Book book) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        toAdd \u003d book;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (model.hasBook(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.addBook(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        model.commitBookShelf();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                || (other instanceof AddBookCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddBookCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 1,
      "-": 39,
      "0blivious": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddReviewCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REVIEWTITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * Adds a review to the book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class AddReviewCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addReview\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String PLACE_HOLDER_FOR_TEST_BOOK \u003d \"1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final int MAX_REVIEWMESSAGE_LENGTH \u003d 400;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a review to a certain book. \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            + PREFIX_NAME + \"BOOK NAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            + PREFIX_REVIEWTITLE + \"REVIEW TITLE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            + PREFIX_REVIEW + \"REVIEW \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            + PREFIX_NAME + \"Alice in Wonderland \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            + PREFIX_REVIEWTITLE + \"A great fairytale \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            + PREFIX_REVIEW + \"While Lewis Carroll purists will scoff at the aging of his young protagonist...\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New review added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REVIEW \u003d \"This review already exists in the book shelf\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_BOOK \u003d \"The target book does not exist in the book shelf\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String MESSAGE_REVIEW_LENGTH_EXCEEDED \u003d \"The review can contain maximum 350 characters\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private final Review toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Creates an AddReviewCommand to add the specified {@code Review}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public AddReviewCommand(Review review) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(review);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        toAdd \u003d review;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Book targetBook \u003d new Book(toAdd.getBookName(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                new Author(PLACE_HOLDER_FOR_TEST_BOOK), new Rating(PLACE_HOLDER_FOR_TEST_BOOK), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        if (!model.hasBook(targetBook)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new CommandException(MESSAGE_NONEXISTENT_BOOK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        if (model.hasReview(toAdd)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_REVIEW);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        model.addReview(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        model.commitBookShelf();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getTitle().fullName));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                || (other instanceof AddReviewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddReviewCommand) other).toAdd));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return (\"Add: \" + toAdd.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 82,
      "Jiangqinhua": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Clears the book shelf."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Book shelf has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.setBookShelf(new BookShelf());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        model.commitBookShelf();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 1,
      "-": 19,
      "0blivious": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 4,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteBookCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_REVIEWS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.ReviewBookNameContainsExactKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Deletes a book identified using it\u0027s displayed index from the book shelf."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class DeleteBookCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteBook\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \": Deletes the book identified by the index number used in the displayed book list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_DELETE_BOOK_SUCCESS \u003d \"Deleted Book: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public DeleteBookCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // check for reviews linked to this book and delete them"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ReviewBookNameContainsExactKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                new ReviewBookNameContainsExactKeywordsPredicate(bookToDelete.getBookName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        model.updateFilteredReviewList(predicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        List\u003cReview\u003e reviewsToDelete \u003d model.getFilteredReviewList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        while (!reviewsToDelete.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            model.deleteReview(reviewsToDelete.get(0));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            model.updateFilteredReviewList(predicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            reviewsToDelete \u003d model.getFilteredReviewList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // show all reviews"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        model.updateFilteredReviewList(PREDICATE_SHOW_ALL_REVIEWS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.commitBookShelf();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                || (other instanceof DeleteBookCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteBookCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 17,
      "0blivious": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteReviewCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * Deletes the review of the specified book with the specified title."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class DeleteReviewCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteReview\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            + \": Deletes the review identified by the index number used in the displayed review list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String MESSAGE_DELETE_REVIEW_SUCCESS \u003d \"Deleted Review: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public DeleteReviewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        List\u003cReview\u003e lastShownList \u003d model.getFilteredReviewList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_REVIEW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Review reviewToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        model.deleteReview(reviewToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        model.commitBookShelf();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_REVIEW_SUCCESS, reviewToDelete.getTitle().fullName));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                || (other instanceof DeleteReviewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteReviewCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 15,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditBookCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_REVIEWS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.ReviewBookNameContainsExactKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Edits the details of an existing book in the book shelf."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class EditBookCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editBook\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the book identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \"by the index number used in the displayed book list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \"[\" + PREFIX_AUTHOR + \"AUTHOR] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \"[\" + PREFIX_RATING + \"RATING] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + PREFIX_NAME + \" Alice in Wonderland \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + PREFIX_AUTHOR + \"Jimmy \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            + PREFIX_RATING + \"1\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_EDIT_BOOK_SUCCESS \u003d \"Edited Book: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to editBook must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"This book already exists in the book shelf.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final EditBookDescriptor editBookDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @param editBookDescriptor details to editBook the book with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public EditBookCommand(Index index, EditBookDescriptor editBookDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(editBookDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.editBookDescriptor \u003d new EditBookDescriptor(editBookDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editBookedBook \u003d createEditedBook(bookToEdit, editBookDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!bookToEdit.isSameBook(editBookedBook) \u0026\u0026 model.hasBook(editBookedBook)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        if (!bookToEdit.getBookName().equals(editBookedBook.getBookName())) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            ReviewBookNameContainsExactKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                    new ReviewBookNameContainsExactKeywordsPredicate(bookToEdit.getBookName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            model.updateFilteredReviewList(predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            List\u003cReview\u003e reviewsToEdit \u003d model.getFilteredReviewList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            Review reviewToEdit;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            Review editedReview;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            while (!reviewsToEdit.isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                reviewToEdit \u003d reviewsToEdit.get(0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                editedReview \u003d new Review(reviewToEdit.getTitle(), editBookedBook.getBookName(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                        reviewToEdit.getDateCreated(), reviewToEdit.getReviewMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                model.setReview(reviewToEdit, editedReview);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                model.updateFilteredReviewList(predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                reviewsToEdit \u003d model.getFilteredReviewList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.setBook(bookToEdit, editBookedBook);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.updateFilteredReviewList(PREDICATE_SHOW_ALL_REVIEWS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        model.commitBookShelf();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_BOOK_SUCCESS, editBookedBook));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Creates and returns a {@code Book} with the details of {@code bookToEdit}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * editBooked with {@code editBookDescriptor}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static Book createEditedBook(Book bookToEdit, EditBookDescriptor editBookDescriptor) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assert bookToEdit !\u003d null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookName updatedName \u003d editBookDescriptor.getName().orElse(bookToEdit.getBookName());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Author updatedAuthor \u003d editBookDescriptor.getAuthor().orElse(bookToEdit.getAuthor());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Rating updatedRating \u003d editBookDescriptor.getRating().orElse(bookToEdit.getRating());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editBookDescriptor.getTags().orElse(bookToEdit.getTags());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new Book(updatedName, updatedAuthor, updatedRating, updatedTags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!(other instanceof EditBookCommand)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand e \u003d (EditBookCommand) other;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 editBookDescriptor.equals(e.editBookDescriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Stores the details to editBook the book with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * corresponding field value of the book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static class EditBookDescriptor {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        private BookName name;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        private Author author;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        private Rating rating;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public EditBookDescriptor() {}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public EditBookDescriptor(EditBookDescriptor toCopy) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            setAuthor(toCopy.author);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            setRating(toCopy.rating);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * Returns true if at least one field is editBooked."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, author, rating, tags);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setName(BookName name) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public Optional\u003cBookName\u003e getName() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setAuthor(Author author) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            this.author \u003d author;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public Optional\u003cAuthor\u003e getAuthor() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return Optional.ofNullable(author);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setRating(Rating rating) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            this.rating \u003d rating;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public Optional\u003cRating\u003e getRating() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return Optional.ofNullable(rating);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            if (!(other instanceof EditBookDescriptor)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            EditBookDescriptor e \u003d (EditBookDescriptor) other;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                    \u0026\u0026 getAuthor().equals(e.getAuthor())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                    \u0026\u0026 getRating().equals(e.getRating())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 19,
      "Jiangqinhua": 1,
      "0blivious": 214
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListAllReviewsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_REVIEWS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * Lists all reviews in the book shelf to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class ListAllReviewsCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listAllReviews\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all reviews!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        model.updateFilteredReviewList(PREDICATE_SHOW_ALL_REVIEWS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        model.setSelectedBook(null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListBookCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.BookListFilterPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Lists all books with the tags and rating desired."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class ListBookCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listBook\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": list all books whose names, author, tags and rating\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \" match the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"All keywords should be single words.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"Keywords for book names contain only alphanumeric characters or \u0027*\u0027, \u0027,\u0027, \u0027.\u0027, \u0027?\u0027, \u0027\u0027\u0027, \u0027()\u0027, \u0027\u0026\u0027.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"Keywords for author name or tags should contain only alphanumeric characters.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"Keywords for rating should contain only integer number ranging from 0 to 10.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"Parameters: [n/BOOKNAME]...[a/AUTHOR]...[t/TAGS]...[m/RATING]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" t/textbook m/5\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all books satisfy the requirement\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final BookListFilterPredicate predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ListBookCommand(BookListFilterPredicate predicate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        model.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                String.format(Messages.MESSAGE_BOOKS_LISTED_OVERVIEW, model.getFilteredBookList().size()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                || (other instanceof ListBookCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 predicate.equals(((ListBookCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListReviewCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Lists the review of the book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class ListReviewCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listReview\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            + \": Lists the reviews of the book identified by the index number used in the displayed book list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed reviews of book number: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public ListReviewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        List\u003cBook\u003e filteredBookList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredBookList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Book selectedBook \u003d filteredBookList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        model.setSelectedBook(selectedBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                || (other instanceof ListReviewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ListReviewCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 28,
      "EleenYang": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": " * Reverts the {@code model}\u0027s book shelf to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (!model.canRedoBookShelf()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        model.redoBookShelf();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectReviewCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * Selects a review"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class SelectReviewCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"selectReview\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            + \": Selects the review identified by the index number used in the displayed book list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            + \"The selected review message will be shown in the browser panel in the right.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Selected review: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public SelectReviewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        List\u003cReview\u003e filteredReviewList \u003d model.getFilteredReviewList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredReviewList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_REVIEW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Review selectedReview \u003d filteredReviewList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        model.setSelectedReview(selectedReview);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                || (other instanceof SelectReviewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectReviewCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortBookCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": " * Sorts all books in provided order."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "public class SortBookCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sortBook\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": sort all books in certain order\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        + \"the specified keywords (case-insensitive).\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        + \"Parameters: st/TYPE... [o/ORDER] [o1/ORDER] [o2/ORDER] [o3/ORDER]\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        + \"TYPE can only be either author, name or rating, \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        + \"you can specify all three TYPEs at same time.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        + \"ORDER can only be asc or des, sub Order o1, o2, o3 are corresponding to first Order,\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        + \" second order and third order respectively \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" st/rating \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted successfully\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private final List\u003cString\u003e types;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private final String mainOrder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private final Map\u003cString, String\u003e subOrders;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public SortBookCommand(List\u003cString\u003e types, String mainOrder, Map\u003cString, String\u003e subOrders) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        requireAllNonNull(types);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        this.types \u003d types;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        this.mainOrder \u003d mainOrder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        this.subOrders \u003d subOrders;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (model.getBookShelf().getBookList().size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_BOOK_LIST_EMPTY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        model.sortBook(types, mainOrder, subOrders);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        model.commitBookShelf();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            || (other instanceof SortBookCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            \u0026\u0026 (this.mainOrder \u003d\u003d null \u0026\u0026 ((SortBookCommand) other).mainOrder \u003d\u003d null"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            || this.mainOrder.equals(((SortBookCommand) other).mainOrder))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            \u0026\u0026 this.subOrders.equals(((SortBookCommand) other).subOrders)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            \u0026\u0026 this.types.equals(((SortBookCommand) other).types));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 65,
      "0blivious": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SummaryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Format summary for books in the bookshelf."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class SummaryCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"summary\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": A brief summary of books you\u0027ve read.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String MESSAGE_NO_AUTHOR_PREFERED \u003d \"You don\u0027t seem to prefer certain author.\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String MESSAGE_NO_RATING_GIVEN \u003d \"You haven\u0027t rated any book yet.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String MESSAGE_NO_TAG_PREFERED \u003d \"You don\u0027t seem to prefer certain genre.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String feedback \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        feedback +\u003d \"You\u0027ve read \" + model.getNumberOfBooks() + \" books.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e lovedAuthors \u003d model.getMostReadAuthors();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (!lovedAuthors.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            feedback +\u003d getAutorRelatedSummary(model, lovedAuthors);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            feedback +\u003d MESSAGE_NO_AUTHOR_PREFERED;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String highestRating \u003d model.getHighestMark();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (highestRating !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            feedback +\u003d getRatingRelatedSummary(model, highestRating);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            feedback +\u003d MESSAGE_NO_RATING_GIVEN;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e lovedTags \u003d model.getMostReadTags();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (!lovedTags.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            feedback +\u003d getTagRelatedSummary(model, lovedTags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            feedback +\u003d MESSAGE_NO_TAG_PREFERED;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return new CommandResult(feedback, false, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static String getAutorRelatedSummary(Model model, List\u003cString\u003e lovedAuthors) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String feedback \u003d \"You prefer books by \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        int authorComma \u003d lovedAuthors.size() - 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (String authorName : lovedAuthors) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            feedback +\u003d authorName + \", as you\u0027ve read: \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            List\u003cString\u003e bookByThisAuthor \u003d model.getBooksByAuthor(authorName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            int bookComma \u003d bookByThisAuthor.size() - 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            for (String bookName : bookByThisAuthor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                feedback +\u003d bookName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                if (bookComma \u003e 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                    feedback +\u003d \", \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                    bookComma--;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (authorComma \u003e 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                feedback +\u003d \", \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                authorComma--;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            feedback +\u003d \"\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static String getRatingRelatedSummary(Model model, String highestRating) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String feedback \u003d \"Book(s) receive a rating of \" + highestRating + \" from you: \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e bookHighestRated \u003d model.getBooksWithHighestMark(highestRating);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        int bookComma \u003d bookHighestRated.size() - 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (String bookName : bookHighestRated) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            feedback +\u003d bookName;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (bookComma \u003e 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                feedback +\u003d \", \";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                bookComma--;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        feedback +\u003d \"\\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static String getTagRelatedSummary(Model model, List\u003cString\u003e lovedTags) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String feedback \u003d \"You prefer books that you labeled as \";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        int tagComma \u003d lovedTags.size() - 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (String tagContent : lovedTags) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            feedback +\u003d tagContent + \"(including \";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            List\u003cString\u003e bookWithTag \u003d model.getBooksWithTag(tagContent);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            int bookComma \u003d bookWithTag.size() - 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            for (String bookName : bookWithTag) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                feedback +\u003d bookName;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                if (bookComma \u003e 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                    feedback +\u003d \", \";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                    bookComma--;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            feedback +\u003d \")\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (tagComma \u003e 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                feedback +\u003d \",\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            feedback +\u003d \"\\n\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": " * Reverts the {@code model}\u0027s book shelf to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (!model.canUndoBookShelf()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        model.undoBookShelf();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddBookCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.AddBookCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Parses input arguments and creates a new AddBookCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class AddBookCommandParser implements Parser\u003cAddBookCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddBookCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * and returns an AddBookCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public AddBookCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AUTHOR, PREFIX_RATING, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_AUTHOR, PREFIX_RATING)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                || !arePrefixesUnique(argMultimap, PREFIX_NAME, PREFIX_AUTHOR, PREFIX_RATING)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookName name \u003d ParserUtil.parseBookName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Author author \u003d ParserUtil.parseAuthor(argMultimap.getValue(PREFIX_AUTHOR).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Rating rating \u003d ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book book \u003d new Book(name, author, rating, tagList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new AddBookCommand(book);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if none of the prefixes appear more than once in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static boolean arePrefixesUnique(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e (argumentMultimap.getNumberOfPrefix(prefix) \u003d\u003d 1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "0blivious": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddReviewCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.AddReviewCommand.MAX_REVIEWMESSAGE_LENGTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.AddReviewCommand.MESSAGE_REVIEW_LENGTH_EXCEEDED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REVIEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REVIEWTITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.commands.AddReviewCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.ReviewTitle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * Parses input arguments and creates a new AddReviewCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class AddReviewCommandParser implements Parser\u003cAddReviewCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddReviewCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * and returns an AddReviewCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public AddReviewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_REVIEWTITLE, PREFIX_REVIEW);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_REVIEWTITLE, PREFIX_REVIEW)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                || !arePrefixesUnique(argMultimap, PREFIX_NAME, PREFIX_REVIEWTITLE, PREFIX_REVIEW)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddReviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        BookName name \u003d ParserUtil.parseBookName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ReviewTitle title \u003d ParserUtil.parseReviewTitle(argMultimap.getValue(PREFIX_REVIEWTITLE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        String reviewMessage \u003d ParserUtil.parseReview(argMultimap.getValue(PREFIX_REVIEW).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        if (reviewMessage.length() \u003e MAX_REVIEWMESSAGE_LENGTH) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new ParseException(MESSAGE_REVIEW_LENGTH_EXCEEDED);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Review review \u003d new Review(title, name, reviewMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return new AddReviewCommand(review);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Returns true if none of the prefixes appear more than once in the given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private static boolean arePrefixesUnique(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e (argumentMultimap.getNumberOfPrefix(prefix) \u003d\u003d 1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns the number of prefix present {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public int getNumberOfPrefix(Prefix prefix) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return values.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "0blivious": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BookShelfParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.commands.AddBookCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.commands.AddReviewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.commands.DeleteBookCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.commands.DeleteReviewCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.commands.ListAllReviewsCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.commands.ListBookCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.commands.ListReviewCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.commands.SelectReviewCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.logic.commands.SortBookCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.SummaryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookShelfParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        case AddBookCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return new AddBookCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        case AddReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return new AddReviewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        case DeleteBookCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return new DeleteBookCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        case DeleteReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            return new DeleteReviewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        case EditBookCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return new EditBookCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        case ListBookCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return new ListBookCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        case ListAllReviewsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            return new ListAllReviewsCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        case ListReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return new ListReviewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        case SelectReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            return new SelectReviewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        case SummaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return new SummaryCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        case SortBookCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return new SortBookCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 17,
      "Jiangqinhua": 9,
      "EleenYang": 10,
      "-": 70,
      "0blivious": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Prefix PREFIX_AUTHOR \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Prefix PREFIX_RATING \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final Prefix PREFIX_REVIEW \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final Prefix PREFIX_REVIEWTITLE \u003d new Prefix(\"rt/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final Prefix PREFIX_SORTTYPE \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final Prefix PREFIX_ORDER \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final Prefix PREFIX_FRISTORDER \u003d new Prefix(\"o1/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final Prefix PREFIX_SECONDORDER \u003d new Prefix(\"o2/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final Prefix PREFIX_THIRDORDER \u003d new Prefix(\"o3/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 2,
      "Jiangqinhua": 5,
      "-": 11,
      "0blivious": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteBookCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.DeleteBookCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Parses input arguments and creates a new DeleteBookCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class DeleteBookCommandParser implements Parser\u003cDeleteBookCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteBookCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * and returns an DeleteBookCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public DeleteBookCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return new DeleteBookCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteBookCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "0blivious": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteReviewCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.commands.DeleteReviewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * Parses input arguments and creates a new DeleteReviewCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class DeleteReviewCommandParser implements Parser\u003cDeleteReviewCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteReviewCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * and returns an DeleteReviewCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public DeleteReviewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            return new DeleteReviewCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteReviewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 27,
      "0blivious": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditBookCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Parses input arguments and creates a new EditBookCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class EditBookCommandParser implements Parser\u003cEditBookCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditBookCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * and returns an EditBookCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public EditBookCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AUTHOR, PREFIX_RATING, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditBookCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!arePrefixesUnique(argMultimap, PREFIX_NAME, PREFIX_AUTHOR, PREFIX_RATING)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand.EditBookDescriptor editBookDescriptor \u003d new EditBookCommand.EditBookDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            editBookDescriptor.setName(ParserUtil.parseBookName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AUTHOR).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            editBookDescriptor.setAuthor(ParserUtil.parseAuthor(argMultimap.getValue(PREFIX_AUTHOR).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RATING).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            editBookDescriptor.setRating(ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editBookDescriptor::setTags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!editBookDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new ParseException(EditBookCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new EditBookCommand(index, editBookDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if none of the prefixes appear more than once in the given"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static boolean arePrefixesUnique(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e ((argumentMultimap.getNumberOfPrefix(prefix) \u003d\u003d 1)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                || (argumentMultimap.getNumberOfPrefix(prefix) \u003d\u003d 0)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListBookCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.ListBookCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.BookListFilterPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Parses input arguments and creates a new ListBookCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class ListBookCommandParser implements Parser\u003cListBookCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListBookCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * and returns an ListBookCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ListBookCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AUTHOR, PREFIX_TAG, PREFIX_RATING);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (!areKeywordsSingleWords(argMultimap, PREFIX_NAME, PREFIX_AUTHOR, PREFIX_TAG, PREFIX_RATING)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e names \u003d argMultimap.getAllValues(PREFIX_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e authors \u003d argMultimap.getAllValues(PREFIX_AUTHOR);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e tags \u003d argMultimap.getAllValues(PREFIX_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e ratings \u003d argMultimap.getAllValues(PREFIX_RATING);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate bookFilter \u003d new BookListFilterPredicate(names, authors, tags, ratings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return new ListBookCommand(bookFilter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns true if all keywords provided are single words."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static boolean areKeywordsSingleWords(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e isKeywordSingleWord(argumentMultimap, prefix));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns true if for a certain type of keywords, all are single words."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static boolean isKeywordSingleWord(ArgumentMultimap argumentMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e keywords \u003d argumentMultimap.getAllValues(prefix);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return keywords.stream().allMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            String preppedWord \u003d keyword.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return preppedWord.split(\"\\\\s+\").length \u003d\u003d 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListReviewCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.ListReviewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Parses input arguments and creates a new ListReviewCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class ListReviewCommandParser implements Parser\u003cListReviewCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListReviewCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * and returns an ListReviewCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ListReviewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            return new ListReviewCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListReviewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 3,
      "EleenYang": 5,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.ReviewTitle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Parses a {@code String name} into a {@code BookName}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @throws ParseException if the given {@code BookName} is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static BookName parseBookName(String name) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!BookName.isValidBookName(trimmedName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new ParseException(BookName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new BookName(trimmedName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * * Parses a {@code String name} into a {@code Author}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @throws ParseException if the given {@code BookName} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static Author parseAuthor(String name) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!Author.isValidAuthor(trimmedName)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new ParseException(Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new Author(trimmedName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Parses a {@code String reviewMessage} into a {@code String parsedReviewMessage}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * @throws ParseException if the given {@code review} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static String parseReview(String reviewMessage) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(reviewMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        String trimmedReview \u003d reviewMessage.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return trimmedReview;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Parses a {@code String name} into a {@code ReviewTitle}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * @throws ParseException if the given {@code ReviewTitle} is invalid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static ReviewTitle parseReviewTitle(String name) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        if (!ReviewTitle.isValidReviewTitle(trimmedName)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new ParseException(ReviewTitle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return new ReviewTitle(trimmedName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Parses a {@code String rating} into a {@code Rating}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @throws ParseException if the given {@code Rating} is invalid."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static Rating parseRating(String rating) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String trimmedRating \u003d rating.trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!Rating.isValidRating(trimmedRating)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new ParseException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new Rating(trimmedRating.replaceFirst(\"^0+(?!$)\", \"\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 22,
      "-": 90,
      "0blivious": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SelectReviewCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.commands.SelectReviewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * Parses input arguments and creates a new SelectReviewCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class SelectReviewCommandParser implements Parser\u003cSelectReviewCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectReviewCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * and returns an SelectReviewCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public SelectReviewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            return new SelectReviewCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectReviewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortBookCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FRISTORDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SECONDORDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SORTTYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_THIRDORDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.logic.commands.SortBookCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": " * Parses input arguments and creates a new SortBookCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "public class SortBookCommandParser implements Parser\u003cSortBookCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String ASCENDING \u003d \"asc\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String DESCENDING \u003d \"des\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String AUTHOR \u003d \"author\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String BOOKNAME \u003d \"name\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String RATING \u003d \"rating\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private static final int FIRST \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private static final int SECOND \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private static final int THIRD \u003d 2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private static Map\u003cString, String\u003e subOrder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private static List\u003cString\u003e sortTypeSet;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortBookCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * and returns an SortBookCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public SortBookCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SORTTYPE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            PREFIX_ORDER, PREFIX_FRISTORDER, PREFIX_SECONDORDER, PREFIX_THIRDORDER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        subOrder \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypeSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_SORTTYPE).isPresent()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            || !isValidSortType(argMultimap.getAllValues(PREFIX_SORTTYPE))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            || !isValidSortOrder(argMultimap.getValue(PREFIX_ORDER).isPresent()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                ? argMultimap.getValue(PREFIX_ORDER).get()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                : null)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            || !isValidSortOrder(argMultimap.getValue(PREFIX_FRISTORDER).isPresent()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                ? argMultimap.getValue(PREFIX_FRISTORDER).get()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                : null)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            || !isValidSortOrder(argMultimap.getValue(PREFIX_SECONDORDER).isPresent()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                ? argMultimap.getValue(PREFIX_SECONDORDER).get()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                : null)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            || !isValidSortOrder(argMultimap.getValue(PREFIX_THIRDORDER).isPresent()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                ? argMultimap.getValue(PREFIX_THIRDORDER).get()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                : null)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            || !isTypeAndSubOrderMatch(argMultimap)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        String mainOrder \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ORDER).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            mainOrder \u003d argMultimap.getValue(PREFIX_ORDER).get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return new SortBookCommand(sortTypeSet, mainOrder, subOrder);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Check whether sub order is more than current sorting types."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param argMultimap input formatter"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @return true if is it valid sub order, otherwise false."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private static Boolean isTypeAndSubOrderMatch(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FRISTORDER).isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            subOrder.put(sortTypeSet.get(FIRST).toLowerCase(), argMultimap.getValue(PREFIX_FRISTORDER).get());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SECONDORDER).isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            if (sortTypeSet.size() \u003c 2) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            subOrder.put(sortTypeSet.get(SECOND).toLowerCase(), argMultimap.getValue(PREFIX_SECONDORDER).get());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (argMultimap.getValue(PREFIX_THIRDORDER).isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            if (sortTypeSet.size() \u003c 3) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            subOrder.put(sortTypeSet.get(THIRD).toLowerCase(), argMultimap.getValue(PREFIX_THIRDORDER).get());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Checks the sort types are valid and assign to sortTypeSet if it is."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param sortTypes list of attributes types"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @return true if sort types are valid, otherwise return false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private static boolean isValidSortType(List\u003cString\u003e sortTypes) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        for (String type : sortTypes) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            if ((!type.equalsIgnoreCase(AUTHOR)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                \u0026\u0026 !type.equalsIgnoreCase(BOOKNAME)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                \u0026\u0026 !type.equalsIgnoreCase(RATING))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                || sortTypeSet.contains(type)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            sortTypeSet.add(type.toLowerCase());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private static boolean isValidSortOrder(String order) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return order \u003d\u003d null"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            || order.equalsIgnoreCase(ASCENDING)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            || order.equalsIgnoreCase(DESCENDING);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/model/BookShelf.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.UniqueBookList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.UniqueReviewList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Wraps all data at the book-shelf level"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Duplicates are not allowed (by .isSameBook comparison)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookShelf implements ReadOnlyBookShelf {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final UniqueBookList books;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private final UniqueReviewList reviews;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        books \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        reviews \u003d new UniqueReviewList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookShelf() {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Creates an BookShelf using the Books in the {@code toBeCopied}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookShelf(ReadOnlyBookShelf toBeCopied) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Replaces the contents of the book list with {@code books}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code books} must not contain duplicate books."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBooks(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.books.setBooks(books);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Replaces the contents of the review list with {@code reviews}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code reviews} must not contain duplicate reviews."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void setReviews(List\u003cReview\u003e reviews) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        this.reviews.setReviews(reviews);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Resets the existing data of this {@code BookShelf} with {@code newData}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void resetData(ReadOnlyBookShelf newData) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        setBooks(newData.getBookList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        setReviews(newData.getReviewList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    //// book-level operations"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if a book with the same identity as {@code book} exists in the book shelf."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return books.contains(book);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Returns true if a review with the same identity as {@code review} exists in the book shelf."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public boolean hasReview(Review review) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(review);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return reviews.contains(review);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Adds a book to the book shelf."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The book must not already exist in the book shelf."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void addBook(Book b) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        books.add(b);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Adds a review to the book shelf."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * The book must not already exist in the book shelf."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void addReview(Review review) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        reviews.add(review);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Replaces the given book {@code target} in the list with {@code editedBook}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code target} must exist in the book shelf."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the book shelf."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(editedBook);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        books.setBook(target, editedBook);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Replaces the given review {@code target} in the list with {@code editedReview}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * {@code target} must exist in the book shelf."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * The review identity of {@code editedReview} must not be the same as another existing review in the book shelf."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void setReview(Review target, Review editedReview) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(editedReview);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        reviews.setReview(target, editedReview);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Removes {@code key} from this {@code BookShelf}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code key} must exist in the book shelf."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void removeBook(Book key) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        books.remove(key);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Removes {@code key} from this {@code BookShelf}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * {@code key} must exist in the book shelf."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void removeReview(Review key) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        reviews.remove(key);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Removes {@code tag} from a {@code book}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void removeTagFromBook(Tag tag, Book book) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003cTag\u003e(book.getTags());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!tags.remove(tag)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book newBook \u003d new Book(book.getBookName(), book.getAuthor(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                book.getRating(), tags);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        setBook(book, newBook);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Remove {@code tag} from all book in the list"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void removeTag(Tag tag) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        for (Book p: books) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            removeTagFromBook(tag, p);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Sorts {@code books} in bookCard with {@code order}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param types sorting method"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param mainOrder order that apply to all types"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param subOrder order that apply only to corresponding type."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void sort(List\u003cString\u003e types, String mainOrder, Map\u003cString, String\u003e subOrder) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        books.sortBooks(types, mainOrder, subOrder);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Notifies listeners that the book shelf has been modified."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return books.asUnmodifiableObservableList().size() + \" books\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public ObservableList\u003cBook\u003e getBookList() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return books.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public ObservableList\u003cReview\u003e getReviewList() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return reviews.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                || (other instanceof BookShelf // instanceof handles nulls"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 books.equals(((BookShelf) other).books)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u0026\u0026 books.equals(((BookShelf) other).books))"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u0026\u0026 reviews.equals(((BookShelf) other).reviews);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return books.hashCode();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 54,
      "Jiangqinhua": 12,
      "EleenYang": 3,
      "0blivious": 166
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    Predicate\u003cBook\u003e PREDICATE_SHOW_ALL_BOOKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    Predicate\u003cReview\u003e PREDICATE_SHOW_ALL_REVIEWS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns the user prefs\u0027 book shelf file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    Path getBookShelfFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Sets the user prefs\u0027 book shelf file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    void setBookShelfFilePath(Path bookShelfFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Replaces book shelf data with the data in {@code bookShelf}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    void setBookShelf(ReadOnlyBookShelf bookShelf);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /** Returns the BookShelf */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    ReadOnlyBookShelf getBookShelf();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if a book with the same identity as {@code book} exists in the book shelf."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    boolean hasBook(Book book);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Returns true if a book with the same identity as {@code book} exists in the book shelf."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    boolean hasReview(Review review);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Deletes the given book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The book must exist in the book shelf."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    void deleteBook(Book target);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Deletes the given book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * The book must exist in the book shelf."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    void deleteReview(Review target);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Adds the given book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code book} must not already exist in the book shelf."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    void addBook(Book book);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Adds the given book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * {@code book} must not already exist in the book shelf."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    void addReview(Review review);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Replaces the given book {@code target} with {@code editedBook}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code target} must exist in the book shelf."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the book shelf."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    void setBook(Book target, Book editedBook);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Replaces the given review {@code target} in the list with {@code editedReview}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * {@code target} must exist in the book shelf."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * The review identity of {@code editedReview} must not be the same as another existing review in the book shelf."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    void setReview(Review target, Review editedReview);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /** Returns an unmodifiable view of the filtered book list */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    ObservableList\u003cBook\u003e getFilteredBookList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered book list */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    ObservableList\u003cReview\u003e getFilteredReviewList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Updates the filter of the filtered book list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    void updateFilteredBookList(Predicate\u003cBook\u003e predicate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Updates the filter of the filtered book list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    void updateFilteredReviewList(Predicate\u003cReview\u003e predicate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if the model has previous book shelf states to restore."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    boolean canUndoBookShelf();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if the model has undone book shelf states to restore."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    boolean canRedoBookShelf();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Restores the model\u0027s book shelf to its previous state."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    void undoBookShelf();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Restores the model\u0027s book shelf to its previously undone state."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    void redoBookShelf();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Saves the current book shelf state for undo/redo."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    void commitBookShelf();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Selected book in the filtered book list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * null if no book is selected."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    ReadOnlyProperty\u003cBook\u003e selectedBookProperty();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Selected book in the filtered book list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * null if no book is selected."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    ReadOnlyProperty\u003cReview\u003e selectedReviewProperty();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns the selected book in the filtered book list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * null if no book is selected."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    Book getSelectedBook();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns the selected review in the filtered review list."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * null if no review is selected."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    Review getSelectedReview();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Sets the selected book in the filtered book list."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    void setSelectedBook(Book book);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Sets the selected book in the filtered review list."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    void setSelectedReview(Review review);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Delete the tag{@code tag} of all contacts in the phone book"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    void deleteTag(Tag tag);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Sort the Book list into different order"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    void sortBook(List\u003cString\u003e types, String mainOrder, Map\u003cString, String\u003e subOrder);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Get total number of books"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    int getNumberOfBooks();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Get the most read authors."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    List\u003cString\u003e getMostReadAuthors();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Get books by certain author."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    List\u003cString\u003e getBooksByAuthor(String authorName);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Get the highest marks."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    String getHighestMark();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Get the books of the highest marks."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    List\u003cString\u003e getBooksWithHighestMark(String mark);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Get the most read tags."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    List\u003cString\u003e getMostReadTags();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Get the books with the most read tags"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    List\u003cString\u003e getBooksWithTag(String tagContent);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 41,
      "Jiangqinhua": 13,
      "EleenYang": 19,
      "-": 100,
      "0blivious": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Represents the in-memory model of the book shelf data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private final VersionedBookShelf versionedBookShelf;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final FilteredList\u003cBook\u003e filteredBooks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private final FilteredList\u003cReview\u003e filteredReviews;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final SimpleObjectProperty\u003cBook\u003e selectedBook \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private final SimpleObjectProperty\u003cReview\u003e selectedReview \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Initializes a ModelManager with the given book shelf and userPrefs."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ModelManager(ReadOnlyBookShelf bookShelf, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        requireAllNonNull(bookShelf, userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        logger.fine(\"Initializing with book shelf: \" + bookShelf + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        versionedBookShelf \u003d new VersionedBookShelf(bookShelf);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        filteredBooks \u003d new FilteredList\u003c\u003e(versionedBookShelf.getBookList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        filteredReviews \u003d new FilteredList\u003c\u003e(versionedBookShelf.getReviewList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        filteredBooks.addListener(this::ensureSelectedBookIsValid);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        filteredReviews.addListener(this::ensureSelectedReviewIsValid);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this(new BookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Path getBookShelfFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return userPrefs.getBookShelfFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void setBookShelfFilePath(Path bookShelfFilePath) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        requireNonNull(bookShelfFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        userPrefs.setBookShelfFilePath(bookShelfFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BookShelf \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void setBookShelf(ReadOnlyBookShelf bookShelf) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        versionedBookShelf.resetData(bookShelf);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public ReadOnlyBookShelf getBookShelf() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return versionedBookShelf;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return versionedBookShelf.hasBook(book);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public boolean hasReview(Review review) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(review);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return versionedBookShelf.hasReview(review);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void deleteBook(Book target) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        versionedBookShelf.removeBook(target);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void deleteReview(Review target) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        versionedBookShelf.removeReview(target);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void addBook(Book book) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        versionedBookShelf.addBook(book);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void addReview(Review review) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        versionedBookShelf.addReview(review);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        updateFilteredReviewList(PREDICATE_SHOW_ALL_REVIEWS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireAllNonNull(target, editedBook);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        versionedBookShelf.setBook(target, editedBook);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void setReview(Review target, Review editedReview) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireAllNonNull(target, editedReview);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        versionedBookShelf.setReview(target, editedReview);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        versionedBookShelf.removeTag(tag);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void sortBook(List\u003cString\u003e types, String mainOrder, Map\u003cString, String\u003e subOrder) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        versionedBookShelf.sort(types, mainOrder, subOrder);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Book List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return filteredBooks;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public ObservableList\u003cReview\u003e getFilteredReviewList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return filteredReviews;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void updateFilteredBookList(Predicate\u003cBook\u003e predicate) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        filteredBooks.setPredicate(predicate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void updateFilteredReviewList(Predicate\u003cReview\u003e predicate) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        filteredReviews.setPredicate(predicate);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public boolean canUndoBookShelf() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return versionedBookShelf.canUndo();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public boolean canRedoBookShelf() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return versionedBookShelf.canRedo();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void undoBookShelf() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        versionedBookShelf.undo();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void redoBookShelf() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        versionedBookShelf.redo();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void commitBookShelf() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        versionedBookShelf.commit();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public ReadOnlyProperty\u003cBook\u003e selectedBookProperty() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return selectedBook;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public ReadOnlyProperty\u003cReview\u003e selectedReviewProperty() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return selectedReview;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Book getSelectedBook() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return selectedBook.getValue();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public Review getSelectedReview() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return selectedReview.getValue();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setSelectedBook(Book book) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (book !\u003d null \u0026\u0026 !filteredBooks.contains(book)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        selectedBook.setValue(book);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void setSelectedReview(Review review) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        if (review !\u003d null \u0026\u0026 !filteredReviews.contains(review)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        selectedReview.setValue(review);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Summary \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public int getNumberOfBooks() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return versionedBookShelf.getBookList().size();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public List\u003cString\u003e getMostReadAuthors() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Map\u003cString, Integer\u003e authorCounts \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e authorNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cBook\u003e bookList \u003d versionedBookShelf.getBookList();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        //count books written by each author"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (Book book : bookList) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            String authorName \u003d book.getAuthor().fullName;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            Integer authorCount \u003d authorCounts.get(authorName);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (authorCount \u003d\u003d null) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                authorCounts.put(authorName, 1);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                authorCounts.put(authorName, authorCount + 1);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        //return books written by authors appear more than once."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (String authorName: authorCounts.keySet()) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (authorCounts.get(authorName) \u003e 1) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                authorNames.add(authorName);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return authorNames;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public List\u003cString\u003e getBooksByAuthor(String authorName) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e bookNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cBook\u003e booksInShelf \u003d versionedBookShelf.getBookList();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (Book book : booksInShelf) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (authorName.equalsIgnoreCase(book.getAuthor().fullName)) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                bookNames.add(book.getBookName().fullName);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return bookNames;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public String getHighestMark() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        int highestMark \u003d -1;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cBook\u003e booksInShelf \u003d versionedBookShelf.getBookList();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (Book book : booksInShelf) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            int rating \u003d parseInt(book.getRating().value);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            highestMark \u003d rating \u003e highestMark ? rating : highestMark;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return highestMark \u003d\u003d -1 ? null : Integer.toString(highestMark);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public List\u003cString\u003e getBooksWithHighestMark(String mark) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e bookNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cBook\u003e booksInShelf \u003d versionedBookShelf.getBookList();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (Book book : booksInShelf) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (book.getRating().value.equals(mark)) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                bookNames.add(book.getBookName().fullName);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return bookNames;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public List\u003cString\u003e getMostReadTags() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Map\u003cString, Integer\u003e tagCounts \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e tagContents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cBook\u003e bookList \u003d versionedBookShelf.getBookList();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        //count books written by each author"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (Book book : bookList) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            Set\u003cTag\u003e bookTags \u003d book.getTags();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            for (Tag tag: bookTags) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                String tagContent \u003d tag.tagName;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Integer tagCount \u003d tagCounts.get(tagContent);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                if (tagCount \u003d\u003d null) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                    tagCounts.put(tagContent, 1);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                    tagCounts.put(tagContent, tagCount + 1);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        //return books written by authors appear more than once."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (String tagContent: tagCounts.keySet()) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (tagCounts.get(tagContent) \u003e 1) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                tagContents.add(tagContent);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return tagContents;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public List\u003cString\u003e getBooksWithTag(String tagContent) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e bookNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cBook\u003e booksInShelf \u003d versionedBookShelf.getBookList();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (Book book : booksInShelf) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            boolean containTag \u003d book.getTags().stream().map(x -\u003e x.tagName).anyMatch(y -\u003e y.equals(tagContent));"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (containTag) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                bookNames.add(book.getBookName().fullName);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return bookNames;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Ensures {@code selectedBook} is a valid book in {@code filteredBooks}."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void ensureSelectedBookIsValid(ListChangeListener.Change\u003c? extends Book\u003e change) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            if (selectedBook.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                // null is always a valid selected book, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            boolean wasSelectedBookReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedBook.getValue());"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            if (wasSelectedBookReplaced) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                // Update selectedBook to its new value."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedBook.getValue());"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                selectedBook.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            boolean wasSelectedBookRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                    .anyMatch(removedBook -\u003e selectedBook.getValue().isSameBook(removedBook));"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            if (wasSelectedBookRemoved) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                // Select the book that came before it in the list,"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                // or clear the selection if there is no such book."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                selectedBook.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Ensures {@code selectedBook} is a valid book in {@code filteredBooks}."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private void ensureSelectedReviewIsValid(ListChangeListener.Change\u003c? extends Review\u003e change) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            if (selectedReview.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                // null is always a valid selected review, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            boolean wasSelectedReviewReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedReview.getValue());"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            if (wasSelectedReviewReplaced) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                // Update selectedReview to its new value."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedReview.getValue());"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                selectedReview.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            boolean wasSelectedReviewRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                    .anyMatch(removedReview -\u003e selectedReview.getValue().equals(removedReview));"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            if (wasSelectedReviewRemoved) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                // Select the review that came before it in the list,"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                // or clear the selection if there is no such review."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                selectedReview.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return versionedBookShelf.equals(other.versionedBookShelf)"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 filteredBooks.equals(other.filteredBooks)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedBook.get(), other.selectedBook.get());"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return filteredBooks.toString() + filteredReviews.toString();"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 67,
      "Jiangqinhua": 26,
      "EleenYang": 122,
      "-": 156,
      "0blivious": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyBookShelf.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Unmodifiable view of an book shelf"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public interface ReadOnlyBookShelf extends Observable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns an unmodifiable view of the book list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * This list will not contain any duplicate books."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    ObservableList\u003cBook\u003e getBookList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns an unmodifiable view of the review list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * This list will not contain any duplicate reviews."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    ObservableList\u003cReview\u003e getReviewList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 3,
      "0blivious": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    Path getBookShelfFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Path bookShelfFilePath \u003d Paths.get(\"data\", \"bookshelf.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        setBookShelfFilePath(newUserPrefs.getBookShelfFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public Path getBookShelfFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return bookShelfFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void setBookShelfFilePath(Path bookShelfFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        requireNonNull(bookShelfFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.bookShelfFilePath \u003d bookShelfFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 bookShelfFilePath.equals((o.bookShelfFilePath));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return Objects.hash(guiSettings, bookShelfFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + bookShelfFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedBookShelf.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * {@code BookShelf} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class VersionedBookShelf extends BookShelf {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final List\u003cReadOnlyBookShelf\u003e bookShelfStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public VersionedBookShelf(ReadOnlyBookShelf initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelfStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelfStateList.add(new BookShelf(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Saves a copy of the current {@code BookShelf} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelfStateList.add(new BookShelf(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelfStateList.subList(currentStatePointer + 1, bookShelfStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Restores the book list to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        resetData(bookShelfStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Restores the book list to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        resetData(bookShelfStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns true if {@code undo()} has book list states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns true if {@code redo()} has book list states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return currentStatePointer \u003c bookShelfStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!(other instanceof VersionedBookShelf)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf otherVersionedBookShelf \u003d (VersionedBookShelf) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return super.equals(otherVersionedBookShelf)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 bookShelfStateList.equals(otherVersionedBookShelf.bookShelfStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedBookShelf.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            super(\"Current state pointer at start of bookShelfState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            super(\"Current state pointer at end of bookShelfState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 18,
      "0blivious": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Author.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Represents a Author\u0027s name in the book shelf."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAuthor(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class Author {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            \"Author names should only contain alphanumeric characters and spaces, and it should not be blank \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"or longer than 50 characters\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final int MAX_LENGTH \u003d 50;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Constructs a {@code Author}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Author(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        checkArgument(isValidAuthor(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static boolean isValidAuthor(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return test.length() \u003c\u003d MAX_LENGTH \u0026\u0026 test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                || (other instanceof Author // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 fullName.equals(((Author) other).fullName)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 3,
      "0blivious": 11,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Book.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": " * Represents a Book in the bookShelf."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class Book {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final BookName bookName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final Author author;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final Rating rating;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private Set\u003cReview\u003e reviews \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Book(BookName bookName, Author author, Rating rating, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireAllNonNull(bookName, author, rating, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.bookName \u003d bookName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * An alternative constructor with the review field."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public Book(BookName bookName, Author author, Rating rating, Set\u003cTag\u003e tags, Set\u003cReview\u003e reviews) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireAllNonNull(bookName, author, rating, tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        this.bookName \u003d bookName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        this.reviews.addAll(reviews);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookName getBookName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return bookName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Author getAuthor() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return author;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Rating getRating() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Returns an immutable review set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public Set\u003cReview\u003e getReviews() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return Collections.unmodifiableSet(reviews);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public Set\u003cReview\u003e getModifiableReviews() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return reviews.stream().collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if both books of the same book name."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * This defines a weaker notion of equality between two books."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean isSameBook(Book otherBook) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (otherBook \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return otherBook !\u003d null"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 otherBook.getBookName().equals(getBookName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if both books have the same identity and data fields."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * This defines a stronger notion of equality between two books."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!(other instanceof Book)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book otherBook \u003d (Book) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return otherBook.getBookName().equals(getBookName())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 otherBook.getAuthor().equals(getAuthor())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 otherBook.getRating().equals(getRating())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u0026\u0026 otherBook.getTags().equals(getTags())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u0026\u0026 otherBook.getReviews().equals(getReviews());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return Objects.hash(bookName, author, rating, tags, reviews);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        builder.append(getBookName())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .append(\" Author: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .append(getAuthor())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .append(\" Rating: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .append(getRating())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 29,
      "Jiangqinhua": 1,
      "0blivious": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/BookAuthorContainsKeywordPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code AuthorName} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookAuthorContainsKeywordPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public BookAuthorContainsKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (keywords.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(book.getAuthor().fullName, keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                || (other instanceof BookAuthorContainsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 keywords.containsAll(((BookAuthorContainsKeywordPredicate) other).keywords)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 ((BookAuthorContainsKeywordPredicate) other).keywords.containsAll(keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/BookListFilterPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code BookName, BookTag, BookRating} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookListFilterPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Predicate\u003cBook\u003e namePredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Predicate\u003cBook\u003e authorPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Predicate\u003cBook\u003e tagPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Predicate\u003cBook\u003e ratingPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public BookListFilterPredicate(List\u003cString\u003e nameStr,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            List\u003cString\u003e authorStr, List\u003cString\u003e tagStr, List\u003cString\u003e ratingStr) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        namePredicate \u003d new BookNameContainsKeywordsPredicate(nameStr);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        authorPredicate \u003d new BookAuthorContainsKeywordPredicate(authorStr);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        tagPredicate \u003d new BookTagsContainExactKeywordsPredicate(tagStr);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ratingPredicate \u003d new BookRatingMatchesScorePredicate(ratingStr);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return namePredicate.test(book)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 authorPredicate.test(book)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 tagPredicate.test(book)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 ratingPredicate.test(book);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                || (other instanceof BookListFilterPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 namePredicate.equals(((BookListFilterPredicate) other).namePredicate)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 authorPredicate.equals(((BookListFilterPredicate) other).authorPredicate)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 tagPredicate.equals(((BookListFilterPredicate) other).tagPredicate)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 ratingPredicate.equals(((BookListFilterPredicate) other).ratingPredicate)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/BookName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * Represents a Book\u0027s name in the BookShelf."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBookName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookName {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        \"Book names should contains only alphanumeric characters, spaces, \u0027*\u0027, \u0027,\u0027, \u0027.\u0027, \u0027?\u0027, \u0027\u0027\u0027, \u0027()\u0027 and \u0027\u0026\u0027.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        + \"And it should not be blank or have more than 50 characters (space included).\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The first character must not be a whitespace,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\\\\*\\\\,\\\\.\\\\?\\\\\u0027\\\\\u0026\\\\(\\\\) ]*\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final int MAX_LENGTH \u003d 50;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Constructs a {@code BookName}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookName(String name) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        checkArgument(isValidBookName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static boolean isValidBookName(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return test.length() \u003c\u003d MAX_LENGTH \u0026\u0026 test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                || (other instanceof BookName // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 fullName.equals(((BookName) other).fullName)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 3,
      "EleenYang": 5,
      "0blivious": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/BookNameContainsExactKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code BookName} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookNameContainsExactKeywordsPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final String keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookNameContainsExactKeywordsPredicate(BookName bookName) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(bookName);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.keywords \u003d bookName.fullName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return keywords.equalsIgnoreCase(book.getBookName().fullName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                || (other instanceof BookNameContainsExactKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 keywords.equals(((BookNameContainsExactKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return keywords;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 5,
      "0blivious": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/BookNameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code BookName} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookNameContainsKeywordsPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (keywords.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(book.getBookName().fullName, keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                || (other instanceof BookNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 keywords.containsAll(((BookNameContainsKeywordsPredicate) other).keywords)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 ((BookNameContainsKeywordsPredicate) other).keywords.containsAll(keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 5,
      "0blivious": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/BookRatingMatchesScorePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code BookRating} match the given score."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookRatingMatchesScorePredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public BookRatingMatchesScorePredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (keywords.isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .anyMatch(x -\u003e x.equals(book.getRating().value));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                || (other instanceof BookRatingMatchesScorePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 keywords.containsAll(((BookRatingMatchesScorePredicate) other).keywords)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 ((BookRatingMatchesScorePredicate) other).keywords.containsAll(keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/BookTagsContainExactKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code BookTag} containes all of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookTagsContainExactKeywordsPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public BookTagsContainExactKeywordsPredicate(List\u003cString\u003e inputKeywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        keywords \u003d inputKeywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (keywords.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Iterator\u003cTag\u003e itr \u003d book.getTags().iterator();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        while (itr.hasNext()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            String tagStr \u003d itr.next().tagName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (keywords.stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                    .anyMatch(str -\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                            str.equalsIgnoreCase(tagStr))) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                || (other instanceof BookTagsContainExactKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 keywords.containsAll(((BookTagsContainExactKeywordsPredicate) other).keywords)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 ((BookTagsContainExactKeywordsPredicate) other).keywords.containsAll(keywords)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Rating.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Represents a Book\u0027s rating number in the book shelf."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRating(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class Rating {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            \"Ratings should only contain numbers, and it should be in the range of 0 to 10\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(0?[0-9])|10\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Constructs a {@code Rating}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @param rating A valid rating number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Rating(String rating) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        checkArgument(isValidRating(rating), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        value \u003d rating;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if a given string is a valid rating number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static boolean isValidRating(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                || (other instanceof Rating // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                \u0026\u0026 value.equals(((Rating) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/Review.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * A book review."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class Review {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public final DateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public final ReviewTitle title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public final BookName bookName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public final String reviewMessage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public final String dateCreated;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Constructs a {@code Review}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * @param title the title of the review."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * @param bookname the name of the reviewed book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * @param message the content of the review."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public Review(ReviewTitle title, BookName bookname, String message) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(bookname);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(message);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        this.bookName \u003d bookname;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        reviewMessage \u003d message;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        dateCreated \u003d dateFormat.format(new Date());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Constructs a {@code Review}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * @param title the title of the review."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * @param date the date of the review."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * @param message the content of the review."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public Review(ReviewTitle title, BookName bookName, String date, String message) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(bookName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(message);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        this.bookName \u003d bookName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        reviewMessage \u003d message;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        dateCreated \u003d date;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public ReviewTitle getTitle() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public BookName getBookName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return bookName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public String getReviewMessage() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return reviewMessage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public String getDateCreated() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return dateCreated;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return title.fullName + \"\\r\\nBook: \" + bookName.fullName + \": \\r\\n\" + dateCreated + \": \\r\\n\" + reviewMessage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                || (other instanceof Review // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u0026\u0026 title.equals(((Review) other).title)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u0026\u0026 bookName.equals(((Review) other).bookName)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u0026\u0026 reviewMessage.equals(((Review) other).reviewMessage)); // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return Objects.hash(this.reviewMessage, this.dateCreated);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 83,
      "EleenYang": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/ReviewBookNameContainsExactKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * Tests that a {@code Review}\u0027s {@code Title} matches all of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class ReviewBookNameContainsExactKeywordsPredicate implements Predicate\u003cReview\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private final String keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public ReviewBookNameContainsExactKeywordsPredicate(BookName bookName) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(bookName);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        this.keywords \u003d bookName.fullName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public boolean test(Review review) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return keywords.equalsIgnoreCase(review.getBookName().fullName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                || (other instanceof ReviewBookNameContainsExactKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u0026\u0026 keywords.equals(((ReviewBookNameContainsExactKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/ReviewTitle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * Represents a Review\u0027s title."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidReviewTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class ReviewTitle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        \"Review titles should contains only alphanumeric characters, spaces, \u0027*\u0027, \u0027,\u0027, \u0027.\u0027, \u0027?\u0027, \u0027\u0027\u0027, \u0027()\u0027 and \u0027\u0026\u0027.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        + \"And it should not be blank or have more than 50 characters (space included).\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * The first character of the review title must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\\\\*\\\\,\\\\.\\\\?\\\\\u0027\\\\\u0026\\\\(\\\\) ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final int MAX_LENGTH \u003d 50;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Constructs a {@code ReviewTitle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public ReviewTitle(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        checkArgument(isValidReviewTitle(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static boolean isValidReviewTitle(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return test.length() \u003c\u003d MAX_LENGTH \u0026\u0026 test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                || (other instanceof ReviewTitle // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u0026\u0026 fullName.equals(((ReviewTitle) other).fullName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 55,
      "EleenYang": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/UniqueBookList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.function.BiFunction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.logic.parser.SortBookCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * A list of books that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * A book is considered unique by comparing using {@code Book#isSameBook(Book)}. As such, adding and updating of"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * books uses Book#isSameBook(Book) for equality so as to ensure that the book being added or updated is"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * unique in terms of identity in the UniqueBookList. However, the removal of a book uses Book#equals(Object) so"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * as to ensure that the book with exactly the same fields will be removed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": " *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * @see Book#isSameBook(Book)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class UniqueBookList implements Iterable\u003cBook\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private ObservableList\u003cBook\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final ObservableList\u003cBook\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if the list contains an equivalent book as the given argument."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean contains(Book toCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Adds a book to the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The book must not already exist in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void add(Book toAdd) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Replaces the book {@code target} in the list with {@code editedBook}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireAllNonNull(target, editedBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!target.isSameBook(editedBook) \u0026\u0026 contains(editedBook)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        internalList.set(index, editedBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Removes the equivalent book from the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * The book must exist in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void remove(Book toRemove) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBooks(UniqueBookList replacement) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Replaces the contents of this list with {@code books}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code books} must not contain duplicate books."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBooks(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        requireAllNonNull(books);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (!booksAreUnique(books)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        internalList.setAll(books);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * sort the books in book card in order"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param types need to be sort"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param mainOrder for all types"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param subOrder if mainOrder is not specify and subOrder will replace mainOrder"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void sortBooks(List\u003cString\u003e types,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                          String mainOrder,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                          Map\u003cString, String\u003e subOrder) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        requireAllNonNull(types);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        Comparator\u003cBook\u003e bookComparator \u003d (b1, b2) -\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            Iterator\u003cString\u003e iterator \u003d types.iterator();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            String firstType \u003d iterator.next();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            List\u003cBiFunction\u003cBook, Book, Integer\u003e\u003e functions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            if (firstType.equalsIgnoreCase(SortBookCommandParser.AUTHOR)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                functions.add(this::compareAuthor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                functions.add(this::compareBookName);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                functions.add(this::compareRating);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                return handleSort(b1, b2, iterator,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    firstType,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    SortBookCommandParser.BOOKNAME,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    mainOrder, subOrder,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    functions);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            } else if (firstType.equalsIgnoreCase(SortBookCommandParser.BOOKNAME)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                functions.add(this::compareBookName);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                functions.add(this::compareAuthor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                functions.add(this::compareRating);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                return handleSort(b1, b2, iterator,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    firstType,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    SortBookCommandParser.AUTHOR,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    mainOrder, subOrder,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    functions);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                functions.add(this::compareRating);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                functions.add(this::compareAuthor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                functions.add(this::compareBookName);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                return handleSort(b1, b2, iterator,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    firstType,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    SortBookCommandParser.AUTHOR,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    mainOrder, subOrder,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    functions);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        };"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        internalList.sort(bookComparator);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Compares two books with a sort types base on given bi-function"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param b1 first book that going to be compare"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param b2 second book that going to be compare"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param subOrders hash map that contains sub order"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param mainOrder main order if available"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param currentType current sort type"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param compare bifunction that will change base on different sort type"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @return -1, 0 or 1 depend one value of b1 and b2"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private int sort(Book b1, Book b2,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                     Map\u003cString, String\u003e subOrders,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                     String mainOrder, String currentType,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                     BiFunction\u003cBook, Book, Integer\u003e compare) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        String order \u003d mainOrder;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (order \u003d\u003d null) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            order \u003d subOrders.getOrDefault(currentType, SortBookCommandParser.ASCENDING);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (order.equalsIgnoreCase(SortBookCommandParser.ASCENDING)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return compare.apply(b1, b2);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return compare.apply(b2, b1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Handles the sort."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param b1 first book that going to be compare"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param b2 second book that going to be compare"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param firstType that going to be sort"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param sortType the second type that going to be sort"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param mainOrder order that apply for all types"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param subOrder sub order for individual type"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param functions functions that provide sort function"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @return sort result, -1, 0 or 1 depend one value of b1 and b2"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private int handleSort(Book b1, Book b2,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                           Iterator\u003cString\u003e iterator,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                           String firstType, String sortType,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                           String mainOrder,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                           Map\u003cString, String\u003e subOrder,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                           List\u003cBiFunction\u003cBook, Book, Integer\u003e\u003e functions) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        int result \u003d sort(b1, b2, subOrder, mainOrder, firstType, functions.get(0));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (result !\u003d 0 || !iterator.hasNext()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        String secondType \u003d iterator.next();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (secondType.equalsIgnoreCase(sortType)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return sortByType(b1, b2, iterator, mainOrder, secondType,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                subOrder, functions.get(1), functions.get(2));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return sortByType(b1, b2, iterator, mainOrder, secondType,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                subOrder, functions.get(2), functions.get(1));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Sorts by the given order and type"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param b1 book 1"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param b2 book 2"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param iterator of list of sort type"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param mainOrder of all sort type"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param type of sort type"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param subOrder for individual"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param firstFunction first sort function"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param secondFunction second sort function"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @return compare result -1 , 0 or 1"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private int sortByType(Book b1, Book b2,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                           Iterator\u003cString\u003e iterator,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                           String mainOrder,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                           String type,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                           Map\u003cString, String\u003e subOrder,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                           BiFunction\u003cBook, Book, Integer\u003e firstFunction,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                           BiFunction\u003cBook, Book, Integer\u003e secondFunction) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        int result \u003d sort(b1, b2, subOrder, mainOrder, type, firstFunction);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (result !\u003d 0 || !iterator.hasNext()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return sort(b1, b2, subOrder, mainOrder, iterator.next().toLowerCase(), secondFunction);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private int compareAuthor(Book b1, Book b2) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return b1.getAuthor().fullName.compareToIgnoreCase(b2.getAuthor().fullName);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private int compareBookName(Book b1, Book b2) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return b1.getBookName().fullName.compareToIgnoreCase(b2.getBookName().fullName);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Compares rating between two books"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param b1 first book"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param b2 second book"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @return -1, 0 or 1"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private int compareRating(Book b1, Book b2) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        int result \u003d Integer.valueOf(b1.getRating().value) - Integer.valueOf(b2.getRating().value);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (result \u003e 0) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        } else if (result \u003c 0) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public ObservableList\u003cBook\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Iterator\u003cBook\u003e iterator() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                || (other instanceof UniqueBookList // instanceof handles nulls"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueBookList) other).internalList));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if {@code books} contains only unique books."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private boolean booksAreUnique(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        for (int i \u003d 0; i \u003c books.size() - 1; i++) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            for (int j \u003d i + 1; j \u003c books.size(); j++) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                if (books.get(i).isSameBook(books.get(j))) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 178,
      "0blivious": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/UniqueReviewList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateReviewException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.exceptions.ReviewNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * A list of reviews that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * A review is considered unique by comparing using {@code Review#equals(Review)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class UniqueReviewList implements Iterable\u003cReview\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private final ObservableList\u003cReview\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private final ObservableList\u003cReview\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Returns true if the list contains an equivalent review as the given argument."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public boolean contains(Review toCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Adds a review to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * The review must not already exist in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void add(Review toAdd) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new DuplicateReviewException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Replaces the review {@code target} in the list with {@code editedReview}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * The review identity of {@code editedReview} must not be the same as another existing review in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void setReview(Review target, Review editedReview) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireAllNonNull(target, editedReview);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new ReviewNotFoundException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        if (!target.equals(editedReview) \u0026\u0026 contains(editedReview)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new DuplicateReviewException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        internalList.set(index, editedReview);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Removes the equivalent review from the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * The review must exist in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void remove(Review toRemove) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new ReviewNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void setReviews(UniqueReviewList replacement) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Replaces the contents of this list with {@code reviews}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * {@code reviews} must not contain duplicate reviews."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void setReviews(List\u003cReview\u003e reviews) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        requireAllNonNull(reviews);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        if (!reviewsAreUnique(reviews)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new DuplicateReviewException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        internalList.setAll(reviews);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public ObservableList\u003cReview\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public Iterator\u003cReview\u003e iterator() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                || (other instanceof UniqueReviewList // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueReviewList) other).internalList));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Returns true if {@code reviews} contains only unique reviews."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private boolean reviewsAreUnique(List\u003cReview\u003e reviews) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        for (int i \u003d 0; i \u003c reviews.size() - 1; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            for (int j \u003d i + 1; j \u003c reviews.size(); j++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                if (reviews.get(i).equals(reviews.get(j))) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/exceptions/BookNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Signals that the operation is unable to find the specified book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/exceptions/DuplicateBookException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Signals that the operation will result in duplicate Books (Books are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class DuplicateBookException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public DuplicateBookException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        super(\"Operation would result in duplicate books\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/exceptions/DuplicateReviewException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.model.book.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * Signals that the operation will result in duplicate Reviews"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class DuplicateReviewException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public DuplicateReviewException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        super(\"Operation would result in duplicate reviews\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/book/exceptions/ReviewNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.model.book.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * Signals that the operation is unable to find the specified review."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class ReviewNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \" should only contain alphanumeric characters and spaces, and it should not be blank \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \" or longer than 20 characters\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final int MAX_LENGTH \u003d 20;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return test.length() \u003c\u003d MAX_LENGTH \u0026\u0026 test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 5,
      "-": 51,
      "0blivious": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.ReviewTitle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Contains utility methods for populating {@code BookShelf} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static Book[] getSampleBooks() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new Book[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            new Book(new BookName(\"Madame Bovary\"), new Author(\"Gustave Flaubert\"), new Rating(\"8\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                getTagSet(\"classic\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            new Book(new BookName(\"Pride and Prejudice\"), new Author(\"Jane Austen\"), new Rating(\"6\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                getTagSet(\"novel\", \"romantic\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            new Book(new BookName(\"Green Eggs and Ham\"), new Author(\"Dr Seuss\"), new Rating(\"7\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                getTagSet(\"children\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            new Book(new BookName(\"The Adventures of Tintin\"), new Author(\"Georges Remi\"), new Rating(\"5\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                getTagSet(\"adventure\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            new Book(new BookName(\"Gone Girl\"), new Author(\"Gillian Flynn\"), new Rating(\"4\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                getTagSet(\"thriller\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            new Book(new BookName(\"One Hundred Years of Solitude\"), new Author(\"Garcia Marquez\"), new Rating(\"9\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                getTagSet(\"fantasy\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            new Book(new BookName(\"The Second Sex\"), new Author(\"Beauvoir\"), new Rating(\"9\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                getTagSet()),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            new Book(new BookName(\"The Master and Margaret\"), new Author(\"Mikhail Bulgakov\"), new Rating(\"8\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                getTagSet()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            new Book(new BookName(\"Sense and Sensibility\"), new Author(\"Jane Austen\"), new Rating(\"7\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                getTagSet(\"novel\", \"romantic\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static Review[] getSampleReviews() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return new Review[] {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            new Review(new ReviewTitle(\"A Childhood Favorite\"), new BookName(\"Green Eggs and Ham\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                    \"This is my favorite book when I was a kid. Read it again with my younger brother. \"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            new Review(new ReviewTitle(\"Magical Realism\"), new BookName(\"One Hundred Years of Solitude\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                    \"One of the best books I\u0027ve ever read. \"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            new Review(new ReviewTitle(\"Desperate Housewife\"), new BookName(\"Madame Bovary\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                    \"Poor Emma Bovary. She will never escape the tyranny of her desires, never avoid the \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                            + \"anguish into which her romantic conceits deliver her, never claim the oblivion she \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                            + \"sought from what is perhaps the most excruciating slow suicide ever written.\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            new Review(new ReviewTitle(\"Belief Systems\"), new BookName(\"Pride and Prejudice\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                    \"Most of the characters believe that nothing matters more than social class. Characters \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                            + \"threaten, criticize, ostracize, flatter, marry, venerate and despise other characters, \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                            + \"all for the sake of maintaining or elevating their status in society.\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            new Review(new ReviewTitle(\"Book of a Lifetime\"), new BookName(\"Madame Bovary\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                    \"What leaves me reeling with each re-reading is the use of language.\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                            + \" There can be no doubt as to the reason for Flaubert\u0027s brain popping at\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                            + \" the top of the stairs when he was 58. He broke it scouring for perfect sentences,\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                            + \" words, le mot juste.\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static ReadOnlyBookShelf getSampleBookShelf() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookShelf sampleBs \u003d new BookShelf();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        for (Book sampleBook : getSampleBooks()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            sampleBs.addBook(sampleBook);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (Review sampleReview : getSampleReviews()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            sampleBs.addReview(sampleReview);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return sampleBs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 9,
      "EleenYang": 39,
      "-": 26,
      "0blivious": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/BookShelfStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Represents a storage for {@link BookShelf}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public interface BookShelfStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    Path getBookShelfFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns BookShelf data as a {@link ReadOnlyBookShelf}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    Optional\u003cReadOnlyBookShelf\u003e readBookShelf() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see #getBookShelfFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    Optional\u003cReadOnlyBookShelf\u003e readBookShelf(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Saves the given {@link ReadOnlyBookShelf} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @param bookShelf cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    void saveBookShelf(ReadOnlyBookShelf bookShelf) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see #saveBookShelf(ReadOnlyBookShelf)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    void saveBookShelf(ReadOnlyBookShelf bookShelf, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    void backupBookShelf(ReadOnlyBookShelf bookShelf) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Jackson-friendly version of {@link Book}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "class JsonAdaptedBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Book\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final String bookname;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final String author;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final String rating;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Constructs a {@code JsonAdaptedBook} with the given book details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public JsonAdaptedBook(@JsonProperty(\"bookname\") String bookname, @JsonProperty(\"author\") String author,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                           @JsonProperty(\"rating\") String rating, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.bookname \u003d bookname;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Converts a given {@code Book} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public JsonAdaptedBook(Book source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookname \u003d source.getBookName().fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        author \u003d source.getAuthor().fullName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        rating \u003d source.getRating().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Converts this Jackson-friendly adapted book object into the model\u0027s {@code Book} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public Book toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        final List\u003cTag\u003e bookTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            bookTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (bookname \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                BookName.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (!BookName.isValidBookName(bookname)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new IllegalValueException(BookName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        final BookName modelBookName \u003d new BookName(bookname);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (author \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Author.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (!Author.isValidAuthor(author)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new IllegalValueException(Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        final Author modelAuthor \u003d new Author(author);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (rating \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (!Rating.isValidRating(rating)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new IllegalValueException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        final Rating modelRating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(bookTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return new Book(modelBookName, modelAuthor, modelRating, modelTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedReview.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.ReviewTitle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Jackson-friendly version of {@link Review}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "class JsonAdaptedReview {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Review\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final String bookName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Constructs a {@code JsonAdaptedReview} with the given book details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public JsonAdaptedReview(@JsonProperty(\"title\") String reviewTitle, @JsonProperty(\"bookname\") String reviewBookName,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                             @JsonProperty(\"date\") String dateCreated, @JsonProperty(\"message\") String reviewMessage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.title \u003d reviewTitle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.bookName \u003d reviewBookName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.date \u003d dateCreated;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.message \u003d reviewMessage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Converts a given {@code Book} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public JsonAdaptedReview(Review source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        title \u003d source.getTitle().fullName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookName \u003d source.getBookName().fullName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        message \u003d source.getReviewMessage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        date \u003d source.getDateCreated();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Converts this Jackson-friendly adapted review object into the model\u0027s {@code Review} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted review."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public Review toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                    ReviewTitle.class.getSimpleName()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (!ReviewTitle.isValidReviewTitle(title)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new IllegalValueException(ReviewTitle.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        final ReviewTitle modelReviewTitle \u003d new ReviewTitle(title);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (bookName \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                    BookName.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (!BookName.isValidBookName(bookName)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new IllegalValueException(BookName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        final BookName modelBookName \u003d new BookName(bookName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Review Date\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        final String modelDateCreated \u003d date;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (message \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Review Content\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        final String modelReviewMessage \u003d message;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return new Review(modelReviewTitle, modelBookName, modelDateCreated, modelReviewMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonBookShelfStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * A class to access BookShelf data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class JsonBookShelfStorage implements BookShelfStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonBookShelfStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final Path backupFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public JsonBookShelfStorage(Path filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        backupFilePath \u003d Paths.get(filePath.toString() + \".backup\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public Path getBookShelfFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public Optional\u003cReadOnlyBookShelf\u003e readBookShelf() throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return readBookShelf(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Similar to {@link #readBookShelf()}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public Optional\u003cReadOnlyBookShelf\u003e readBookShelf(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Optional\u003cJsonSerializableBookShelf\u003e jsonBookShelf \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                filePath, JsonSerializableBookShelf.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (!jsonBookShelf.isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return Optional.of(jsonBookShelf.get().toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void saveBookShelf(ReadOnlyBookShelf bookShelf) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        saveBookShelf(bookShelf, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Similar to {@link #saveBookShelf(ReadOnlyBookShelf)}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void saveBookShelf(ReadOnlyBookShelf bookShelf, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        requireNonNull(bookShelf);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableBookShelf(bookShelf), filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void backupBookShelf(ReadOnlyBookShelf bookShelf) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        saveBookShelf(bookShelf, backupFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableBookShelf.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * An Immutable BookShelf that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "@JsonRootName(value \u003d \"bookshelf\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "class JsonSerializableBookShelf {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"Book list contains duplicate book(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final List\u003cJsonAdaptedBook\u003e books \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final List\u003cJsonAdaptedReview\u003e reviews \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Constructs a {@code JsonSerializableBookShelf} with the given books."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public JsonSerializableBookShelf(@JsonProperty(\"books\") List\u003cJsonAdaptedBook\u003e books,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            @JsonProperty(\"reviews\") List\u003cJsonAdaptedReview\u003e reviews) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.books.addAll(books);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.reviews.addAll(reviews);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Converts a given {@code ReadOnlyBookShelf} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableBookShelf}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public JsonSerializableBookShelf(ReadOnlyBookShelf source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        books.addAll(source.getBookList().stream().map(JsonAdaptedBook::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        reviews.addAll(source.getReviewList().stream().map(JsonAdaptedReview::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Converts this book shelf into the model\u0027s {@code BookShelf} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public BookShelf toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookShelf bookShelf \u003d new BookShelf();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (JsonAdaptedBook jsonAdaptedBook : books) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            Book book \u003d jsonAdaptedBook.toModelType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (bookShelf.hasBook(book)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            bookShelf.addBook(book);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (JsonAdaptedReview jsonAdaptedReview : reviews) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            Review review \u003d jsonAdaptedReview.toModelType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (bookShelf.hasReview(review)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            bookShelf.addReview(review);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return bookShelf;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public interface Storage extends BookShelfStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    Path getBookShelfFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    Optional\u003cReadOnlyBookShelf\u003e readBookShelf() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    void saveBookShelf(ReadOnlyBookShelf bookShelf) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 5,
      "-": 27,
      "0blivious": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Manages storage of BookShelf data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private BookShelfStorage bookShelfStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public StorageManager(BookShelfStorage bookShelfStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.bookShelfStorage \u003d bookShelfStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BookShelf methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public Path getBookShelfFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return bookShelfStorage.getBookShelfFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public Optional\u003cReadOnlyBookShelf\u003e readBookShelf() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return readBookShelf(bookShelfStorage.getBookShelfFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public Optional\u003cReadOnlyBookShelf\u003e readBookShelf(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return bookShelfStorage.readBookShelf(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void saveBookShelf(ReadOnlyBookShelf bookShelf) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        saveBookShelf(bookShelf, bookShelfStorage.getBookShelfFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void saveBookShelf(ReadOnlyBookShelf bookShelf, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelfStorage.saveBookShelf(bookShelf, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void backupBookShelf(ReadOnlyBookShelf bookShelf) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelfStorage.backupBookShelf(bookShelf);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 18,
      "-": 60,
      "0blivious": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * An UI component that displays information of a {@code Book}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private static final String FXML \u003d \"BookListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        { \"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\" };"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on BookShelf level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public final Book book;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Label author;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Label rating;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public BookCard(Book book, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.book \u003d book;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        name.setText(book.getBookName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        name.setWrapText(true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        author.setText(book.getAuthor().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        author.setWrapText(true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        rating.setText(\"Rating:  \" + book.getRating().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        initTags(book);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // between different runs of the program while still making it random enough between tags."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Creates the tag labels for {@code book}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private void initTags(Book book) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        book.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        if (!(other instanceof BookCard)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookCard card \u003d (BookCard) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                \u0026\u0026 book.equals(card.book);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 2,
      "EleenYang": 87,
      "0blivious": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BookListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Panel containing the list of books."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String FXML \u003d \"BookListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BookListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private ListView\u003cBook\u003e bookListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public BookListPanel(ObservableList\u003cBook\u003e bookList, ObservableValue\u003cBook\u003e selectedbook,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                           Consumer\u003cBook\u003e onSelectedbookChange) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookListView.setItems(bookList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookListView.setCellFactory(listView -\u003e new BookListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            logger.fine(\"Selection in book list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            onSelectedbookChange.accept(newValue);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        title.setText(\"Book List\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        selectedbook.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            logger.fine(\"Selected book changed to: \" + newValue);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected book,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (Objects.equals(bookListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                bookListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                int index \u003d bookListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                bookListView.scrollTo(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                bookListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code book} using a {@code bookCard}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    class BookListViewCell extends ListCell\u003cBook\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        protected void updateItem(Book book, boolean empty) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            super.updateItem(book, empty);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            if (empty || book \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                setGraphic(new BookCard(book, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 71,
      "0blivious": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.function.UnaryOperator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.scene.control.TextFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, List\u003cString\u003e history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\".{0,500}\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        TextFormatter formatter \u003d new TextFormatter((UnaryOperator\u003cTextFormatter.Change\u003e) change -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return pattern.matcher(change.getControlNewText()).matches() ? change : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        commandTextField.setTextFormatter(formatter);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 153,
      "0blivious": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private BookListPanel bookListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private StackPane bookListPanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private StackPane reviewListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void fillInnerParts() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ReviewBrowserPanel browserPanel \u003d new ReviewBrowserPanel(logic.selectedReviewProperty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookListPanel \u003d new BookListPanel(logic.getFilteredBookList(), logic.selectedBookProperty(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            logic::setSelectedBook);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookListPanelPlaceholder.getChildren().add(bookListPanel.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ReviewListPanel reviewListPanel \u003d new ReviewListPanel(logic.getFilteredReviewList(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                logic.selectedReviewProperty(), logic::setSelectedReview);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        reviewListPanelPlaceholder.getChildren().add(reviewListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getBookShelfFilePath(), logic.getBookShelf());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Set up the primary stage."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        primaryStage.setMinHeight(700);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        primaryStage.setMinWidth(960);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public BookListPanel getBookListPanel() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return bookListPanel;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 4,
      "EleenYang": 8,
      "-": 191,
      "0blivious": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReviewBrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class ReviewBrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    //private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private Label reviewMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public ReviewBrowserPanel(ObservableValue\u003cReview\u003e selectedReview) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        title.setText(\"Selected Review\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        reviewMessage.setWrapText(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        selectedReview.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                reviewMessage.setText(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            reviewMessage.setText(newValue.getReviewMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        reviewMessage.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReviewCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * An UI component that displays information of a {@code Review}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class ReviewCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private static final String FXML \u003d \"ReviewListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on BookShelf level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public final Review review;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private Label bookName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private Label reviewMessage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private Label dateCreated;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public ReviewCard(Review review, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        this.review \u003d review;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        name.setText(review.getTitle().fullName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        name.setWrapText(true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        bookName.setText(review.getBookName().fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        reviewMessage.setText(review.getReviewMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        dateCreated.setText(review.getDateCreated());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        if (!(other instanceof ReviewCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ReviewCard card \u003d (ReviewCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u0026\u0026 review.equals(card.review);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 19,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReviewListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * Panel containing the list of reviews."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class ReviewListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private static final String FXML \u003d \"ReviewListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ReviewListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private ListView\u003cReview\u003e reviewListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public ReviewListPanel(ObservableList\u003cReview\u003e reviewList, ObservableValue\u003cReview\u003e selectedReview,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                           Consumer\u003cReview\u003e onSelectedReviewChange) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        reviewListView.setItems(reviewList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        reviewListView.setCellFactory(listView -\u003e new ReviewListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        reviewListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            logger.fine(\"Selection in review list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            onSelectedReviewChange.accept(newValue);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        title.setText(\"Review List\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        selectedReview.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            logger.fine(\"Selected review changed to: \" + newValue);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected review,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            if (Objects.equals(reviewListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                reviewListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                int index \u003d reviewListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                reviewListView.scrollTo(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                reviewListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Review} using a {@code ReviewCard}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    class ReviewListViewCell extends ListCell\u003cReview\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        protected void updateItem(Review review, boolean empty) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            super.updateItem(review, empty);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            if (empty || review \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                setGraphic(new ReviewCard(review, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 70,
      "0blivious": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyBookShelf addressBook) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "0blivious": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/bookShelf.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 1,
      "-": 84,
      "0blivious": 1
    }
  },
  {
    "path": "src/main/resources/view/BookListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "      \u003cLabel fx:id\u003d\"author\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$author\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "      \u003cLabel fx:id\u003d\"rating\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$rating\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 2,
      "-": 33
    }
  },
  {
    "path": "src/main/resources/view/BookListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$title\" styleClass\u003d\"label-dark\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "  \u003cListView fx:id\u003d\"bookListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 1,
      "-": 7,
      "0blivious": 3
    }
  },
  {
    "path": "src/main/resources/view/BrowserPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003cLabel fx:id\u003d\"title\" text\u003d\"\\$title\" styleClass\u003d\"label-dark\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "  \u003cLabel fx:id\u003d\"reviewMessage\" text\u003d\"\\$reviewMessage\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 3,
      "-": 5,
      "0blivious": 5
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "#tags .red {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "#tags .blue {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "#tags .brown {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    -fx-background-color: brown;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "#tags .green {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "#tags .pink {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "#tags .black {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "#tags .grey {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 50,
      "-": 352
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: #008000 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background: transparent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "0blivious": 2
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    background-color: #f8f8ff;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-focus-color: #273c42;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".label-dark {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: derive(#f8f8ff, 20%);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: derive(#f8f8ff, 20%);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: derive(#f8f8ff, 20%);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-background-color: #aadfe7;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: #f2f2f2;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-background-color: #a1caf1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ".cell_medium_label {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     -fx-background-color: derive(#f8f8ff, 20%);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     -fx-border-color: black;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     -fx-background-color: derive(#f8f8ff, 20%);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     -fx-border-color: derive(#f8f8ff, 10%);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-background-color: derive(#aadfe7, 30%);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: #b2beb5;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: derive(#ace5ee, 50%);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-background-color: derive(#aadfe7, 20%);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/*"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0blivious"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: #f8f8ff;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: #f55e61;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: #f8f8ff;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-background-color: #aadfe7;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "0blivious"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "0blivious"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "0blivious"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "0blivious"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-border-color: #aadfe7 #aadfe7 #aadfe7 #aadfe7;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "0blivious"
        },
        "content": "#filterField, #bookListPanel, #reviewListPanel {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "0blivious"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-background-color: #aadfe7;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "0blivious"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "0blivious"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "0blivious"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "0blivious"
        },
        "content": "#tags .red {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-background-color: #ec5f67;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "0blivious"
        },
        "content": "#tags .yellow {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-background-color: #fac863;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "0blivious"
        },
        "content": "#tags .blue {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-background-color: #6699cc;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "0blivious"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-background-color: #f99157;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "0blivious"
        },
        "content": "#tags .brown {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-background-color: #ab7967;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "0blivious"
        },
        "content": "#tags .green {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-background-color: #249323;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "0blivious"
        },
        "content": "#tags .pink {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-background-color: #c594c5;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "0blivious"
        },
        "content": "#tags .black {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-background-color: #c594c5;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "0blivious"
        },
        "content": "#tags .grey {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    -fx-background-color: #847884;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 26,
      "0blivious": 397
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "         title\u003d\"Book Squirrel\" minWidth\u003d\"960\" minHeight\u003d\"700\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    \u003cImage url\u003d\"@/images/bookShelf.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.3\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "          \u003cVBox fx:id\u003d\"bookList\" minWidth\u003d\"320\" prefWidth\u003d\"320\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            \u003cStackPane fx:id\u003d\"bookListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "          \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane2\" dividerPositions\u003d\"0.5\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            \u003cVBox fx:id\u003d\"reviewList\" minWidth\u003d\"320\" prefWidth\u003d\"320\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "              \u003cStackPane fx:id\u003d\"reviewListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            \u003cStackPane fx:id\u003d\"browserPlaceholder\" minWidth\u003d\"320\" prefWidth\u003d\"320\" \u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "          \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 13,
      "EleenYang": 1,
      "-": 60,
      "0blivious": 2
    }
  },
  {
    "path": "src/main/resources/view/ReviewListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            \u003cLabel fx:id\u003d\"bookName\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$bookName\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            \u003cLabel fx:id\u003d\"dateCreated\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateCreated\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            \u003cLabel fx:id\u003d\"reviewMessage\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$reviewMessage\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 34
    }
  },
  {
    "path": "src/main/resources/view/ReviewListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$title\" styleClass\u003d\"label-dark\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    \u003cListView fx:id\u003d\"reviewListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 8,
      "0blivious": 3
    }
  },
  {
    "path": "src/test/data/JsonBookShelfStorageTest/invalidAndValidBookBookShelf.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  \"books\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\": \"Valid Book\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\": \"Lewis Carroll\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\": \"5\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\": \"Book With Invalid Author Field\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\": \"J.K\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\": \"5\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  \"reviews\" : []"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 12
    }
  },
  {
    "path": "src/test/data/JsonBookShelfStorageTest/invalidBookBookShelf.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  \"books\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\": \"Book With Invalid Author Field\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\": \"J.K\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\": \"5\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  \"reviews\" : []"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializableBookShelfTest/duplicateBookBookShelf.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  \"books\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\": \"Alice in Wonderland\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\": \"Lewis Carroll\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\": \"5\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"tagged\": [ \"fantasy\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\": \"Alice in Wonderland\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\": \"Jerry Sussman\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\": \"4\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"tagged\": []"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  \"reviews\" : []"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 14
    }
  },
  {
    "path": "src/test/data/JsonSerializableBookShelfTest/invalidBookBookShelf.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  \"books\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\": \"Alice in Wonderland\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\": \"Lewis Carroll\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\": \"11\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  \"reviews\" : []"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializableBookShelfTest/typicalBooksBookShelf.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  \"_comment\": \"BookShelf save file which contains the same Book values as in TypicalBooks#getTypicalBookShelf()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  \"books\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\" : \"The Book Thief\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\" : \"Markus Zusak\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\" : \"7\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"tagged\" : [ \"popular\" ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\" : \"The Hunger Games\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\" : \"Suzanne Collins\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\" : \"6\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"tagged\" : [ \"fantasy\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\" : \"The Kite Runner\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\" : \"Khaled Hosseini\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\" : \"8\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\" : \"Life of Pi\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\" : \"Yann Martel\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\" : \"9\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"tagged\" : [ \"fantasy\" ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\" : \"The Brief Wondrous Life of Oscar Wao\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\" : \"Junot Diaz\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\" : \"4\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\" : \"Middlesex\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\" : \"Jeffrey Eugenides\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\" : \"6\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\" : \"Fifty Shades of Grey\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\" : \"Erika Leonard\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\" : \"2\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"bookname\" : \"To Kill a Mocking Bird\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"author\" : \"Harper Lee\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"rating\" : \"10\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "  \"reviews\" : []"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 45
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/BookBrowserPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * A handler for the {@code ReviewBrowserPanel} of the UI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "public class BookBrowserPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String BROWSER_ID \u003d \"#reviewMessage\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private static final String MESSAGE_FIELD_ID \u003d \"#reviewMessage\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL lastRememberedUrl;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private boolean isWebViewLoaded \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private final Label messageLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public BookBrowserPanelHandle(Node browserPanelNode) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(browserPanelNode);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        messageLabel \u003d getChildNode(MESSAGE_FIELD_ID);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public String getMessageField() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return messageLabel.getText();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public URL getLoadedUrl() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return WebViewUtil.getLoadedUrl(getChildNode(BROWSER_ID));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberUrl() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedUrl \u003d getLoadedUrl();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current {@code URL} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberUrl()} call."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isUrlChanged() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the browser is done loading a page, or if this browser has yet to load any page."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isLoaded() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWebViewLoaded;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 10,
      "Jiangqinhua": 3,
      "-": 44,
      "0blivious": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/BookCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": " * Provides a handle to a book card in the book shelf list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "public class BookCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private static final String AUTHOR_FIELD_ID \u003d \"#author\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private static final String RATING_FIELD_ID \u003d \"#rating\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private static final String REVIEWS_FIELD_ID \u003d \"#reviews\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private final Label authorLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private final Label ratingLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public BookCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        authorLabel \u003d getChildNode(AUTHOR_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        ratingLabel \u003d getChildNode(RATING_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .map(Label.class::cast)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public String getAuthor() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return authorLabel.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public String getRating() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return ratingLabel.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .map(Label::getText)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public List\u003cString\u003e getTagStyleClasses(String tag) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .filter(label -\u003e label.getText().equals(tag))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .map(Label::getStyleClass)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Returns true if this handle contains {@code book}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public boolean equals(Book book) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return getName().equals(book.getBookName().fullName)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            \u0026\u0026 getAuthor().equals(book.getAuthor().fullName)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            \u0026\u0026 getRating().equals(\"Rating:  \" + book.getRating().value)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(book.getTags().stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 83,
      "0blivious": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/BookListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Provides a handle for {@code BookListPanel} containing the list of {@code BookCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "public class BookListPanelHandle extends NodeHandle\u003cListView\u003cBook\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String BOOK_LIST_VIEW_ID \u003d \"#bookListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private Optional\u003cBook\u003e lastRememberedSelectedBookCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public BookListPanelHandle(ListView\u003cBook\u003e bookListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        super(bookListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns a handle to the selected {@code BookCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public BookCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        List\u003cBook\u003e selectedBookList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (selectedBookList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"Book list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .map(BookCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .filter(handle -\u003e handle.equals(selectedBookList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        List\u003cBook\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Navigates the listview to display {@code book}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void navigateToCard(Book book) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (!getRootNode().getItems().contains(book)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new IllegalArgumentException(\"Book does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            getRootNode().scrollTo(book);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Selects the {@code BookCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns the book card handle of a book associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public BookCardHandle getBookCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book toEqual \u003d getBook((index));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .map(BookCardHandle::new)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .filter(handle -\u003e handle.equals(getBook(index)))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private Book getBook(int index) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Remembers the selected {@code BookCard} in the list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void rememberSelectedBookCard() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        List\u003cBook\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            lastRememberedSelectedBookCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            lastRememberedSelectedBookCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if the selected {@code BookCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code rememberSelectedBookCard()} call."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public boolean isSelectedBookCardChanged() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        List\u003cBook\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return lastRememberedSelectedBookCard.isPresent();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return !lastRememberedSelectedBookCard.isPresent()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                || !lastRememberedSelectedBookCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 147,
      "EleenYang": 3,
      "0blivious": 11
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final BookListPanelHandle bookListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final ReviewListPanelHandle reviewListPanel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final BookBrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        reviewListPanel \u003d new ReviewListPanelHandle(getChildNode(ReviewListPanelHandle.REVIEW_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        bookListPanel \u003d new BookListPanelHandle(getChildNode(BookListPanelHandle.BOOK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        browserPanel \u003d new BookBrowserPanelHandle(getChildNode(BookBrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookListPanelHandle getBookListPanel() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return bookListPanel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookBrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public ReviewListPanelHandle getReviewListPanelHandle() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return reviewListPanel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "0blivious": 13
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ReviewCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * Provides a handle to a review card in the person list panel."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class ReviewCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private static final String BOOKNAME_FIELD_ID \u003d \"#bookName\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private static final String MESSAGE_FIELD_ID \u003d \"#reviewMessage\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private static final String DATE_FIELD_ID \u003d \"#dateCreated\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private final Label bookNameLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private final Label messageLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private final Label dateLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public ReviewCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        bookNameLabel \u003d getChildNode(BOOKNAME_FIELD_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        messageLabel \u003d getChildNode(MESSAGE_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        dateLabel \u003d getChildNode(DATE_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public String getBookName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return bookNameLabel.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return messageLabel.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return dateLabel.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Returns true if this handle contains {@code review}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public boolean equals(Review review) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return getName().equals(review.getTitle().fullName)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u0026\u0026 getBookName().equals(review.getBookName().fullName)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u0026\u0026 getMessage().equals(review.getReviewMessage())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                \u0026\u0026 getDate().equals(review.getDateCreated());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 63
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ReviewListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Provides a handle for {@code BookListPanel} containing the list of {@code BookCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class ReviewListPanelHandle extends NodeHandle\u003cListView\u003cReview\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String REVIEW_LIST_VIEW_ID \u003d \"#reviewListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private Optional\u003cReview\u003e lastRememberedSelectedReviewCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public ReviewListPanelHandle(ListView\u003cReview\u003e reviewListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        super(reviewListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns a handle to the selected {@code BookCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public ReviewCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        List\u003cReview\u003e selectedReviewList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        if (selectedReviewList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Person list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                .map(ReviewCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedReviewList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        List\u003cReview\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to display {@code person}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void navigateToCard(Review review) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        if (!getRootNode().getItems().contains(review)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Person does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            getRootNode().scrollTo(review);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Selects the {@code BookCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person card handle of a person associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public ReviewCardHandle getReviewCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                .map(ReviewCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                .filter(handle -\u003e handle.equals(getReview(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private Review getReview(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Remembers the selected {@code ReviewCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void rememberSelectedReviewCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        List\u003cReview\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            lastRememberedSelectedReviewCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            lastRememberedSelectedReviewCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns true if the selected {@code BookCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSelectedPersonCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public boolean isSelectedReviewCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        List\u003cReview\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            return lastRememberedSelectedReviewCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            return !lastRememberedSelectedReviewCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                    || !lastRememberedSelectedReviewCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 29,
      "-": 126,
      "0blivious": 4
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/WebViewUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper methods for dealing with {@code WebView}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class WebViewUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page in the {@code webView}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static URL getLoadedUrl(WebView webView) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            return new URL(webView.getEngine().getLocation());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"webView should not be displaying an invalid URL.\", mue);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the {@code browserPanelHandle}\u0027s {@code WebView} is loading, sleeps the thread till it is successfully loaded."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static void waitUntilBrowserLoaded(BookBrowserPanelHandle browserPanelHandle) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        new GuiRobot().waitForEvent(browserPanelHandle::isLoaded);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "0blivious": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.storage.JsonBookShelfStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    protected Supplier\u003cReadOnlyBookShelf\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyBookShelf\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            JsonBookShelfStorage jsonBookShelfStorage \u003d new JsonBookShelfStorage(saveFileLocation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                jsonBookShelfStorage.saveBookShelf(initialDataSupplier.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1200.0, 800.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        userPrefs.setBookShelfFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns a defensive copy of the book shelf data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public BookShelf readStorageBookShelf() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return new BookShelf(storage.readBookShelf().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"Data is not in the BookShelf format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return storage.getBookShelfFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model copy \u003d new ModelManager((model.getBookShelf()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ModelHelper.setFilteredBookList(copy, model.getFilteredBookList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 8,
      "-": 93,
      "0blivious": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                + \"Preference file Location : preferences.json\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/bookShelf.png\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "0blivious": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.AddBookCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.storage.JsonBookShelfStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonBookShelfStorage bookShelfStorage \u003d new JsonBookShelfStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        StorageManager storage \u003d new StorageManager(bookShelfStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String deleteBookCommand \u003d \"deleteBook 20\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandException(deleteBookCommand, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertHistoryCorrect(deleteBookCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String clearCommand \u003d ClearCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(clearCommand, ClearCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertHistoryCorrect(clearCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Setup LogicManager with JsonBookShelfIoExceptionThrowingStub"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonBookShelfStorage bookShelfStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new JsonBookShelfIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        StorageManager storage \u003d new StorageManager(bookShelfStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Execute add book command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String addBookCommand \u003d AddBookCommand.COMMAND_WORD + NAME_DESC_ALICE + AUTHOR_DESC_ALICE + RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(ALI).withTags().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        //test add book command for book shelf"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        expectedModel.addBook(expectedBook);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandBehavior(CommandException.class, addBookCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertHistoryCorrect(addBookCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void getFilteredBookList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        logic.getFilteredBookList().remove(0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     *      - {@code expectedModel}\u0027s book list was saved to the storage file."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static class JsonBookShelfIoExceptionThrowingStub extends JsonBookShelfStorage {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        private JsonBookShelfIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        public void saveBookShelf(ReadOnlyBookShelf bookShelf, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 1,
      "EleenYang": 29,
      "-": 150,
      "0blivious": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddBookCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddBookCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class AddBookCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_newBook_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.addBook(validBook);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(new AddBookCommand(validBook), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                String.format(AddBookCommand.MESSAGE_SUCCESS, validBook), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_duplicateBook_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookInList \u003d model.getBookShelf().getBookList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(new AddBookCommand(bookInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                AddBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 1,
      "EleenYang": 2,
      "-": 31,
      "0blivious": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddBookCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class AddBookCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void constructor_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        new AddBookCommand(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_bookAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ModelStubAcceptingBookAdded modelStub \u003d new ModelStubAcceptingBookAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        CommandResult commandResult \u003d new AddBookCommand(validBook).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(String.format(AddBookCommand.MESSAGE_SUCCESS, validBook), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(Arrays.asList(validBook), modelStub.booksAdded);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_duplicateBook_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        AddBookCommand addCommand \u003d new AddBookCommand(validBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithBook(validBook);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expectMessage(AddBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book alice \u003d new BookBuilder().withBookName(\"Alice\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bob \u003d new BookBuilder().withBookName(\"Bob\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        AddBookCommand addAliceCommand \u003d new AddBookCommand(alice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        AddBookCommand addBobCommand \u003d new AddBookCommand(bob);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        AddBookCommand addAliceCommandCopy \u003d new AddBookCommand(alice);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public Path getBookShelfFilePath() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setBookShelfFilePath(Path bookShelfFilePath) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void addBook(Book book) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        public void addReview(Review review) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setBookShelf(ReadOnlyBookShelf newData) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public ReadOnlyBookShelf getBookShelf() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        public boolean hasReview(Review review) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void deleteBook(Book book) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        public void deleteReview(Review review) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        public void setReview(Review target, Review editedReview) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        public ObservableList\u003cReview\u003e getFilteredReviewList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void updateFilteredBookList(Predicate\u003cBook\u003e predicate) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        public void updateFilteredReviewList(Predicate\u003cReview\u003e predicate) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        public boolean canUndoBookShelf() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        public boolean canRedoBookShelf() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        public void undoBookShelf() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        public void redoBookShelf() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        public void commitBookShelf() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public ReadOnlyProperty\u003cBook\u003e selectedBookProperty() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        public ReadOnlyProperty\u003cReview\u003e selectedReviewProperty() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public Book getSelectedBook() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        public Review getSelectedReview() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        public void setSelectedReview(Review review) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void setSelectedBook(Book book) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        public void sortBook(List\u003cString\u003e types, String mainOrder, Map\u003cString, String\u003e subOrder) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        public int getNumberOfBooks() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        public List\u003cString\u003e getMostReadAuthors() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        public List\u003cString\u003e getBooksByAuthor(String authorName) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        public String getHighestMark() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        public List\u003cString\u003e getBooksWithHighestMark(String mark) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        public List\u003cString\u003e getMostReadTags() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        public List\u003cString\u003e getBooksWithTag(String tagContent) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * A Model stub that contains a single book."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private class ModelStubWithBook extends ModelStub {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        private final Book book;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ModelStubWithBook(Book book) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            this.book \u003d book;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return this.book.isSameBook(book);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * A Model stub that always accept the book being added."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private class ModelStubAcceptingBookAdded extends ModelStub {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        final ArrayList\u003cBook\u003e booksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return booksAdded.stream().anyMatch(book::isSameBook);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public void addBook(Book book) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            booksAdded.add(book);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        public void commitBookShelf() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            // called by {@code AddBookCommand#execute()}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        public ReadOnlyBookShelf getBookShelf() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return new BookShelf();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 46,
      "Jiangqinhua": 13,
      "EleenYang": 35,
      "0blivious": 252
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddReviewCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEWMESSAGE_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEWTITLE_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelfWithReview;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.ReviewTitle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.testutil.ReviewBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class AddReviewCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void constructor_nullReview_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        new AddReviewCommand(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void execute_reviewAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Book bookToAddReview \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Review toAdd \u003d new Review(new ReviewTitle(VALID_REVIEWTITLE_ALICE),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                bookToAddReview.getBookName(), VALID_REVIEWMESSAGE_ALICE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        AddReviewCommand addReviewCommand \u003d new AddReviewCommand(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        String expectedMessage \u003d String.format(AddReviewCommand.MESSAGE_SUCCESS, toAdd.getTitle().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalBookShelfWithReview(toAdd), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        CommandResult commandResult \u003d new AddReviewCommand(toAdd).execute(model, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void execute_duplicateReview_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Book bookToAddReview \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Review toAdd \u003d new Review(new ReviewTitle(VALID_REVIEWTITLE_ALICE),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                bookToAddReview.getBookName(), VALID_REVIEWMESSAGE_ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        AddReviewCommand addReviewCommand \u003d new AddReviewCommand(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        addReviewCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        thrown.expectMessage(AddReviewCommand.MESSAGE_DUPLICATE_REVIEW);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        addReviewCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Review alice \u003d new ReviewBuilder().withBookName(\"Alice\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Review bob \u003d new ReviewBuilder().withBookName(\"Bob\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        AddReviewCommand addAliceCommand \u003d new AddReviewCommand(alice);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        AddReviewCommand addBobCommand \u003d new AddReviewCommand(bob);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        AddReviewCommand addAliceCommandCopy \u003d new AddReviewCommand(alice);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_emptyBookShelf_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_nonEmptyBookShelf_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.setBookShelf(new BookShelf());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 2,
      "-": 28,
      "0blivious": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REVIEW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REVIEWTITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookNameContainsExactKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_BOOKNAME_ALICE \u003d \"Alice in Wonderland\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_BOOKNAME_CS \u003d \"Structure and Interpretation of Computer Programs\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_BOOKNAME_LIFE \u003d \"The Secret Life of Bees\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_BOOKNAME_TEST \u003d \"Test book\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_BOOKNAME_TWILIGHT \u003d \"Twilight\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String VALID_BOOKNAME_PART_ALICE \u003d \"Alice\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String VALID_BOOKNAME_PART_CS \u003d \"Computer\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_AUTHOR_ALICE \u003d \"Lewis Carroll\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String VALID_AUTHOR_CS \u003d \"Jerry Sussman\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_AUTHOR_LIFE \u003d \"Sue Monk Kidd\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String VALID_AUTHOR_PART_ALICE \u003d \"Carroll\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String VALID_AUTHOR_PART_CS \u003d \"Sussman\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_AUTHOR_TWILIGHT \u003d \"Stephenie Meyer\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_RATING_ALICE \u003d \"5\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_RATING_CS \u003d \"4\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_RATING_LIFE \u003d \"3\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_RATING_TWILIGHT \u003d \"2\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_TAG_FANTASY \u003d \"fantasy\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_TAG_TEXTBOOK \u003d \"textbook\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String VALID_TAG_INTERESTING \u003d \"interesting\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String VALID_REVIEWTITLE_ALICE \u003d \"Carroll has depicted a unique world\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String VALID_REVIEWTITLE_CS \u003d \"The book was awesome\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String VALID_REVIEWMESSAGE_ALICE \u003d \"Alice\u0027s Adventures in Wonderland by Lewis Carroll is \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            + \"about Alice who falls down a rabbit hole and lands into a fantasy world that is full of weird, \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            + \"wonderful people and animals.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String VALID_REVIEWMESSAGE_CS \u003d \"It provides a great introduction to computer science. \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            + \"The legendary SICP reminded me of the the Bible in many respects.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String VALID_DATE \u003d \"2019/03/16 18:20:00\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String VALID_ALTERNATIVE_DATE \u003d \"2019/03/26 18:20:00\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String NAME_DESC_ALICE \u003d \" \" + PREFIX_NAME + VALID_BOOKNAME_ALICE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String NAME_DESC_CS \u003d \" \" + PREFIX_NAME + VALID_BOOKNAME_CS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String NAME_DESC_LIFE \u003d \" \" + PREFIX_NAME + VALID_BOOKNAME_LIFE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String NAME_DESC_TEST \u003d \" \" + PREFIX_NAME + VALID_BOOKNAME_TEST;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String NAME_DESC_TWILIGHT \u003d \" \" + PREFIX_NAME + VALID_BOOKNAME_TWILIGHT;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String NAME_PART_DESC_ALICE \u003d \" \" + PREFIX_NAME + VALID_BOOKNAME_PART_ALICE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String NAME_PART_DESC_CS \u003d \" \" + PREFIX_NAME + VALID_BOOKNAME_PART_CS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String AUTHOR_DESC_ALICE \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_ALICE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String AUTHOR_DESC_CS \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_CS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String AUTHOR_DESC_LIFE \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_LIFE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String AUTHOR_DESC_TWILIGHT \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_TWILIGHT;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String AUTHOR_PART_DESC_ALICE \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_PART_ALICE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String AUTHOR_PART_DESC_CS \u003d \" \" + PREFIX_AUTHOR + VALID_AUTHOR_PART_CS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String RATING_DESC_ALICE \u003d \" \" + PREFIX_RATING + VALID_RATING_ALICE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String RATING_DESC_CS \u003d \" \" + PREFIX_RATING + VALID_RATING_CS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String RATING_DESC_LIFE \u003d \" \" + PREFIX_RATING + VALID_RATING_LIFE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String RATING_DESC_TWILIGHT \u003d \" \" + PREFIX_RATING + VALID_RATING_TWILIGHT;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String TAG_DESC_FANTASY \u003d \" \" + PREFIX_TAG + VALID_TAG_FANTASY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String TAG_DESC_TEXTBOOK \u003d \" \" + PREFIX_TAG + VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String TAG_DESC_INTERESTING \u003d \" \" + PREFIX_TAG + VALID_TAG_INTERESTING;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String REVIEWTITLE_DESC_ALICE \u003d \" \" + PREFIX_REVIEWTITLE + VALID_REVIEWTITLE_ALICE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String REVIEWTITLE_DESC_CS \u003d \" \" + PREFIX_REVIEWTITLE + VALID_REVIEWTITLE_CS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String REVIEWMESSAGE_DESC_ALICE \u003d \" \" + PREFIX_REVIEW + VALID_REVIEWMESSAGE_ALICE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String REVIEWMESSAGE_DESC_CS \u003d \" \" + PREFIX_REVIEW + VALID_REVIEWMESSAGE_CS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String TOO_LONG_STR \u003d \"This string is too long that it will not be accepted by some commands. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"For example, the book name cannot be such long.\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + TOO_LONG_STR; // book name shouldn\u0027t be too long."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String INVALID_BOOKNAME_DESC \u003d \" \" + PREFIX_NAME + TOO_LONG_STR; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String INVALID_AUTHOR_DESC \u003d \" \" + PREFIX_AUTHOR + \"J.K\"; // \u0027.\u0027 not allowed in authors"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String INVALID_RATING_DESC \u003d \" \" + PREFIX_RATING + \"11\"; // rating should be [1,10]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String INVALID_REVIEWTITLE_DESC \u003d \" \" + PREFIX_RATING + TOO_LONG_STR; // title too long"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final EditBookDescriptor DESC_ALI;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final EditBookDescriptor DESC_CS;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String SORT_NAME_WITH_PREFIX \u003d \" st/name\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String SORT_AUTHOR_WITH_PREFIX \u003d \" st/author\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String SORT_RATING_WITH_PREFIX \u003d \" st/rating\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String INVALID_SORT_TYPE_WITH_PREFIX \u003d \" st/type\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String ORDER_ASC_WITH_PREFIX \u003d \" o/asc\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String ORDER_DES_WITH_PREFIX \u003d \" o/des\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String FIRST_SUBORDER_ASC_WITH_PREFIX \u003d \" o1/asc\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String SECOND_SUBORDER_ASC_WITH_PREFIX \u003d \" o2/asc\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String THIRD_SUBORDER_ASC_WITH_PREFIX \u003d \" o3/asc\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String FIRST_SUBORDER_DES_WITH_PREFIX \u003d \" o1/des\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String SECOND_SUBORDER_DES_WITH_PREFIX \u003d \" o2/des\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String THIRD_SUBORDER_DES_WITH_PREFIX \u003d \" o3/des\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String INVALID_ORDER_WITH_PREFIX \u003d \"o/abc\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String SORT_UNKNOWN_COMMAND \u003d \" k/type\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String SORT_NAME_WITHOUT_PREFIX \u003d \"name\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String SORT_AUTHOR_WITHOUT_PREFIX \u003d \"author\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String SORT_RATING_WITHOUT_PREFIX \u003d \"rating\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String ORDER_ASC_WITHOUT_PREFIX \u003d \"asc\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String ORDER_DES_WITHOUT_PREFIX \u003d \"des\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String EMPTY_STR \u003d \"      \";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public static final String SORT_EXCEPTION \u003d \"The list is not sorted correctly\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DESC_ALI \u003d new EditBookDescriptorBuilder().withBookName(VALID_BOOKNAME_ALICE)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withAuthor(VALID_AUTHOR_ALICE).withRating(VALID_RATING_ALICE)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withTags(VALID_TAG_FANTASY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DESC_CS \u003d new EditBookDescriptorBuilder().withBookName(VALID_BOOKNAME_CS)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withAuthor(VALID_AUTHOR_CS).withRating(VALID_RATING_CS)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withTags(VALID_TAG_TEXTBOOK).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * - the book shelf, filtered book list and selected book in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookShelf expectedBookShelf \u003d new BookShelf(actualModel.getBookShelf());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        List\u003cBook\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredBookList());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book expectedSelectedBook \u003d actualModel.getSelectedBook();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            assertEquals(expectedBookShelf, actualModel.getBookShelf());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredBookList());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            assertEquals(expectedSelectedBook, actualModel.getSelectedBook());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the book at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code model}\u0027s book shelf."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static void showBookAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book book \u003d model.getFilteredBookList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.updateFilteredBookList(new BookNameContainsExactKeywordsPredicate(book.getBookName()));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(1, model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the review at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * {@code model}\u0027s book shelf."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static void showReviewAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Review review \u003d model.getFilteredReviewList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        model.updateFilteredReviewList((Review toTest) -\u003e review.getTitle().equals(toTest.getTitle()));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertEquals(1, model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the book of the given {@code name} in the"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code model}\u0027s book shelf. The book should be present in the book shelf."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static void showBookOfExactName(Model model, BookName name) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.updateFilteredBookList(new BookNameContainsExactKeywordsPredicate(name));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Deletes the first book in {@code model}\u0027s filtered list from {@code model}\u0027s book shelf."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static void deleteFirstBook(Model model) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book firstBook \u003d model.getFilteredBookList().get(0);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.deleteBook(firstBook);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.commitBookShelf();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 24,
      "Jiangqinhua": 22,
      "EleenYang": 15,
      "-": 90,
      "0blivious": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteBookCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * {@code DeleteBookCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class DeleteBookCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand deleteCommand \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new DeleteBookCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteBookCommand.MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_invalidBookNameUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand deleteCommand \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new DeleteBookCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand deleteCommand \u003d new DeleteBookCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteBookCommand.MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showNoBook(expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of book shelf list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getBookShelf().getBookList().size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand deleteCommand \u003d new DeleteBookCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand deleteCommand \u003d new DeleteBookCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // delete -\u003e first book deleted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // undo -\u003e reverts bookShelf back to previous state and filtered book list to show all books"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.undoBookShelf();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // redo -\u003e same first book deleted again"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.redoBookShelf();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand deleteCommand \u003d new DeleteBookCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // execution failed -\u003e book shelf state not added into model"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // single book shelf state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 1. Deletes a {@code Book} from a filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted book in the"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the book object regardless of indexing."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameBookDeleted() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand deleteCommand \u003d new DeleteBookCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBookAtIndex(model, INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // delete -\u003e deletes second book in unfiltered book list / first book in filtered book list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // undo -\u003e reverts bookShelf back to previous state and filtered book list to show all books"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.undoBookShelf();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertNotEquals(bookToDelete, model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // redo -\u003e deletes same second book in unfiltered book list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.redoBookShelf();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand deleteFirstCommand \u003d new DeleteBookCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand deleteSecondCommand \u003d new DeleteBookCommand(INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand deleteFirstCommandCopy \u003d new DeleteBookCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void showNoBook(Model model) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.updateFilteredBookList(p -\u003e false);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(model.getFilteredBookList().isEmpty());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 1,
      "EleenYang": 2,
      "0blivious": 177
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteReviewCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelfWithAllReviews;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_REVIEW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * {@code DeleteReviewCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class DeleteReviewCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBookShelfWithAllReviews(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Review reviewToDelete \u003d model.getFilteredReviewList().get(INDEX_FIRST_REVIEW.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        DeleteReviewCommand deleteCommand \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                new DeleteReviewCommand(INDEX_FIRST_REVIEW);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteReviewCommand.MESSAGE_DELETE_REVIEW_SUCCESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                reviewToDelete.getTitle().fullName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        expectedModel.deleteReview(reviewToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void execute_invalidReviewNameUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredReviewList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        DeleteReviewCommand deleteCommand \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                new DeleteReviewCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_REVIEW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Review reviewToDelete \u003d model.getFilteredReviewList().get(INDEX_FIRST_REVIEW.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        DeleteReviewCommand deleteCommand \u003d new DeleteReviewCommand(INDEX_FIRST_REVIEW);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        expectedModel.deleteReview(reviewToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // delete -\u003e first review deleted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // undo -\u003e reverts reviewShelf back to previous state and filtered review list to show all reviews"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        expectedModel.undoBookShelf();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // redo -\u003e same first review deleted again"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        expectedModel.redoBookShelf();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredReviewList().size() + 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        DeleteReviewCommand deleteCommand \u003d new DeleteReviewCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // execution failed -\u003e review shelf state not added into model"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_REVIEW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // single review shelf state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        DeleteReviewCommand deleteFirstCommand \u003d new DeleteReviewCommand(INDEX_FIRST_REVIEW);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        DeleteReviewCommand deleteFirstCommandCopy \u003d new DeleteReviewCommand(INDEX_FIRST_REVIEW);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private void showNoReview(Model model) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        model.updateFilteredReviewList(p -\u003e false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(model.getFilteredReviewList().isEmpty());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditBookCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_ALI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_CS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_CS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showBookAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * and unit tests for EditBookCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class EditBookCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(editedBook).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(INDEX_FIRST_BOOK, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedMessage \u003d String.format(EditBookCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.setBook(model.getFilteredBookList().get(0), editedBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index indexLastBook \u003d Index.fromOneBased(model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book lastBook \u003d model.getFilteredBookList().get(indexLastBook.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookBuilder bookInList \u003d new BookBuilder(lastBook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedBook \u003d bookInList.withBookName(VALID_BOOKNAME_CS).withAuthor(VALID_AUTHOR_CS)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withTags(VALID_TAG_TEXTBOOK).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withBookName(VALID_BOOKNAME_CS)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withAuthor(VALID_AUTHOR_CS).withTags(VALID_TAG_TEXTBOOK).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(indexLastBook, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedMessage \u003d String.format(EditBookCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.setBook(lastBook, editedBook);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(INDEX_FIRST_BOOK, new EditBookDescriptor());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedBook \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedMessage \u003d String.format(EditBookCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookInFilteredList \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedBook \u003d new BookBuilder(bookInFilteredList).withBookName(VALID_BOOKNAME_CS).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(INDEX_FIRST_BOOK,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new EditBookDescriptorBuilder().withBookName(VALID_BOOKNAME_CS).build());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedMessage \u003d String.format(EditBookCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.setBook(model.getFilteredBookList().get(0), editedBook);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_duplicateBookUnfilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book firstBook \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(firstBook).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(INDEX_SECOND_BOOK, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_duplicateBookFilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // edit book in filtered list into a duplicate in book shelf"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookInList \u003d model.getBookShelf().getBookList().get(INDEX_SECOND_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(INDEX_FIRST_BOOK,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new EditBookDescriptorBuilder(bookInList).build());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_invalidBookIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withBookName(VALID_BOOKNAME_CS).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * but smaller than size of book shelf"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void execute_invalidBookIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of book shelf list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getBookShelf().getBookList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new EditBookDescriptorBuilder().withBookName(VALID_BOOKNAME_CS).build());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookToEdit \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(editedBook).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(INDEX_FIRST_BOOK, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.setBook(bookToEdit, editedBook);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // edit -\u003e first book edited"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // undo -\u003e reverts book shelf back to previous state and filtered book list to show all books"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedModel.undoBookShelf();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // redo -\u003e same first book edited again"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedModel.redoBookShelf();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withBookName(VALID_BOOKNAME_CS).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // execution failed -\u003e book shelf state not added into model"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // single book shelf state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 1. Edits a {@code Book} from a filtered list."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited book in the"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the book object regardless of indexing."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameBookEdited() throws Exception {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(editedBook).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand editCommand \u003d new EditBookCommand(INDEX_FIRST_BOOK, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new BookShelf(model.getBookShelf()), new UserPrefs());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBookAtIndex(model, INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookToEdit \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.setBook(bookToEdit, editedBook);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedModel.commitBookShelf();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // edit -\u003e edits second book in unfiltered book list / first book in filtered book list"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // undo -\u003e reverts book shelf back to previous state and filtered book list to show all books"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedModel.undoBookShelf();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertNotEquals(model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased()), bookToEdit);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // redo -\u003e edits same second book in unfiltered book list"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedModel.redoBookShelf();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        final EditBookCommand standardCommand \u003d new EditBookCommand(INDEX_FIRST_BOOK, DESC_ALI);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor copyDescriptor \u003d new EditBookDescriptor(DESC_ALI);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand commandWithSameValues \u003d new EditBookCommand(INDEX_FIRST_BOOK, copyDescriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(standardCommand.equals(new EditBookCommand(INDEX_SECOND_BOOK, DESC_ALI)));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(standardCommand.equals(new EditBookCommand(INDEX_FIRST_BOOK, DESC_CS)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 10,
      "EleenYang": 2,
      "0blivious": 235
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditBookDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_ALI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_CS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_CS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_CS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class EditBookDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand.EditBookDescriptor descriptorWithSameValues \u003d new EditBookDescriptor(DESC_ALI);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(DESC_ALI.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(DESC_ALI.equals(DESC_ALI));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(DESC_ALI.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(DESC_ALI.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(DESC_ALI.equals(DESC_CS));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor editedAlice \u003d new EditBookDescriptorBuilder(DESC_ALI)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withBookName(VALID_BOOKNAME_CS)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(DESC_ALI.equals(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different author -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedAlice \u003d new EditBookDescriptorBuilder(DESC_ALI).withAuthor(VALID_AUTHOR_CS).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(DESC_ALI.equals(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different rating -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedAlice \u003d new EditBookDescriptorBuilder(DESC_ALI).withRating(VALID_RATING_CS).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(DESC_ALI.equals(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedAlice \u003d new EditBookDescriptorBuilder(DESC_ALI).withTags(VALID_TAG_TEXTBOOK).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(DESC_ALI.equals(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String command3 \u003d \"deleteBook 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "0blivious": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListAllReviewsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelfWithAllReviews;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class ListAllReviewsCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        model \u003d new ModelManager(getTypicalBookShelfWithAllReviews(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertCommandSuccess(new ListAllReviewsCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                ListAllReviewsCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListBookCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOKTHIEF;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.HUNGERGAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.BookListFilterPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code listBookCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class ListBookCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookListFilterPredicate(Collections.singletonList(\"first\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                        Collections.singletonList(\"first\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                        Collections.singletonList(\"first\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                        Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookListFilterPredicate(Collections.singletonList(\"second\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                        Collections.singletonList(\"second\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                        Collections.singletonList(\"second\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                        Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ListBookCommand listFirstCommand \u003d new ListBookCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ListBookCommand listSecondCommand \u003d new ListBookCommand(secondPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(listFirstCommand.equals(listFirstCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ListBookCommand listFirstCommandCopy \u003d new ListBookCommand(firstPredicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(listFirstCommand.equals(listFirstCommandCopy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(listFirstCommand.equals(1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(listFirstCommand.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(listFirstCommand.equals(listSecondCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void execute_zeroKeywords() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_LISTED_OVERVIEW, 8);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e names \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e authors \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e tags \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e ratings \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate predicate \u003d preparePredicate(names, authors, tags, ratings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ListBookCommand command \u003d new ListBookCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void execute_multipleKeyWords() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr1 \u003d {\"Thief\"};"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr2 \u003d {\"Zusak\"};"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr3 \u003d {\"popular\"};"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr4 \u003d {\"7\"};"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate predicate \u003d preparePredicate(Arrays.asList(arr1),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(arr2),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(arr3),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(arr4));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ListBookCommand command \u003d new ListBookCommand(predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(Arrays.asList(BOOKTHIEF), model.getFilteredBookList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void execute_multipleBooksFound() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr1 \u003d {\"The\"};"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr2 \u003d {\"Zusak\", \"Collins\"};"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr3 \u003d {\"popular\", \"fantasy\"};"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr4 \u003d {\"6\", \"7\"};"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate predicate \u003d preparePredicate(Arrays.asList(arr1),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(arr2),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(arr3),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(arr4));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ListBookCommand command \u003d new ListBookCommand(predicate);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(Arrays.asList(BOOKTHIEF, HUNGERGAME), model.getFilteredBookList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private BookListFilterPredicate preparePredicate(List\u003cString\u003e names, List\u003cString\u003e authors, List\u003cString\u003e tags,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            List\u003cString\u003e ratings) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return new BookListFilterPredicate(names, authors, tags, ratings);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 119,
      "0blivious": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListReviewCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelfWithAllReviews;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_BOOK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class ListReviewCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBookShelfWithAllReviews(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalBookShelfWithAllReviews(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Index lastBookIndex \u003d Index.fromOneBased(model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_BOOK);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertExecutionSuccess(lastBookIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ListReviewCommand selectFirstCommand \u003d new ListReviewCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ListReviewCommand selectSecondCommand \u003d new ListReviewCommand(INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ListReviewCommand selectFirstCommandCopy \u003d new ListReviewCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Executes a {@code ListReviewCommand} with the given {@code index},"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * and checks that the model\u0027s selected person is set to the person at {@code index} in the filtered person list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ListReviewCommand selectCommand \u003d new ListReviewCommand(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        String expectedMessage \u003d String.format(ListReviewCommand.MESSAGE_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        expectedModel.setSelectedBook(model.getFilteredBookList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Executes a {@code ListReviewCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ListReviewCommand selectCommand \u003d new ListReviewCommand(index);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteFirstBook(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteFirstBook(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        model.undoBookShelf();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        model.undoBookShelf();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteFirstBook(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteFirstBook(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedModel.undoBookShelf();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedModel.undoBookShelf();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedModel.redoBookShelf();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedModel.redoBookShelf();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 6,
      "EleenYang": 3,
      "-": 35,
      "0blivious": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectReviewCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelfWithAllReviews;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_REVIEW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_REVIEW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class SelectReviewCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBookShelfWithAllReviews(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalBookShelfWithAllReviews(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Index lastReviewIndex \u003d Index.fromOneBased(model.getFilteredReviewList().size());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_REVIEW);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertExecutionSuccess(INDEX_SECOND_REVIEW);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertExecutionSuccess(lastReviewIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredReviewList().size() + 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_REVIEW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        SelectReviewCommand selectFirstCommand \u003d new SelectReviewCommand(INDEX_FIRST_REVIEW);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        SelectReviewCommand selectSecondCommand \u003d new SelectReviewCommand(INDEX_SECOND_REVIEW);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        SelectReviewCommand selectFirstCommandCopy \u003d new SelectReviewCommand(INDEX_FIRST_REVIEW);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Executes a {@code SelectReviewCommand} with the given {@code index},"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * and checks that the model\u0027s selected person is set to the person at {@code index} in the filtered person list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        SelectReviewCommand selectCommand \u003d new SelectReviewCommand(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        String expectedMessage \u003d String.format(SelectReviewCommand.MESSAGE_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        expectedModel.setSelectedReview(model.getFilteredReviewList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        SelectReviewCommand selectCommand \u003d new SelectReviewCommand(index);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortBookCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORDER_ASC_WITHOUT_PREFIX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORDER_DES_WITHOUT_PREFIX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_AUTHOR_WITHOUT_PREFIX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_EXCEPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_NAME_WITHOUT_PREFIX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_RATING_WITHOUT_PREFIX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.function.BiFunction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.logic.parser.SortBookCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "public class SortBookCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private static final int FIRST \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void execute() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        ObservableList\u003cBook\u003e bookList \u003d model.getBookShelf().getBookList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        List\u003cString\u003e sortTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes.add(SORT_AUTHOR_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // check main order author"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        checkOrder(bookList, sortTypes, ORDER_ASC_WITHOUT_PREFIX, null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        checkOrder(bookList, sortTypes, ORDER_DES_WITHOUT_PREFIX, null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes.add(SORT_NAME_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // check main order author"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        checkOrder(bookList, sortTypes, ORDER_ASC_WITHOUT_PREFIX, null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        checkOrder(bookList, sortTypes, ORDER_DES_WITHOUT_PREFIX, null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes.add(SORT_RATING_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // check main order rating"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        checkOrder(bookList, sortTypes, ORDER_ASC_WITHOUT_PREFIX, null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        checkOrder(bookList, sortTypes, ORDER_DES_WITHOUT_PREFIX, null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes.add(SORT_AUTHOR_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes.add(SORT_RATING_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map.put(SORT_AUTHOR_WITHOUT_PREFIX, ORDER_ASC_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        checkOrder(bookList, sortTypes, null, map);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map.put(SORT_RATING_WITHOUT_PREFIX, ORDER_DES_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        checkOrder(bookList, sortTypes, null, map);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes.add(SORT_RATING_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes.add(SORT_AUTHOR_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes.add(SORT_NAME_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map.put(SORT_AUTHOR_WITHOUT_PREFIX, ORDER_ASC_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map.put(SORT_NAME_WITHOUT_PREFIX, ORDER_DES_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map.put(SORT_RATING_WITHOUT_PREFIX, ORDER_ASC_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        checkOrder(bookList, sortTypes, null, map);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map.put(SORT_AUTHOR_WITHOUT_PREFIX, ORDER_ASC_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map.put(SORT_NAME_WITHOUT_PREFIX, ORDER_ASC_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map.put(SORT_RATING_WITHOUT_PREFIX, ORDER_DES_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        checkOrder(bookList, sortTypes, null, map);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map.put(SORT_AUTHOR_WITHOUT_PREFIX, ORDER_DES_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map.put(SORT_NAME_WITHOUT_PREFIX, ORDER_ASC_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map.put(SORT_RATING_WITHOUT_PREFIX, ORDER_ASC_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        checkOrder(bookList, sortTypes, null, map);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map.put(SORT_AUTHOR_WITHOUT_PREFIX, ORDER_DES_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map.put(SORT_NAME_WITHOUT_PREFIX, ORDER_ASC_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map.put(SORT_RATING_WITHOUT_PREFIX, ORDER_DES_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        checkOrder(bookList, sortTypes, null, map);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private void checkOrder(ObservableList\u003cBook\u003e bookList,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                            List\u003cString\u003e sortTypes,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                            String order,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                            Map\u003cString, String\u003e subOrder) throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        model.sortBook(sortTypes, order, subOrder);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        checkSort(bookList, sortTypes, order, subOrder);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * check whether book list is in certain order."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param bookList list that going to check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param types specify how the list is sorted"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param mainOrder specify whether the list order in main order"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param subOrder specify individual order for different sortType"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @throws Exception if the list is not in order"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private void checkSort(ObservableList\u003cBook\u003e bookList,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                           List\u003cString\u003e types,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                           String mainOrder,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                           Map\u003cString, String\u003e subOrder) throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        Iterator\u003cString\u003e iterator \u003d types.iterator();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        String firstType \u003d iterator.next().toLowerCase();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        Book firstBook \u003d bookList.get(FIRST);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        for (int i \u003d 1; i \u003c bookList.size(); i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            Book secondBook \u003d bookList.get(i);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            if (firstType.equals(SortBookCommandParser.AUTHOR)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                int result \u003d checkSort(firstBook, secondBook, subOrder, mainOrder, firstType, this::compareAuthor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                if (result \u003e 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    throw new Exception(SORT_EXCEPTION);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                if (result \u003c 0 || !iterator.hasNext()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    firstBook \u003d secondBook;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                String secondType \u003d iterator.next().toLowerCase();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                if (secondType.equals(SortBookCommandParser.BOOKNAME)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    result \u003d checkSort(firstBook, secondBook, subOrder,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        mainOrder, secondType, this::compareBookName);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    if (result \u003e 0) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        throw new Exception(SORT_EXCEPTION);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    if (result \u003c 0 || !iterator.hasNext()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        firstBook \u003d secondBook;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    result \u003d checkSort(firstBook, secondBook, subOrder, mainOrder,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        iterator.next().toLowerCase(), this::compareRating);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    if (result \u003e 0) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        throw new Exception(SORT_EXCEPTION);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    result \u003d checkSort(firstBook, secondBook, subOrder,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        mainOrder, secondType, this::compareRating);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    if (result \u003e 0) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        throw new Exception(SORT_EXCEPTION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    if (result \u003c 0 || !iterator.hasNext()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        firstBook \u003d secondBook;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    result \u003d checkSort(firstBook, secondBook, subOrder, mainOrder,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        iterator.next().toLowerCase(), this::compareBookName);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    if (result \u003e 0) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        throw new Exception(SORT_EXCEPTION);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            } else if (firstType.equals(SortBookCommandParser.BOOKNAME)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                int result \u003d checkSort(firstBook, secondBook, subOrder, mainOrder, firstType, this::compareBookName);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                if (result \u003e 0) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    throw new Exception(SORT_EXCEPTION);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                if (result \u003c 0 || !iterator.hasNext()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    firstBook \u003d secondBook;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                String secondOrder \u003d iterator.next().toLowerCase();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                if (secondOrder.equals(SortBookCommandParser.AUTHOR)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    result \u003d checkSort(firstBook, secondBook, subOrder,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        mainOrder, secondOrder, this::compareAuthor);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    if (result \u003e 0) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        throw new Exception(SORT_EXCEPTION);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    if (result \u003c 0 || !iterator.hasNext()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        firstBook \u003d secondBook;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    result \u003d checkSort(firstBook, secondBook, subOrder, mainOrder,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        iterator.next().toLowerCase(), this::compareRating);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    if (result \u003e 0) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        throw new Exception(SORT_EXCEPTION);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    result \u003d checkSort(firstBook, secondBook, subOrder,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        mainOrder, secondOrder, this::compareRating);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    if (result \u003e 0) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        throw new Exception(SORT_EXCEPTION);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    if (result \u003c 0 || !iterator.hasNext()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        firstBook \u003d secondBook;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    result \u003d checkSort(firstBook, secondBook, subOrder, mainOrder,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        iterator.next().toLowerCase(), this::compareAuthor);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    if (result \u003e 0) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        throw new Exception(SORT_EXCEPTION);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                int result \u003d checkSort(firstBook, secondBook, subOrder, mainOrder, firstType, this::compareRating);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                if (result \u003e 0) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    throw new Exception(SORT_EXCEPTION);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                if (result \u003c 0 || !iterator.hasNext()) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    firstBook \u003d secondBook;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                String secondOrder \u003d iterator.next().toLowerCase();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                if (secondOrder.equals(SortBookCommandParser.BOOKNAME)) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    result \u003d checkSort(firstBook, secondBook, subOrder,"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        mainOrder, secondOrder, this::compareBookName);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    if (result \u003e 0) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        throw new Exception(SORT_EXCEPTION);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    if (result \u003c 0 || !iterator.hasNext()) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        firstBook \u003d secondBook;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    result \u003d checkSort(firstBook, secondBook, subOrder, mainOrder,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        iterator.next().toLowerCase(), this::compareAuthor);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    if (result \u003e 0) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        throw new Exception(SORT_EXCEPTION);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    result \u003d checkSort(firstBook, secondBook, subOrder,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        mainOrder, secondOrder, this::compareAuthor);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    if (result \u003e 0) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        throw new Exception(SORT_EXCEPTION);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    if (result \u003c 0 || !iterator.hasNext()) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        firstBook \u003d secondBook;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    result \u003d checkSort(firstBook, secondBook, subOrder, mainOrder,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        iterator.next().toLowerCase(), this::compareBookName);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    if (result \u003e 0) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                        throw new Exception(SORT_EXCEPTION);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            firstBook \u003d secondBook;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Compare two book."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param b1 first book"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param b2 second book"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param subOrders whether the individual attribute has specify order"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param order main order for all attributes"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param currentType current sort type"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @param compare bifunction that either be compare author, rating or book name"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @return the compare result, -1, 0 or 1"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private int checkSort(Book b1, Book b2,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                     Map\u003cString, String\u003e subOrders,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                     String order, String currentType,"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                     BiFunction\u003cBook, Book, Integer\u003e compare) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (order \u003d\u003d null) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            order \u003d subOrders.getOrDefault(currentType, SortBookCommandParser.ASCENDING);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        if (order.equals(SortBookCommandParser.ASCENDING)) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return compare.apply(b1, b2);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return compare.apply(b2, b1);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private int compareAuthor(Book b1, Book b2) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return b1.getAuthor().fullName.compareTo(b2.getAuthor().fullName);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private int compareBookName(Book b1, Book b2) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return b1.getBookName().fullName.compareTo(b2.getBookName().fullName);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private int compareRating(Book b1, Book b2) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return Integer.valueOf(b1.getRating().value) - Integer.valueOf(b2.getRating().value);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 348
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SummaryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.SummaryCommand.MESSAGE_NO_AUTHOR_PREFERED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class SummaryCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void execute_summary_success() throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedFeedBack \u003d \"You\u0027ve read 8 books.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + MESSAGE_NO_AUTHOR_PREFERED"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"Book(s) receive a rating of 10 from you: To Kill a Mocking Bird\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"You prefer books that you labeled as fantasy(including The Hunger Games, Life of Pi)\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedFeedBack, false, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(new SummaryCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalBookShelf(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteFirstBook(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteFirstBook(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteFirstBook(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteFirstBook(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedModel.undoBookShelf();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedModel.undoBookShelf();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 2,
      "EleenYang": 3,
      "-": 35,
      "0blivious": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddBookCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_CS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AUTHOR_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BOOKNAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_CS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FANTASY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_INTERESTING;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_CS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_CS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_CS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FANTASY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_INTERESTING;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALI;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.AddBookCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class AddBookCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private AddBookCommandParser parser \u003d new AddBookCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(CS).withTags(VALID_TAG_TEXTBOOK).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_CS + AUTHOR_DESC_CS"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + RATING_DESC_CS + TAG_DESC_TEXTBOOK, new AddBookCommand(expectedBook));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book expectedBookMultipleTags \u003d new BookBuilder(CS).withTags(VALID_TAG_TEXTBOOK, VALID_TAG_INTERESTING)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CS + AUTHOR_DESC_CS + RATING_DESC_CS"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_TEXTBOOK + TAG_DESC_INTERESTING, new AddBookCommand(expectedBookMultipleTags));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(ALI).withTags().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_ALICE + AUTHOR_DESC_ALICE + RATING_DESC_ALICE,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new AddBookCommand(expectedBook));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_multipleFieldsPresent_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(CS).withTags(VALID_TAG_TEXTBOOK).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBookCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // multiple book names"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_ALICE + NAME_DESC_CS + AUTHOR_DESC_CS + RATING_DESC_CS"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_TEXTBOOK, expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // multiple author"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS + AUTHOR_DESC_ALICE + AUTHOR_DESC_CS + RATING_DESC_CS"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_TEXTBOOK, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // multiple ratings"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS + AUTHOR_DESC_CS + RATING_DESC_ALICE + RATING_DESC_CS"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_TEXTBOOK, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBookCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, VALID_BOOKNAME_CS + AUTHOR_DESC_CS + RATING_DESC_CS,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // missing author prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS + VALID_AUTHOR_CS + RATING_DESC_CS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // missing rating prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS + AUTHOR_DESC_CS + VALID_RATING_CS,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, VALID_BOOKNAME_CS + VALID_AUTHOR_CS + VALID_RATING_CS,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, INVALID_BOOKNAME_DESC + AUTHOR_DESC_CS + RATING_DESC_CS"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_FANTASY + TAG_DESC_TEXTBOOK, BookName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid author"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS + INVALID_AUTHOR_DESC + RATING_DESC_CS"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_FANTASY + TAG_DESC_TEXTBOOK, Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid rating"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS + AUTHOR_DESC_CS + INVALID_RATING_DESC"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_INTERESTING + TAG_DESC_TEXTBOOK, Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS + AUTHOR_DESC_CS + RATING_DESC_CS"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FANTASY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, INVALID_BOOKNAME_DESC + AUTHOR_DESC_CS + RATING_DESC_CS,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                BookName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_CS + AUTHOR_DESC_CS + RATING_DESC_CS"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                        + TAG_DESC_INTERESTING + TAG_DESC_TEXTBOOK,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddReviewCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BOOKNAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REVIEWMESSAGE_DESC_CS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REVIEWTITLE_DESC_CS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_CS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEWMESSAGE_CS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEWTITLE_CS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.commands.AddReviewCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.BookNameContainsExactKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.ReviewTitle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class AddReviewCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private AddReviewCommandParser parser \u003d new AddReviewCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Review expectedReview \u003d new Review("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                new ReviewTitle(VALID_REVIEWTITLE_CS), new BookName(VALID_BOOKNAME_CS), VALID_REVIEWMESSAGE_CS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        BookNameContainsExactKeywordsPredicate expectedPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                new BookNameContainsExactKeywordsPredicate(new BookName(VALID_BOOKNAME_CS));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CS + REVIEWTITLE_DESC_CS"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                + REVIEWMESSAGE_DESC_CS, new AddReviewCommand(expectedReview));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddReviewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_WHITESPACE + VALID_BOOKNAME_CS + REVIEWTITLE_DESC_CS"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                        + REVIEWMESSAGE_DESC_CS, expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // missing review title prefix"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_WHITESPACE + NAME_DESC_CS + VALID_REVIEWTITLE_CS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                + REVIEWMESSAGE_DESC_CS, expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // missing review prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_WHITESPACE + NAME_DESC_CS + REVIEWTITLE_DESC_CS"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                + VALID_REVIEWMESSAGE_CS, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_WHITESPACE + VALID_BOOKNAME_CS + VALID_REVIEWTITLE_CS"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                + VALID_REVIEWMESSAGE_CS, expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertParseFailure(parser, INVALID_BOOKNAME_DESC + REVIEWTITLE_DESC_CS"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                + REVIEWMESSAGE_DESC_CS, BookName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_CS + REVIEWTITLE_DESC_CS"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                + REVIEWMESSAGE_DESC_CS, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddReviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/BookShelfParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_AUTHOR_WITHOUT_PREFIX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_AUTHOR_WITH_PREFIX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.AddBookCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.DeleteBookCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.ListBookCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.logic.commands.SortBookCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.SummaryCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.BookListFilterPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookShelfParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final BookShelfParser parser \u003d new BookShelfParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parseCommand_addBook() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        AddBookCommand command \u003d (AddBookCommand) parser.parseCommand(BookUtil.getAddBookCommand(book));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(new AddBookCommand(book), command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parseCommand_deleteBook() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        DeleteBookCommand command \u003d (DeleteBookCommand) parser.parseCommand("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                DeleteBookCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(new DeleteBookCommand(INDEX_FIRST_BOOK), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parseCommand_editBook() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(book).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand command \u003d (EditBookCommand) parser.parseCommand(EditBookCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + INDEX_FIRST_BOOK.getOneBased() + \" \" + BookUtil.getEditBookDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(new EditBookCommand(INDEX_FIRST_BOOK, descriptor), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void parseCommand_sortBook() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        List\u003cString \u003e sortTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes.add(SORT_AUTHOR_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        SortBookCommand command \u003d (SortBookCommand) parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            SortBookCommand.COMMAND_WORD + SORT_AUTHOR_WITH_PREFIX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertEquals(new SortBookCommand(sortTypes, null, new HashMap\u003c\u003e()), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void parseCommand_summary() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(parser.parseCommand(SummaryCommand.COMMAND_WORD) instanceof SummaryCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(parser.parseCommand(SummaryCommand.COMMAND_WORD + \" 3\") instanceof SummaryCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void parseCommand_listBook() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ListBookCommand command \u003d (ListBookCommand) parser.parseCommand(BookUtil.getListBookCommand(book));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate predicate \u003d new BookListFilterPredicate("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(book.getBookName().fullName.split(\"\\\\s+\")[0]),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(book.getAuthor().fullName.split(\"\\\\s+\")[0]),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                book.getTags().stream().map(x -\u003e x.tagName.split(\"\\\\s+\")[0]).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(book.getRating().value)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(new ListBookCommand(predicate), command);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 14,
      "EleenYang": 17,
      "-": 96,
      "0blivious": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteBookCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.DeleteBookCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * outside of the DeleteBookCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * same path through the DeleteBookCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class DeleteBookCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private DeleteBookCommandParser parser \u003d new DeleteBookCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_validArgs_returnsDeleteBookCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteBookCommand(INDEX_FIRST_BOOK));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "0blivious": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteReviewCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_REVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.commands.DeleteReviewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class DeleteReviewCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private DeleteReviewCommandParser parser \u003d new DeleteReviewCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void parse_validArgs_returnsDeleteReviewCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteReviewCommand(INDEX_FIRST_REVIEW));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteReviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditBookCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_CS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AUTHOR_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_CS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FANTASY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_ALICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_CS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_ALICE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_ALICE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FANTASY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_BOOK;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class EditBookCommandParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditBookCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private EditBookCommandParser parser \u003d new EditBookCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, VALID_BOOKNAME_ALICE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\", EditBookCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_ALICE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_ALICE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, BookName.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AUTHOR_DESC, Author.MESSAGE_CONSTRAINTS); // invalid author"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_RATING_DESC, Rating.MESSAGE_CONSTRAINTS); // invalid rating"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid author followed by valid rating"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AUTHOR_DESC + RATING_DESC_ALICE, Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // valid author followed by invalid author. The test case for invalid author followed by valid author"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\" + AUTHOR_DESC_CS + INVALID_AUTHOR_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Book} being edited,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FANTASY + TAG_DESC_TEXTBOOK + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FANTASY + TAG_EMPTY + TAG_DESC_TEXTBOOK, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FANTASY + TAG_DESC_TEXTBOOK, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_RATING_DESC + VALID_AUTHOR_ALICE,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                BookName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AUTHOR_DESC_CS + TAG_DESC_TEXTBOOK"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + RATING_DESC_ALICE + NAME_DESC_ALICE + TAG_DESC_FANTASY;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withBookName(VALID_BOOKNAME_ALICE)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withAuthor(VALID_AUTHOR_CS).withRating(VALID_RATING_ALICE)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withTags(VALID_TAG_TEXTBOOK, VALID_TAG_FANTASY).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand expectedCommand \u003d new EditBookCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AUTHOR_DESC_CS + RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withAuthor(VALID_AUTHOR_CS)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withRating(VALID_RATING_ALICE).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand expectedCommand \u003d new EditBookCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_BOOK;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_ALICE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withBookName(VALID_BOOKNAME_ALICE).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand expectedCommand \u003d new EditBookCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // author"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + AUTHOR_DESC_ALICE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withAuthor(VALID_AUTHOR_ALICE).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedCommand \u003d new EditBookCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // rating"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withRating(VALID_RATING_ALICE).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedCommand \u003d new EditBookCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FANTASY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withTags(VALID_TAG_FANTASY).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedCommand \u003d new EditBookCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_multipleRepeatedFields_failure() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AUTHOR_DESC_ALICE + RATING_DESC_ALICE"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_FANTASY + AUTHOR_DESC_ALICE + RATING_DESC_ALICE + TAG_DESC_FANTASY"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + AUTHOR_DESC_CS + RATING_DESC_CS + TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_failure() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_AUTHOR_DESC + AUTHOR_DESC_CS;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + RATING_DESC_CS + INVALID_AUTHOR_DESC + AUTHOR_DESC_CS;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_BOOK;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        EditBookCommand expectedCommand \u003d new EditBookCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 186
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListBookCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_PART_DESC_ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_PART_DESC_CS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_PART_DESC_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_PART_DESC_CS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_CS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FANTASY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_PART_ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_PART_CS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_PART_ALICE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_PART_CS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_ALICE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_CS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FANTASY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.ListBookCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.BookListFilterPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class ListBookCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private ListBookCommandParser parser \u003d new ListBookCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String namesStr1 \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String namesStr2 \u003d NAME_PART_DESC_ALICE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String namesStr3 \u003d NAME_PART_DESC_ALICE + NAME_PART_DESC_CS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] namesArr1 \u003d {};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] namesArr2 \u003d {VALID_BOOKNAME_PART_ALICE};"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] namesArr3 \u003d {VALID_BOOKNAME_PART_ALICE, VALID_BOOKNAME_PART_CS};"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String authorsStr1 \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String authorsStr2 \u003d AUTHOR_PART_DESC_ALICE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String authorsStr3 \u003d AUTHOR_PART_DESC_ALICE + AUTHOR_PART_DESC_CS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] authorsArr1 \u003d {};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] authorsArr2 \u003d {VALID_AUTHOR_PART_ALICE};"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] authorsArr3 \u003d {VALID_AUTHOR_PART_ALICE, VALID_AUTHOR_PART_CS};"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String tagsStr1 \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String tagsStr2 \u003d TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String tagsStr3 \u003d TAG_DESC_TEXTBOOK + TAG_DESC_FANTASY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] tagsArr1 \u003d {};"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] tagsArr2 \u003d {VALID_TAG_TEXTBOOK};"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] tagsArr3 \u003d {VALID_TAG_TEXTBOOK, VALID_TAG_FANTASY};"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String ratingsStr1 \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String ratingsStr2 \u003d RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String ratingsStr3 \u003d RATING_DESC_ALICE + RATING_DESC_CS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] ratingsArr1 \u003d {};"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] ratingsArr2 \u003d {VALID_RATING_ALICE};"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] ratingsArr3 \u003d {VALID_RATING_ALICE, VALID_RATING_CS};"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String argsStr1 \u003d PREAMBLE_WHITESPACE + namesStr1 + authorsStr1 + tagsStr1 + ratingsStr1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String argsStr2 \u003d PREAMBLE_WHITESPACE + namesStr2 + authorsStr2 + tagsStr2 + ratingsStr2;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String argsStr3 \u003d PREAMBLE_WHITESPACE + namesStr3 + authorsStr3 + tagsStr3 + ratingsStr3;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate predicate1 \u003d new BookListFilterPredicate("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(namesArr1),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(authorsArr1),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(tagsArr1),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(ratingsArr1)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate predicate2 \u003d new BookListFilterPredicate("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(namesArr2),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(authorsArr2),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(tagsArr2),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(ratingsArr2)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate predicate3 \u003d new BookListFilterPredicate("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(namesArr3),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(authorsArr3),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(tagsArr3),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(ratingsArr3)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertParseSuccess(parser, argsStr1, new ListBookCommand(predicate1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertParseSuccess(parser, argsStr2, new ListBookCommand(predicate2));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertParseSuccess(parser, argsStr3, new ListBookCommand(predicate3));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void parse_wrongValue_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListBookCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String argsStr \u003d PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertParseFailure(parser, argsStr, expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListReviewCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.commands.ListReviewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class ListReviewCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private ListReviewCommandParser parser \u003d new ListReviewCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void parse_validArgs_returnsListReviewCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ListReviewCommand(INDEX_FIRST_BOOK));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListReviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 9,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static final String INVALID_AUTHOR \u003d \"dsf#d1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static final String INVALID_RATING \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static final String VALID_NAME \u003d \"Silent Walker\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static final String VALID_AUTHOR \u003d \"John Smith\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static final String VALID_RATING \u003d \"6\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"fantasy\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"textbook\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertEquals(INDEX_FIRST_BOOK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertEquals(INDEX_FIRST_BOOK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookName expectedName \u003d new BookName(VALID_NAME);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseBookName(VALID_NAME));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookName expectedName \u003d new BookName(VALID_NAME);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseBookName(nameWithWhitespace));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parseAuthor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAuthor((String) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parseAuthor_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAuthor(INVALID_AUTHOR));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parseAuthor_validValueWithoutWhitespace_returnsAuthor() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Author expectedAuthor \u003d new Author(VALID_AUTHOR);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedAuthor, ParserUtil.parseAuthor(VALID_AUTHOR));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parseAuthor_validValueWithWhitespace_returnsTrimmedAuthor() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_AUTHOR + WHITESPACE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Author expectedAuthor \u003d new Author(VALID_AUTHOR);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedAuthor, ParserUtil.parseAuthor(phoneWithWhitespace));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parseRating_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRating((String) null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parseRating_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseRating(INVALID_RATING));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parseRating_validValueWithoutWhitespace_returnsRating() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Rating expectedRating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedRating, ParserUtil.parseRating(VALID_RATING));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void parseRating_validValueWithWhitespace_returnsTrimmedRating() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String ratingWithWhitespace \u003d WHITESPACE + VALID_RATING + WHITESPACE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Rating expectedRating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedRating, ParserUtil.parseRating(ratingWithWhitespace));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 3,
      "-": 133,
      "0blivious": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectReviewCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_REVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.logic.commands.SelectReviewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class SelectReviewCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private SelectReviewCommandParser parser \u003d new SelectReviewCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void parse_validArgs_returnsSelectReviewCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectReviewCommand(INDEX_FIRST_REVIEW));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectReviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SortBookCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMPTY_STR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FIRST_SUBORDER_ASC_WITH_PREFIX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FIRST_SUBORDER_DES_WITH_PREFIX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ORDER_WITH_PREFIX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SORT_TYPE_WITH_PREFIX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORDER_ASC_WITHOUT_PREFIX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORDER_ASC_WITH_PREFIX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORDER_DES_WITHOUT_PREFIX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORDER_DES_WITH_PREFIX;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SECOND_SUBORDER_DES_WITH_PREFIX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_AUTHOR_WITHOUT_PREFIX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_AUTHOR_WITH_PREFIX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_NAME_WITHOUT_PREFIX;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_NAME_WITH_PREFIX;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_RATING_WITHOUT_PREFIX;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_RATING_WITH_PREFIX;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.THIRD_SUBORDER_DES_WITH_PREFIX;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.logic.commands.SortBookCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "public class SortBookCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private SortBookCommandParser parser \u003d new SortBookCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void parse_validValue_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        List\u003cString\u003e types \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // without specify order with one type"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        types.add(SORT_AUTHOR_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            SORT_AUTHOR_WITH_PREFIX,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            new SortBookCommand(types, null, new HashMap\u003c\u003e()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // with main order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            SORT_AUTHOR_WITH_PREFIX + ORDER_ASC_WITH_PREFIX,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            new SortBookCommand(types, ORDER_ASC_WITHOUT_PREFIX, new HashMap\u003c\u003e()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // without specify order with two types"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        types.add(SORT_NAME_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            SORT_AUTHOR_WITH_PREFIX + SORT_NAME_WITH_PREFIX,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            new SortBookCommand(types, null, new HashMap\u003c\u003e()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // with sub order"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map.put(SORT_AUTHOR_WITHOUT_PREFIX, ORDER_DES_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            SORT_AUTHOR_WITH_PREFIX + SORT_NAME_WITH_PREFIX + FIRST_SUBORDER_DES_WITH_PREFIX,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            new SortBookCommand(types,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                map));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // with both main and sub order"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            SORT_AUTHOR_WITH_PREFIX"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                + SORT_NAME_WITH_PREFIX"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                + ORDER_DES_WITH_PREFIX"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                + FIRST_SUBORDER_DES_WITH_PREFIX,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            new SortBookCommand(types,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                ORDER_DES_WITHOUT_PREFIX,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                map));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // with only 3rd order"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map.put(SORT_RATING_WITHOUT_PREFIX, ORDER_DES_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        types.add(SORT_RATING_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            SORT_AUTHOR_WITH_PREFIX"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                + SORT_NAME_WITH_PREFIX"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                + SORT_RATING_WITH_PREFIX"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                + THIRD_SUBORDER_DES_WITH_PREFIX,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            new SortBookCommand(types,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                map));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortBookCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // missing sort type"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertParseFailure(parser, SortBookCommand.COMMAND_WORD + ORDER_ASC_WITH_PREFIX, expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortBookCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // invalid type"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertParseFailure(parser, SortBookCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            + INVALID_SORT_TYPE_WITH_PREFIX + ORDER_DES_WITH_PREFIX, expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // invalid order"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertParseFailure(parser, SortBookCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            + SORT_NAME_WITH_PREFIX + INVALID_ORDER_WITH_PREFIX, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // empty parser"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertParseFailure(parser, SortBookCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            + EMPTY_STR, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // extra sub Order"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertParseFailure(parser, SortBookCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            + SORT_RATING_WITH_PREFIX"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            + FIRST_SUBORDER_ASC_WITH_PREFIX"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            + SECOND_SUBORDER_DES_WITH_PREFIX, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/model/BookShelfTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_CS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEWMESSAGE_ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEWTITLE_ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FANTASY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALI;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALICE_REVIEW;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateReviewException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.testutil.ReviewBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookShelfTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private final BookShelf bookShelf \u003d new BookShelf();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(Collections.emptyList(), bookShelf.getBookList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.resetData(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void resetData_withValidReadOnlyBookShelf_replacesData() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookShelf newData \u003d getTypicalBookShelf();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.resetData(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(newData, bookShelf);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void resetData_withDuplicateBooks_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Two books with the same identity fields"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALI).withAuthor(VALID_AUTHOR_ALICE)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .withBookName(VALID_BOOKNAME_ALICE)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .withTags(VALID_TAG_FANTASY)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cBook\u003e newBooks \u003d Arrays.asList(ALI, editedAlice);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cReview\u003e newReviews \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookShelfStub newData \u003d new BookShelfStub(newBooks, newReviews);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(DuplicateBookException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.resetData(newData);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void resetData_withDuplicateReviews_throwsDuplicateReviewwException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Two reviews with the same identity fields"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Review editedAliceReview \u003d new ReviewBuilder().withReviewTitle(VALID_REVIEWTITLE_ALICE)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .withBookName(VALID_BOOKNAME_ALICE)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .withReviewMessage(VALID_REVIEWMESSAGE_ALICE)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cBook\u003e newBooks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cReview\u003e newReviews \u003d Arrays.asList(ALICE_REVIEW, editedAliceReview);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookShelfStub newData \u003d new BookShelfStub(newBooks, newReviews);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(DuplicateReviewException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.resetData(newData);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void hasBook_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.hasBook(null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void hasReview_nullReview_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.hasReview(null);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void hasBook_bookNotInBookShelf_returnsFalse() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(bookShelf.hasBook(ALI));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void hasReview_reviewNotInBookShelf_returnsFalse() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(bookShelf.hasReview(ALICE_REVIEW));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void hasBook_bookInBookShelf_returnsTrue() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.addBook(ALI);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(bookShelf.hasBook(ALI));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void hasReview_reviewInBookShelf_returnsTrue() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.addReview(ALICE_REVIEW);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(bookShelf.hasReview(ALICE_REVIEW));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void hasBook_bookWithSameIdentityFieldsInBookShelf_returnsTrue() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.addBook(ALI);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALI).withAuthor(VALID_AUTHOR_CS).withTags(VALID_TAG_TEXTBOOK)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(bookShelf.hasBook(editedAlice));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void hasReview_reviewWithSameIdentityFieldsInBookShelf_returnsTrue() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.addReview(ALICE_REVIEW);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Review editedAliceReview \u003d new ReviewBuilder().withReviewTitle(VALID_REVIEWTITLE_ALICE)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .withBookName(VALID_BOOKNAME_ALICE).withReviewMessage(VALID_REVIEWMESSAGE_ALICE).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(bookShelf.hasReview(editedAliceReview));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void getBookShelf_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.getBookList().remove(0);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.addListener(listener);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.addBook(ALI);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.addListener(listener);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.removeListener(listener);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookShelf.addBook(ALI);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * A stub ReadOnlyBookShelf whose books / books list can violate interface constraints."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static class BookShelfStub implements ReadOnlyBookShelf {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        private final ObservableList\u003cBook\u003e books \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        private final ObservableList\u003cReview\u003e reviews \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookShelfStub(Collection\u003cBook\u003e books, Collection\u003cReview\u003e reviews) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            this.books.setAll(books);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            this.reviews.setAll(reviews);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        public ObservableList\u003cBook\u003e getBookList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            return books;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        public ObservableList\u003cReview\u003e getReviewList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            return reviews;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 7,
      "EleenYang": 189,
      "0blivious": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookShelfBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(new BookShelf(), new BookShelf(modelManager.getBookShelf()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(null, modelManager.getSelectedBook());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        userPrefs.setBookShelfFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        userPrefs.setBookShelfFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBookShelfFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.setBookShelfFilePath(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBookShelfFilePath_validPath_setsBookShelfFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.setBookShelfFilePath(path);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(path, modelManager.getBookShelfFilePath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void hasBook_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.hasBook(null);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void hasBook_bookNotInBookShelf_returnsFalse() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(modelManager.hasBook(ALI));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void hasBook_bookInBookShelf_returnsTrue() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.addBook(ALI);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(modelManager.hasBook(ALI));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void deleteBook_bookIsSelectedAndFirstBookInFilteredBookList_selectionCleared() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.addBook(ALI);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.setSelectedBook(ALI);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.deleteBook(ALI);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(null, modelManager.getSelectedBook());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void deleteBook_bookIsSelectedAndSecondBookInFilteredBookList_firstBookSelected() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.addBook(ALI);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.addBook(CS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(Arrays.asList(ALI, CS), modelManager.getFilteredBookList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.setSelectedBook(CS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.deleteBook(CS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(ALI, modelManager.getSelectedBook());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook_bookIsSelected_selectedBookUpdated() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.addBook(ALI);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.setSelectedBook(ALI);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book updatedAlice \u003d new BookBuilder(ALI).withRating(VALID_RATING_ALICE).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.setBook(ALI, updatedAlice);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedBook());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void getFilteredBookList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.getFilteredBookList().remove(0);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setSelectedBook_bookNotInFilteredBookList_throwsBookNotFoundException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(BookNotFoundException.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.setSelectedBook(ALI);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setSelectedBook_bookInFilteredBookList_setsSelectedBook() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.addBook(ALI);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(Collections.singletonList(ALI), modelManager.getFilteredBookList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.setSelectedBook(ALI);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(ALI, modelManager.getSelectedBook());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookShelf bookShelf \u003d new BookShelfBuilder().withBook(ALI).withBook(CS).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookShelf differentBookShelf \u003d new BookShelf();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager \u003d new ModelManager(bookShelf, userPrefs);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(bookShelf, userPrefs);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different bookShelf -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentBookShelf, userPrefs)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String[] keywords \u003d ALI.getBookName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.updateFilteredBookList(new BookNameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(bookShelf, userPrefs)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        modelManager.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        differentUserPrefs.setBookShelfFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(bookShelf, differentUserPrefs)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 122,
      "0blivious": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void setBookShelfFilePathFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setBookShelfFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedBookShelfTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOKTHIEF;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookShelfBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class VersionedBookShelfTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final ReadOnlyBookShelf bookShelfWithAlice \u003d new BookShelfBuilder().withBook(ALI).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final ReadOnlyBookShelf bookShelfWithCs \u003d new BookShelfBuilder().withBook(CS).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final ReadOnlyBookShelf bookShelfWithThief \u003d new BookShelfBuilder().withBook(BOOKTHIEF).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final ReadOnlyBookShelf emptyBookShelf \u003d new BookShelfBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void commit_singleBookList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList(emptyBookShelf);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        versionedBookShelf.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertBookShelfListStatus(versionedBookShelf,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.singletonList(emptyBookShelf),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void commit_multipleBookShelfPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        versionedBookShelf.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertBookShelfListStatus(versionedBookShelf,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(emptyBookShelf, bookShelfWithAlice, bookShelfWithCs),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                bookShelfWithCs,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void commit_multipleBookShelfPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedBookShelf, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        versionedBookShelf.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertBookShelfListStatus(versionedBookShelf,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.singletonList(emptyBookShelf),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void canUndo_multipleBookShelfPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(versionedBookShelf.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void canUndo_multipleBookShelfPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedBookShelf, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(versionedBookShelf.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void canUndo_singleBookShelf_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList(emptyBookShelf);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(versionedBookShelf.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void canUndo_multipleBookShelfPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedBookShelf, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(versionedBookShelf.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void canRedo_multipleBookShelfPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedBookShelf, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(versionedBookShelf.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void canRedo_multipleBookShelfPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithThief);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedBookShelf, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(versionedBookShelf.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void canRedo_singleBookShelf_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList(emptyBookShelf);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(versionedBookShelf.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void canRedo_multipleBookShelfPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(versionedBookShelf.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void undo_multipleBookShelfPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        versionedBookShelf.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertBookShelfListStatus(versionedBookShelf,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.singletonList(emptyBookShelf),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                bookShelfWithAlice,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.singletonList(bookShelfWithCs));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void undo_multipleBookShelfPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedBookShelf, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        versionedBookShelf.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertBookShelfListStatus(versionedBookShelf,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(bookShelfWithAlice, bookShelfWithCs));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void undo_singleBookShelf_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList(emptyBookShelf);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertThrows(VersionedBookShelf.NoUndoableStateException.class, versionedBookShelf::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void undo_multipleBookShelfPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedBookShelf, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertThrows(VersionedBookShelf.NoUndoableStateException.class, versionedBookShelf::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void redo_multipleBookShelfPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedBookShelf, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        versionedBookShelf.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertBookShelfListStatus(versionedBookShelf,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Arrays.asList(emptyBookShelf, bookShelfWithAlice),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                bookShelfWithCs,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void redo_multipleBookShelfPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedBookShelf, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        versionedBookShelf.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertBookShelfListStatus(versionedBookShelf,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.singletonList(emptyBookShelf),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                bookShelfWithAlice,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                Collections.singletonList(bookShelfWithCs));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void redo_singleBookShelf_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList(emptyBookShelf);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertThrows(VersionedBookShelf.NoRedoableStateException.class, versionedBookShelf::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void redo_multipleBookShelfPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                emptyBookShelf, bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertThrows(VersionedBookShelf.NoRedoableStateException.class, versionedBookShelf::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d prepareBookShelfList(bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf copy \u003d prepareBookShelfList(bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(versionedBookShelf.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(versionedBookShelf.equals(versionedBookShelf));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(versionedBookShelf.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(versionedBookShelf.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf differentBookShelfList \u003d prepareBookShelfList(bookShelfWithCs, bookShelfWithThief);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(versionedBookShelf.equals(differentBookShelfList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf differentCurrentStatePointer \u003d prepareBookShelfList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                bookShelfWithAlice, bookShelfWithCs);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedBookShelf, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(versionedBookShelf.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Asserts that {@code versionedBookList} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * states before {@code versionedBookList#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * and states after {@code versionedBookList#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private void assertBookShelfListStatus(VersionedBookShelf versionedBookShelf,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                                             List\u003cReadOnlyBookShelf\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                                             ReadOnlyBookShelf expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                                             List\u003cReadOnlyBookShelf\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(new BookShelf(versionedBookShelf), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        while (versionedBookShelf.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            versionedBookShelf.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (ReadOnlyBookShelf expectedBookShelf : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            assertEquals(expectedBookShelf, new BookShelf(versionedBookShelf));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            versionedBookShelf.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (ReadOnlyBookShelf expectedBookShelf : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            versionedBookShelf.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            assertEquals(expectedBookShelf, new BookShelf(versionedBookShelf));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(versionedBookShelf.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedBookShelf.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Creates and returns a {@code VersionedBookShelf} with the {@code bookShelfStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * {@code VersionedBookShelf#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private VersionedBookShelf prepareBookShelfList(ReadOnlyBookShelf... bookShelfStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(bookShelfStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        VersionedBookShelf versionedBookShelf \u003d new VersionedBookShelf(bookShelfStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (int i \u003d 1; i \u003c bookShelfStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            versionedBookShelf.resetData(bookShelfStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            versionedBookShelf.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return versionedBookShelf;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Shifts the {@code versionedBookShelf#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedBookShelf versionedBookShelf, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            versionedBookShelf.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 294,
      "0blivious": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/AuthorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class AuthorTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Author(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void constructor_invalidAuthor_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String invalidAuthor \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Author(invalidAuthor));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void isValidAuthor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null author"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Author.isValidAuthor(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String tooLongName \u003d \"This string is too long that it will not be accepted by author as \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                + \"no one has such a long name\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid author"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Author.isValidAuthor(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Author.isValidAuthor(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Author.isValidAuthor(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Author.isValidAuthor(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(Author.isValidAuthor(tooLongName)); // name too long to be considered as legal"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // valid author"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(Author.isValidAuthor(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(Author.isValidAuthor(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(Author.isValidAuthor(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(Author.isValidAuthor(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(Author.isValidAuthor(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 3,
      "0blivious": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookAuthorContainsKeywordPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookAuthorContainsKeywordPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookAuthorContainsKeywordPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookAuthorContainsKeywordPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookAuthorContainsKeywordPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookAuthorContainsKeywordPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookAuthorContainsKeywordPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "               new BookAuthorContainsKeywordPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Zero keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookAuthorContainsKeywordPredicate predicate \u003d new BookAuthorContainsKeywordPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withAuthor(\"Lewis Carroll\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        predicate \u003d new BookAuthorContainsKeywordPredicate(Collections.singletonList(\"Carroll\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withAuthor(\"Lewis Carroll\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        predicate \u003d new BookAuthorContainsKeywordPredicate(Arrays.asList(\"Lewis\", \"Carroll\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withAuthor(\"Lewis Carroll\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        predicate \u003d new BookAuthorContainsKeywordPredicate(Arrays.asList(\"Lewis\", \"Carroll\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withAuthor(\"Alice Carroll\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        predicate \u003d new BookAuthorContainsKeywordPredicate(Arrays.asList(\"lEWis\", \"cARROLL\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withAuthor(\"Lewis Carroll\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookAuthorContainsKeywordPredicate predicate \u003d new BookAuthorContainsKeywordPredicate(Arrays.asList(\"Carroll\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withBookName(\"Lewis Zusak\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Keywords match name and rating, but does not match author"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        predicate \u003d new BookAuthorContainsKeywordPredicate(Arrays.asList(\"Alice\", \"Zusak\", \"9\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withBookName(\"Alice\").withAuthor(\"Carroll\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                .withRating(\"9\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookListFilterPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookListFilterPredicateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void equal() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e namePredicateFirst \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e authorPredicateFirst \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e tagPredicateFirst \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e ratingPredicateFirst \u003d Collections.singletonList(\"1\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e namePredicateSecond \u003d Collections.singletonList(\"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e authorPredicateSecond \u003d Collections.singletonList(\"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e tagPredicateSecond \u003d Collections.singletonList(\"second\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e ratingPredicateSecond \u003d Collections.singletonList(\"2\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate firstPredicate \u003d new BookListFilterPredicate(namePredicateFirst, authorPredicateFirst,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                tagPredicateFirst, ratingPredicateFirst);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate secondPredicate \u003d new BookListFilterPredicate(namePredicateSecond,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                authorPredicateSecond, tagPredicateSecond, ratingPredicateSecond);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookListFilterPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookListFilterPredicate(namePredicateFirst, authorPredicateFirst,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                        tagPredicateFirst, ratingPredicateFirst);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookNameContainsExactKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookNameContainsExactKeywordsPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookName firstPredicateKeywordList \u003d new BookName(\"first\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookName secondPredicateKeywordList \u003d new BookName(\"second\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookNameContainsExactKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new BookNameContainsExactKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookNameContainsExactKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new BookNameContainsExactKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookNameContainsExactKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new BookNameContainsExactKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookNameContainsExactKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new BookNameContainsExactKeywordsPredicate(new BookName(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withBookName(\"Alice\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        predicate \u003d new BookNameContainsExactKeywordsPredicate(new BookName(\"Alice in Wonderland\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withBookName(\"Alice in Wonderland\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        predicate \u003d new BookNameContainsExactKeywordsPredicate(new BookName(\"Alice In WONDERLAND\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withBookName(\"Alice In Wonderland\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookNameContainsExactKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new BookNameContainsExactKeywordsPredicate(new BookName(\"Carol\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withBookName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Keywords match author and rating, but does not match name"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        predicate \u003d new BookNameContainsExactKeywordsPredicate(new BookName(\"Rollin 9\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withBookName(\"Alice\").withAuthor(\"Rollin\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withRating(\"9\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void test_nameContainsSomeKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Some keywords"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookNameContainsExactKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new BookNameContainsExactKeywordsPredicate(new BookName(\"Bob Carol\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withBookName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Some non-matching keyword"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        predicate \u003d new BookNameContainsExactKeywordsPredicate(new BookName(\"Carol\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withBookName(\"Carol Bob\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Keywords in wrong order"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        predicate \u003d new BookNameContainsExactKeywordsPredicate(new BookName(\"Bob Carol\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withBookName(\"Carol Bob\").build()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookNameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new BookNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new BookNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookNameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                new BookNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Zero keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        BookNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withBookName(\"Alice\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        predicate \u003d new BookNameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withBookName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        predicate \u003d new BookNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withBookName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        predicate \u003d new BookNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withBookName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        predicate \u003d new BookNameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withBookName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookNameContainsKeywordsPredicate predicate \u003d new BookNameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withBookName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // Keywords match author and rating, but does not match name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        predicate \u003d new BookNameContainsKeywordsPredicate(Arrays.asList(\"Rollin\", \"9\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withBookName(\"Alice\").withAuthor(\"Rollin\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withRating(\"9\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 7,
      "0blivious": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookNameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new BookName(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void constructor_invalidBookName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String invalidBookName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new BookName(invalidBookName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void isValidBookName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e BookName.isValidBookName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String tooLongStr \u003d \"This string is too long that it will not be accepted by some attributes. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                + \"For example, the book name cannot be such long.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(BookName.isValidBookName(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(BookName.isValidBookName(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(BookName.isValidBookName(tooLongStr)); // book name too long"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(BookName.isValidBookName(\"A Book Name with /c\")); // illegal character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(BookName.isValidBookName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(BookName.isValidBookName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(BookName.isValidBookName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(BookName.isValidBookName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(BookName.isValidBookName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(BookName.isValidBookName(\"JoJo\u0027s Bizarre Adventure\")); // contains non-alphnum character"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 5,
      "0blivious": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookRatingMatchesScorePredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookRatingMatchesScorePredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr1 \u003d {\"1\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr2 \u003d {\"2\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Arrays.asList(arr1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(arr2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookRatingMatchesScorePredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookRatingMatchesScorePredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookRatingMatchesScorePredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookRatingMatchesScorePredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookRatingMatchesScorePredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookRatingMatchesScorePredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void test_ratingsContained_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr1 \u003d {\"1\"};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookRatingMatchesScorePredicate predicate \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookRatingMatchesScorePredicate(Arrays.asList(arr1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withRating(\"1\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr2 \u003d {\"1\", \"2\"};"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        predicate \u003d new BookRatingMatchesScorePredicate(Arrays.asList(arr2));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withRating(\"2\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void test_ratingsNotcontained_returnsFalse() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Non-matching rating"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr1 \u003d {\"1\", \"2\"};"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookRatingMatchesScorePredicate predicate \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookRatingMatchesScorePredicate(Arrays.asList(arr1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withRating(\"3\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookTagsContainExactKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookTagsContainExactKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr1 \u003d {\"fantasy\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr2 \u003d {\"textbook\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Arrays.asList(arr1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(arr2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookTagsContainExactKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookTagsContainExactKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookTagsContainExactKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookTagsContainExactKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookTagsContainExactKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookTagsContainExactKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr1 \u003d {\"fantasy\"};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookTagsContainExactKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new BookTagsContainExactKeywordsPredicate(Arrays.asList(arr1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withTags(\"fantasy\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withTags(\"fantasy\", \"textbook\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr2 \u003d {\"textbook\", \"fantasy\"};"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        predicate \u003d new BookTagsContainExactKeywordsPredicate(Arrays.asList(arr2));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withTags(\"fantasy\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String[] arr \u003d {\"textbook\", \"fantasy\"};"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookTagsContainExactKeywordsPredicate predicate \u003d new BookTagsContainExactKeywordsPredicate(Arrays.asList(arr));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withTags(\"popular\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/BookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_CS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_CS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FANTASY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        book.getTags().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void isSameBook() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(ALI.isSameBook(ALI));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(ALI.isSameBook(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different author -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(CS).withAuthor(VALID_AUTHOR_CS).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(ALI.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALI).withBookName(VALID_BOOKNAME_CS).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(ALI.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same name, same author, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALI).withAuthor(VALID_AUTHOR_ALICE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .withTags(VALID_TAG_TEXTBOOK).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(ALI.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same name, same phone, same email, same attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALI).withAuthor(VALID_AUTHOR_ALICE).withTags(VALID_TAG_FANTASY).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(ALI.isSameBook(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book aliceCopy \u003d new BookBuilder(ALI).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(ALI.equals(aliceCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(ALI.equals(ALI));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(ALI.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(ALI.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(ALI.equals(CS));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALI).withBookName(VALID_BOOKNAME_CS).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(ALI.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different author -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALI).withAuthor(VALID_AUTHOR_CS).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(ALI.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedAlice \u003d new BookBuilder(ALI).withTags(VALID_TAG_TEXTBOOK).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(ALI.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/RatingTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class RatingTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Rating(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void constructor_invalidRating_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String invalidRating \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Rating(invalidRating));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void isValidRating() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // null rating"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Rating.isValidRating(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // blank rating"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid number"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\"15\")); // missing local part"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\"100\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\"6162333\")); // missing domain name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\"10-\")); // invalid symbol -"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\"-6\")); // invalid symbol -"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\"10.5\")); // invalid symbol ."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\"peterjack\")); // invalid alphabet character"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\"..;3\")); // invalid symbol"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\" 10\")); // leading space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(Rating.isValidRating(\"10 \")); // trailing space"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // valid rating"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(Rating.isValidRating(\"5\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(Rating.isValidRating(\"0\")); // minimal"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(Rating.isValidRating(\"10\")); // maximal"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(Rating.isValidRating(\"6\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/ReviewBookNameContainsExactKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.testutil.ReviewBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class ReviewBookNameContainsExactKeywordsPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        BookName firstPredicateKeywordList \u003d new BookName(\"first\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        BookName secondPredicateKeywordList \u003d new BookName(\"second\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ReviewBookNameContainsExactKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                new ReviewBookNameContainsExactKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ReviewBookNameContainsExactKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                new ReviewBookNameContainsExactKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ReviewBookNameContainsExactKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                new ReviewBookNameContainsExactKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ReviewBookNameContainsExactKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                new ReviewBookNameContainsExactKeywordsPredicate(new BookName(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(predicate.test(new ReviewBuilder().withBookName(\"Alice\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        predicate \u003d new ReviewBookNameContainsExactKeywordsPredicate(new BookName(\"Alice in Wonderland\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(predicate.test(new ReviewBuilder().withBookName(\"Alice in Wonderland\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        predicate \u003d new ReviewBookNameContainsExactKeywordsPredicate(new BookName(\"Alice In WONDERLAND\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(predicate.test(new ReviewBuilder().withBookName(\"Alice In Wonderland\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ReviewBookNameContainsExactKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                new ReviewBookNameContainsExactKeywordsPredicate(new BookName(\"Carol\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(predicate.test(new ReviewBuilder().withBookName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // Keywords match message and title, but does not match name"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        predicate \u003d new ReviewBookNameContainsExactKeywordsPredicate(new BookName(\"Rollin 9\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(predicate.test(new ReviewBuilder().withBookName(\"Alice\").withReviewMessage(\"Rollin\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                .withReviewTitle(\"9\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void test_nameContainsSomeKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // Some keywords"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ReviewBookNameContainsExactKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                new ReviewBookNameContainsExactKeywordsPredicate(new BookName(\"Bob Carol\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(predicate.test(new ReviewBuilder().withBookName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // Some non-matching keyword"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        predicate \u003d new ReviewBookNameContainsExactKeywordsPredicate(new BookName(\"Carol\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(predicate.test(new ReviewBuilder().withBookName(\"Carol Bob\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // Keywords in wrong order"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        predicate \u003d new ReviewBookNameContainsExactKeywordsPredicate(new BookName(\"Bob Carol\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(predicate.test(new ReviewBuilder().withBookName(\"Carol Bob\").build()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/ReviewTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_CS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEWMESSAGE_CS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEWTITLE_CS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.testutil.ReviewBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class ReviewTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                new Review(null, new BookName(VALID_BOOKNAME_CS), VALID_DATE, VALID_REVIEWMESSAGE_CS));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Review("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                new ReviewTitle(VALID_REVIEWTITLE_CS), null, VALID_DATE, VALID_REVIEWMESSAGE_CS));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Review(new ReviewTitle(VALID_REVIEWTITLE_CS),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                new BookName(VALID_BOOKNAME_CS), null, VALID_REVIEWMESSAGE_CS));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Review("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                new ReviewTitle(VALID_REVIEWTITLE_CS), new BookName(VALID_BOOKNAME_CS), VALID_DATE, null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Review review \u003d new ReviewBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Review reviewCopy \u003d new ReviewBuilder(review).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(review.equals(reviewCopy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(review.equals(review));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(review.equals(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(review.equals(5));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // different review -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(review.equals(new Review(new ReviewTitle(\"A great fairytale\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                new BookName(\"Alice in Wonderland\"), VALID_DATE, \"While...\")));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // different book name -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Review editedReview \u003d new ReviewBuilder(review).withBookName(VALID_BOOKNAME_CS).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(review.equals(editedReview));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // different review title -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        editedReview \u003d new ReviewBuilder(review).withReviewTitle(VALID_REVIEWTITLE_CS).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(review.equals(editedReview));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // different message -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        editedReview \u003d new ReviewBuilder(review).withReviewMessage(VALID_REVIEWMESSAGE_CS).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(review.equals(editedReview));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/ReviewTitleTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class ReviewTitleTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ReviewTitle(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void constructor_invalidReviewTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        String invalidReviewTitle \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new ReviewTitle(invalidReviewTitle));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void isValidReviewTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ReviewTitle.isValidReviewTitle(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String tooLongStr \u003d \"This string is too long that it will not be accepted by some attributes. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                + \"For example, the book name cannot be such long.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(ReviewTitle.isValidReviewTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(ReviewTitle.isValidReviewTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(ReviewTitle.isValidReviewTitle(\"a review title with /c\")); // invalid name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(ReviewTitle.isValidReviewTitle(tooLongStr)); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(ReviewTitle.isValidReviewTitle(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(ReviewTitle.isValidReviewTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(ReviewTitle.isValidReviewTitle(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(ReviewTitle.isValidReviewTitle(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(ReviewTitle.isValidReviewTitle(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(ReviewTitle.isValidReviewTitle(\"Annie\u0027s diary\")); // special character"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertTrue(ReviewTitle.isValidReviewTitle(\"Mary\u0026Max\")); // special character"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 38,
      "EleenYang": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/UniqueBookListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_CS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FANTASY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class UniqueBookListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final UniqueBookList uniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void contains_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.contains(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void contains_bookNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(uniqueBookList.contains(ALI));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void contains_bookInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(uniqueBookList.contains(ALI));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void contains_bookWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALI).withAuthor(VALID_AUTHOR_ALICE).withTags(VALID_TAG_FANTASY)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(uniqueBookList.contains(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void add_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void add_duplicateBook_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(DuplicateBookException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook_nullTargetBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBook(null, ALI);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook_nullEditedBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBook(ALI, null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook_targetBookNotInList_throwsBookNotFoundException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(BookNotFoundException.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBook(ALI, ALI);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook_editedBookIsSameBook_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBook(ALI, ALI);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedUniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook_editedBookHasSameIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedAlice \u003d new BookBuilder(ALI).withAuthor(VALID_AUTHOR_CS).withTags(VALID_TAG_TEXTBOOK)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBook(ALI, editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedUniqueBookList.add(editedAlice);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook_editedBookHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBook(ALI, CS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedUniqueBookList.add(CS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBook_editedBookHasNonUniqueIdentity_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(CS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(DuplicateBookException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBook(ALI, CS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void remove_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.remove(null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void remove_bookDoesNotExist_throwsBookNotFoundException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(BookNotFoundException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.remove(ALI);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void remove_existingBook_removesBook() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.remove(ALI);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBooks_nullUniqueBookList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBooks((UniqueBookList) null);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBooks_uniqueBookList_replacesOwnListWithProvidedUniqueBookList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedUniqueBookList.add(CS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBooks(expectedUniqueBookList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBooks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBooks((List\u003cBook\u003e) null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBooks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.add(ALI);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        List\u003cBook\u003e bookList \u003d Collections.singletonList(CS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBooks(bookList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedUniqueBookList.add(CS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void setBooks_listWithDuplicateBooks_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        List\u003cBook\u003e listWithDuplicateBooks \u003d Arrays.asList(ALI, ALI);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(DuplicateBookException.class);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.setBooks(listWithDuplicateBooks);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uniqueBookList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 187
    }
  },
  {
    "path": "src/test/java/seedu/address/model/book/UniqueReviewListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ALTERNATIVE_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALICE_REVIEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CS_REVIEW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.exceptions.DuplicateReviewException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.exceptions.ReviewNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.testutil.ReviewBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class UniqueReviewListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private final UniqueReviewList uniqueReviewList \u003d new UniqueReviewList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void contains_nullReview_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.contains(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void contains_reviewNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(uniqueReviewList.contains(ALICE_REVIEW));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void contains_reviewInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.add(ALICE_REVIEW);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(uniqueReviewList.contains(ALICE_REVIEW));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void contains_reviewWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.add(ALICE_REVIEW);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Review editedAlice \u003d new ReviewBuilder(ALICE_REVIEW).withDateCreated(VALID_ALTERNATIVE_DATE).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(uniqueReviewList.contains(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void add_nullReview_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void add_duplicateReview_throwsDuplicateReviewException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.add(ALICE_REVIEW);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        thrown.expect(DuplicateReviewException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.add(ALICE_REVIEW);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void setReview_nullTargetReview_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.setReview(null, ALICE_REVIEW);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void setReview_nullEditedReview_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.setReview(ALICE_REVIEW, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void setReview_targetReviewNotInList_throwsReviewNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        thrown.expect(ReviewNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.setReview(ALICE_REVIEW, ALICE_REVIEW);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void setReview_editedReviewIsSameReview_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.add(ALICE_REVIEW);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.setReview(ALICE_REVIEW, ALICE_REVIEW);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        UniqueReviewList expectedUniqueReviewList \u003d new UniqueReviewList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        expectedUniqueReviewList.add(ALICE_REVIEW);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertEquals(expectedUniqueReviewList, uniqueReviewList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void setReview_editedReviewHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.add(ALICE_REVIEW);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Review editedAlice \u003d new ReviewBuilder(ALICE_REVIEW).withDateCreated(VALID_ALTERNATIVE_DATE).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.setReview(ALICE_REVIEW, editedAlice);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        UniqueReviewList expectedUniqueReviewList \u003d new UniqueReviewList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        expectedUniqueReviewList.add(editedAlice);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertEquals(expectedUniqueReviewList, uniqueReviewList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void setReview_editedReviewHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.add(ALICE_REVIEW);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.setReview(ALICE_REVIEW, CS_REVIEW);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        UniqueReviewList expectedUniqueReviewList \u003d new UniqueReviewList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        expectedUniqueReviewList.add(CS_REVIEW);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertEquals(expectedUniqueReviewList, uniqueReviewList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void setReview_editedReviewHasNonUniqueIdentity_throwsDuplicateReviewException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.add(ALICE_REVIEW);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.add(CS_REVIEW);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        thrown.expect(DuplicateReviewException.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.setReview(ALICE_REVIEW, CS_REVIEW);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void remove_nullReview_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.remove(null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void remove_reviewDoesNotExist_throwsReviewNotFoundException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        thrown.expect(ReviewNotFoundException.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.remove(ALICE_REVIEW);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void remove_existingReview_removesReview() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.add(ALICE_REVIEW);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.remove(ALICE_REVIEW);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        UniqueReviewList expectedUniqueReviewList \u003d new UniqueReviewList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertEquals(expectedUniqueReviewList, uniqueReviewList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void setReviews_nullUniqueReviewList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.setReviews((UniqueReviewList) null);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void setReviews_uniqueReviewList_replacesOwnListWithProvidedUniqueReviewList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.add(ALICE_REVIEW);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        UniqueReviewList expectedUniqueReviewList \u003d new UniqueReviewList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        expectedUniqueReviewList.add(CS_REVIEW);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.setReviews(expectedUniqueReviewList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertEquals(expectedUniqueReviewList, uniqueReviewList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void setReviews_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.setReviews((List\u003cReview\u003e) null);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void setReviews_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.add(ALICE_REVIEW);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        List\u003cReview\u003e reviewList \u003d Collections.singletonList(CS_REVIEW);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.setReviews(reviewList);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        UniqueReviewList expectedUniqueReviewList \u003d new UniqueReviewList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        expectedUniqueReviewList.add(CS_REVIEW);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertEquals(expectedUniqueReviewList, uniqueReviewList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void setReviews_listWithDuplicateReviews_throwsDuplicateReviewException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        List\u003cReview\u003e listWithDuplicateReviews \u003d Arrays.asList(ALICE_REVIEW, ALICE_REVIEW);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        thrown.expect(DuplicateReviewException.class);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.setReviews(listWithDuplicateReviews);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uniqueReviewList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 184
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void constructor_tagTooLong_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String invalidTagName \u003d \"thisisaveryveryveryverylongtagtoolongtobeconsidered\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 6,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.storage.JsonAdaptedBook.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class JsonAdaptedBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String INVALID_BOOKNAME \u003d \"This string is too long that it will not be accepted by some \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"attributes. For example, the book name cannot be such long.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String INVALID_AUTHOR \u003d \"J.K\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String INVALID_RATING \u003d \"11\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#good\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String VALID_BOOKNAME \u003d CS.getBookName().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String VALID_AUTHOR \u003d CS.getAuthor().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String VALID_RATING \u003d CS.getRating().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d CS.getTags().stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_validBookDetails_returnsbook() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(CS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(CS, book.toModelType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_invalidBookName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new JsonAdaptedBook(INVALID_BOOKNAME, VALID_AUTHOR, VALID_RATING, VALID_TAGS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d BookName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_nullBookName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(null, VALID_AUTHOR, VALID_RATING, VALID_TAGS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, BookName.class.getSimpleName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_invalidAuthor_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new JsonAdaptedBook(VALID_BOOKNAME, INVALID_AUTHOR, VALID_RATING, VALID_TAGS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d Author.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_nullAuthor_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(VALID_BOOKNAME, null, VALID_RATING, VALID_TAGS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Author.class.getSimpleName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_invalidRating_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new JsonAdaptedBook(VALID_BOOKNAME, VALID_AUTHOR, INVALID_RATING, VALID_TAGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d Rating.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_nullRating_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(VALID_BOOKNAME, VALID_AUTHOR, null, VALID_TAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new JsonAdaptedBook(VALID_BOOKNAME, VALID_AUTHOR, VALID_RATING, invalidTags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, book::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedReviewTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.storage.JsonAdaptedReview.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CS_REVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.ReviewTitle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class JsonAdaptedReviewTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String INVALID_BOOKNAME \u003d \"This string is too long that it will not be accepted by some \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"attributes. For example, the book name cannot be such long.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String INVALID_REVIEW_TITLE \u003d \"This string is too long that it will not be accepted by some \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"attributes. For example, the book name cannot be such long.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String VALID_REVIEW_TITLE \u003d CS_REVIEW.getTitle().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String VALID_BOOKNAME \u003d CS_REVIEW.getBookName().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String VALID_DATE \u003d CS_REVIEW.getDateCreated();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String VALID_MESSAGE \u003d CS_REVIEW.getReviewMessage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_validReviewDetails_returnsreview() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedReview review \u003d new JsonAdaptedReview(CS_REVIEW);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(CS_REVIEW, review.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_invalidReviewTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedReview review \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new JsonAdaptedReview(INVALID_REVIEW_TITLE, VALID_BOOKNAME, VALID_DATE, VALID_MESSAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d ReviewTitle.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, review::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_nullReviewTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedReview review \u003d new JsonAdaptedReview(null, VALID_BOOKNAME, VALID_DATE, VALID_MESSAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ReviewTitle.class.getSimpleName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, review::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_invalidBookName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedReview review \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                new JsonAdaptedReview(VALID_REVIEW_TITLE, INVALID_BOOKNAME, VALID_DATE, VALID_MESSAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d BookName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, review::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_nullBookName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedReview review \u003d new JsonAdaptedReview(VALID_REVIEW_TITLE, null, VALID_DATE, VALID_MESSAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, BookName.class.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, review::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_nullReviewMessage_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonAdaptedReview review \u003d new JsonAdaptedReview(VALID_REVIEW_TITLE, VALID_BOOKNAME, VALID_DATE, null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Review Content\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, review::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonBookShelfStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOKTHIEF;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.SECRETLIFE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class JsonBookShelfStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonBookShelfStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void readBookShelf_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        readBookShelf(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private java.util.Optional\u003cReadOnlyBookShelf\u003e readBookShelf(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return new JsonBookShelfStorage(Paths.get(filePath)).readBookShelf(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(readBookShelf(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        readBookShelf(\"notJsonFormatBookShelf.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void readBookShelf_invalidBookBookShelf_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        readBookShelf(\"invalidBookBookShelf.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void readBookShelf_invalidAndValidBookBookShelf_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        readBookShelf(\"invalidAndValidBookBookShelf.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void readAndSaveBookShelf_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempBookShelf.json\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookShelf original \u003d getTypicalBookShelf();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonBookShelfStorage jsonBookShelfStorage \u003d new JsonBookShelfStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        jsonBookShelfStorage.saveBookShelf(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ReadOnlyBookShelf readBack \u003d jsonBookShelfStorage.readBookShelf(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(original, new BookShelf(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        original.addBook(SECRETLIFE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        original.removeBook(BOOKTHIEF);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        jsonBookShelfStorage.saveBookShelf(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        readBack \u003d jsonBookShelfStorage.readBookShelf(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(original, new BookShelf(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        original.addBook(CS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        jsonBookShelfStorage.saveBookShelf(original); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        readBack \u003d jsonBookShelfStorage.readBookShelf().get(); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(original, new BookShelf(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void saveBookShelf_nullBookShelf_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        saveBookShelf(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Saves {@code BookShelf} at the specified {@code filePath}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private void saveBookShelf(ReadOnlyBookShelf bookShelf, String filePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            new JsonBookShelfStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                    .saveBookShelf(bookShelf, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void saveBookShelf_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        saveBookShelf(new BookShelf(), null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableBookShelfTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.testutil.TypicalBooks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class JsonSerializableBookShelfTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableBookShelfTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final Path TYPICAL_BOOKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalBooksBookShelf.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final Path INVALID_BOOK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidBookBookShelf.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final Path DUPLICATE_BOOK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateBookBookShelf.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_typicalBooksFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonSerializableBookShelf dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_BOOKS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                JsonSerializableBookShelf.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookShelf bookShelfFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookShelf typicalBooksBookShelf \u003d TypicalBooks.getTypicalBookShelf();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(bookShelfFromFile, typicalBooksBookShelf);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_invalidBookFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonSerializableBookShelf dataFromFile \u003d JsonUtil.readJsonFile(INVALID_BOOK_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                JsonSerializableBookShelf.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void toModelType_duplicateBooks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonSerializableBookShelf dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_BOOK_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                JsonSerializableBookShelf.class).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        thrown.expectMessage(JsonSerializableBookShelf.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        userPrefs.setBookShelfFilePath(Paths.get(\"data/bookshelf.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 1,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBookShelf;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonBookShelfStorage bookShelfStorage \u003d new JsonBookShelfStorage(getTempFilePath(\"bs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        storageManager \u003d new StorageManager(bookShelfStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void bookShelfReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "         * {@link JsonBookShelfStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonBookShelfStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookShelf original \u003d getTypicalBookShelf();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        storageManager.saveBookShelf(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ReadOnlyBookShelf retrieved \u003d storageManager.readBookShelf().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(original, new BookShelf(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void getBookShelfFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertNotNull(storageManager.getBookShelfFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 11,
      "-": 56,
      "0blivious": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * A utility class to help with building Book objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Harry Potter and the Deathly Hallows\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String DEFAULT_AUTHOR \u003d \"JK Rowling\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String DEFAULT_RATING \u003d \"7\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private BookName bookName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private Author author;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private Rating rating;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private Set\u003cReview\u003e reviews;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        bookName \u003d new BookName(DEFAULT_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        author \u003d new Author(DEFAULT_AUTHOR);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        rating \u003d new Rating(DEFAULT_RATING);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        reviews \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Initializes the BookBuilder with the data of {@code bookToCopy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookBuilder(Book bookToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        bookName \u003d bookToCopy.getBookName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        author \u003d bookToCopy.getAuthor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        rating \u003d bookToCopy.getRating();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(bookToCopy.getTags());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        reviews \u003d new HashSet\u003c\u003e(bookToCopy.getReviews());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Sets the {@code BookName} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookBuilder withBookName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.bookName \u003d new BookName(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Book} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Sets the {@code Author} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookBuilder withAuthor(String author) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.author \u003d new Author(author);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Sets the {@code Rating} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookBuilder withRating(String rating) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.rating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Builds a book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public Book build() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return new Book(bookName, author, rating, tags, reviews);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Build a book Life of Pi."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public Book buildLifePi() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        HashSet\u003cTag\u003e newtags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        newtags.add(new Tag(\"fantasy\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return new Book(new BookName(\"Life of Pi\"), new Author(\"Yann Martel\"), new Rating(\"9\"), newtags, reviews);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 21,
      "0blivious": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookShelfBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * A utility class to help with building BookShelf objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": " *     {@code BookShelf ab \u003d new BookShelfBuilder().withBook(Book book).build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookShelfBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private BookShelf bookShelf;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookShelfBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        bookShelf \u003d new BookShelf();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookShelfBuilder(BookShelf bookShelf) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.bookShelf \u003d bookShelf;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Adds a new {@code Book} to the {@code BookShelf} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookShelfBuilder withBook(Book book) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        bookShelf.addBook(book);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public BookShelf build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return bookShelf;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BookUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.AddBookCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.DeleteBookCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.ListBookCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * A utility class for Book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class BookUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns an add command string for adding the {@code book}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static String getAddBookCommand(Book book) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return AddBookCommand.COMMAND_WORD + \" \" + getBookDetails(book);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns an delete command string for delete the {@code book}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static String getDeleteBookCommand(Book book) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return DeleteBookCommand.COMMAND_WORD + \" \" + PREFIX_NAME + book.getBookName().fullName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns the part of command string for the given {@code book}\u0027s details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static String getBookDetails(Book book) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        sb.append(PREFIX_NAME + book.getBookName().fullName + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        sb.append(PREFIX_AUTHOR + book.getAuthor().fullName + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        sb.append(PREFIX_RATING + book.getRating().value + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        book.getTags().stream().forEach("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns the part of command string for the listBookCommand for one book."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static String getListBookCommand(Book book) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        sb.append(ListBookCommand.COMMAND_WORD + \" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        sb.append(PREFIX_NAME + book.getBookName().fullName.split(\"\\\\s+\")[0] + \" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        sb.append(PREFIX_AUTHOR + book.getAuthor().fullName.split(\"\\\\s+\")[0] + \" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        book.getTags().stream().forEach("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName.split(\"\\\\s+\")[0] + \" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        sb.append(PREFIX_RATING + book.getRating().value + \" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns the part of command string for the given {@code EditBookDescriptor}\u0027s details."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static String getEditBookDescriptorDetails(EditBookDescriptor descriptor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.getAuthor().ifPresent(author -\u003e sb.append(PREFIX_AUTHOR).append(author.fullName).append(\" \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.getRating().ifPresent(rating -\u003e sb.append(PREFIX_RATING).append(rating.value).append(\" \"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 15,
      "0blivious": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditBookDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * A utility class to help with building EditBookDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class EditBookDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private EditBookDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public EditBookDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor \u003d new EditBookDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public EditBookDescriptorBuilder(EditBookDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        this.descriptor \u003d new EditBookDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns an {@code EditBookDescriptor} with fields containing {@code book}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public EditBookDescriptorBuilder(Book book) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor \u003d new EditBookDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.setName(book.getBookName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.setRating(book.getRating());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.setAuthor(book.getAuthor());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.setTags(book.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Sets the {@code BookName} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public EditBookDescriptorBuilder withBookName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.setName(new BookName(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Sets the {@code Rating} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public EditBookDescriptorBuilder withRating(String rating) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.setRating(new Rating(rating));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Sets the {@code Author} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public EditBookDescriptorBuilder withAuthor(String author) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.setAuthor(new Author(author));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditBookDescriptor}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public EditBookDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public EditBookDescriptor build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ReviewBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.ReviewTitle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " * A utility class to help with building Review objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class ReviewBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"A send off fit for a wizard\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String DEFAULT_BOOKNAME \u003d \"Harry Potter and the Sorcerer\u0027s Stone\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"2019/03/16 18:20:00\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final String DEFAULT_MESSAGE \u003d \"There are still one or two questions left unanswered \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            + \"at the end of Harry Potter\u0027s last adventure...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private ReviewTitle reviewTitle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private BookName bookName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private String dateCreated;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private String reviewMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ReviewBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        reviewTitle \u003d new ReviewTitle(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookName \u003d new BookName(DEFAULT_BOOKNAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        dateCreated \u003d DEFAULT_DATE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        reviewMessage \u003d DEFAULT_MESSAGE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Initializes the ReviewBuilder with the data of {@code reviewToCopy}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ReviewBuilder(Review reviewToCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        reviewTitle \u003d reviewToCopy.getTitle();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        bookName \u003d reviewToCopy.getBookName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        dateCreated \u003d reviewToCopy.getDateCreated();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        reviewMessage \u003d reviewToCopy.getReviewMessage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Sets the {@code ReviewTitle} of the {@code Review} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ReviewBuilder withReviewTitle(String reviewTitle) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.reviewTitle \u003d new ReviewTitle(reviewTitle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Sets the {@code BookName} of the {@code Review} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ReviewBuilder withBookName(String bookName) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.bookName \u003d new BookName(bookName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Sets the {@code String} of the {@code Review} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ReviewBuilder withDateCreated(String dateCreated) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.dateCreated \u003d dateCreated;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Sets the {@code String} of the {@code Review} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public ReviewBuilder withReviewMessage(String reviewMessage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        this.reviewMessage \u003d reviewMessage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Builds a book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public Review build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return new Review(reviewTitle, bookName, dateCreated, reviewMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 18,
      "EleenYang": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerializableTestClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            + \"}\\n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns the middle index of the book in the {@code model}\u0027s book list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return Index.fromOneBased(model.getFilteredBookList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns the last index of the book in the {@code model}\u0027s book list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return Index.fromOneBased(model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns the book in the {@code model}\u0027s book list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static Book getBook(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return model.getFilteredBookList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "0blivious": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalBooks.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_CS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_CS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_CS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEWMESSAGE_ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEWMESSAGE_CS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEWTITLE_ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEWTITLE_CS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FANTASY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * A utility class containing a list of {@code Book} objects to be used in tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class TypicalBooks {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Book BOOKTHIEF \u003d new BookBuilder().withBookName(\"The Book Thief\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withAuthor(\"Markus Zusak\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withRating(\"7\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withTags(\"popular\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Book HUNGERGAME \u003d new BookBuilder().withBookName(\"The Hunger Games\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withAuthor(\"Suzanne Collins\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withRating(\"6\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withTags(\"fantasy\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Book KITERUNNER \u003d new BookBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withBookName(\"The Kite Runner\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withAuthor(\"Khaled Hosseini\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withRating(\"8\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Book LIFEPI \u003d new BookBuilder().withBookName(\"Life of Pi\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withAuthor(\"Yann Martel\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withRating(\"9\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withTags(\"fantasy\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Book LIFEWAO \u003d new BookBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withBookName(\"The Brief Wondrous Life of Oscar Wao\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withAuthor(\"Junot Diaz\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withRating(\"4\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Book MIDDLESEX \u003d new BookBuilder()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withBookName(\"Middlesex\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withAuthor(\"Jeffrey Eugenides\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withRating(\"6\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final Book FIFTYSHADE \u003d new BookBuilder()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .withBookName(\"Fifty Shades of Grey\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .withAuthor(\"Erika Leonard\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .withRating(\"2\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final Book MOCKINGBIRD \u003d new BookBuilder()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .withBookName(\"To Kill a Mocking Bird\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .withAuthor(\"Harper Lee\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .withRating(\"10\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Book SECRETLIFE \u003d new BookBuilder().withBookName(\"The Secret Life of Bees\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withAuthor(\"Sue Monk Kidd\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withRating(\"3\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Book TWILIGHT \u003d new BookBuilder()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withBookName(\"Twilight\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withAuthor(\"Stephenie Meyer\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withRating(\"2\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final Book ANOTHER_ERIKA_WORK \u003d new BookBuilder()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .withBookName(\"Fifty Shades Darker\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .withAuthor(\"Erika Leonard\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .withRating(\"1\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    // Manually added - Book\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Book ALI \u003d new BookBuilder().withBookName(VALID_BOOKNAME_ALICE).withAuthor(VALID_AUTHOR_ALICE)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withRating(VALID_RATING_ALICE).withTags(VALID_TAG_FANTASY).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final Book CS \u003d new BookBuilder().withBookName(VALID_BOOKNAME_CS).withAuthor(VALID_AUTHOR_CS)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .withRating(VALID_RATING_CS).withTags(VALID_TAG_TEXTBOOK, VALID_TAG_FANTASY)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final Review ALICE_REVIEW \u003d new ReviewBuilder().withReviewTitle(VALID_REVIEWTITLE_ALICE)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .withBookName(VALID_BOOKNAME_ALICE).withReviewMessage(VALID_REVIEWMESSAGE_ALICE).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final Review CS_REVIEW \u003d new ReviewBuilder().withReviewTitle(VALID_REVIEWTITLE_CS)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .withBookName(VALID_BOOKNAME_CS).withReviewMessage(VALID_REVIEWMESSAGE_CS).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    //Typical Reviews"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final Review BOOKTHIEF_REVIEW \u003d new ReviewBuilder()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .withReviewTitle(\"A Heartbreaking Story\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .withBookName(\"The Book Thief\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .withReviewMessage(\"I cried a lot when reading this book\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final Review HUNGERGAME_REVIEW \u003d new ReviewBuilder()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .withReviewTitle(\"Irresistible to Put Down\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .withBookName(\"Hunger Game\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .withReviewMessage(\"An amazing book series. But the plot is unreasonable sometimes. But there are a \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                    + \"number of things doesn\u0027t make sense.\")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String KEYWORD_MATCHING_LIFE \u003d \"life\"; // A keyword that matches life"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static final String KEYWORD_MATCHING_PRIDE \u003d \"Pride\"; // A keyword that matches Pride"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String KEYWORD_MATCHING_ZUSAK \u003d \"Zusak\"; // A keyword that matches Zusak"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String KEYWORD_MATCHING_COLLINS \u003d \"Collins\"; //A keyword that matches Collins"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String KEYWORD_MATCHING_SIX \u003d \"6\"; // A keyword that matches 6"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final String KEYWORD_MATCHING_FANTASY \u003d \"fantasy\"; // A keyword that matches fantasy"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private TypicalBooks() {} // prevents instantiation"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns an {@code BookShelf} with all the typical books."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    //TODO: add reviews into typical book shelf"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static BookShelf getTypicalBookShelf() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        BookShelf bs \u003d new BookShelf();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        for (Book book : getTypicalBooks()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            bs.addBook(book);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return bs;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static BookShelf getTypicalBookShelfWithReview(Review review) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        BookShelf bs \u003d new BookShelf();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        for (Book book : getTypicalBooks()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            bs.addBook(book);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        bs.addReview(review);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return bs;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static BookShelf getTypicalBookShelfWithAllReviews() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        BookShelf bs \u003d new BookShelf();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        for (Book book : getTypicalBooks()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            bs.addBook(book);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        for (Review review : getTypicalReviews()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            bs.addReview(review);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return bs;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static List\u003cBook\u003e getTypicalBooks() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BOOKTHIEF, HUNGERGAME, KITERUNNER, LIFEPI, LIFEWAO,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                MIDDLESEX, FIFTYSHADE, MOCKINGBIRD));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static List\u003cReview\u003e getTypicalReviews() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BOOKTHIEF_REVIEW, HUNGERGAME_REVIEW));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 20,
      "EleenYang": 53,
      "0blivious": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final Index INDEX_FIRST_BOOK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final Index INDEX_SECOND_BOOK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static final Index INDEX_THIRD_BOOK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final Index INDEX_FIRST_REVIEW \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final Index INDEX_SECOND_REVIEW \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static final Index INDEX_THIRD_REVIEW \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 3,
      "EleenYang": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BookCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import guitests.guihandles.BookCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "public class BookCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        Book bookWithNoTags \u003d new BookBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        BookCard bookCard \u003d new BookCard(bookWithNoTags, 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        uiPartRule.setUiPart(bookCard);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertCardDisplay(bookCard, bookWithNoTags);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        Book bookWithTags \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        bookCard \u003d new BookCard(bookWithTags, 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        uiPartRule.setUiPart(bookCard);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertCardDisplay(bookCard, bookWithTags);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        BookCard bookCard \u003d new BookCard(book, 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // same person, same index -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        BookCard copy \u003d new BookCard(book, 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertTrue(bookCard.equals(copy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertTrue(bookCard.equals(bookCard));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertFalse(bookCard.equals(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertFalse(bookCard.equals(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // different person, same index -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        Book differentBook \u003d new BookBuilder().withBookName(\"differentName\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertFalse(bookCard.equals(new BookCard(differentBook, 0)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // same person, different index -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertFalse(bookCard.equals(new BookCard(book, 1)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Asserts that {@code bookCard} displays the details of {@code expectedBook} correctly and matches"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * {@code expectedName}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private void assertCardDisplay(BookCard bookCard, Book expectedBook) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        BookCardHandle bookCardHandle \u003d new BookCardHandle(bookCard.getRoot());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        // verify person details are displayed correctly"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertCardDisplaysBook(expectedBook, bookCardHandle);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 67,
      "0blivious": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BookListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalBooks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import guitests.guihandles.BookCardHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import guitests.guihandles.BookListPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "public class BookListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private static final ObservableList\u003cBook\u003e TYPICAL_BOOKS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        FXCollections.observableList(getTypicalBooks());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private final SimpleObjectProperty\u003cBook\u003e selectedBook \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private BookListPanelHandle bookListPanelHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        initUi(TYPICAL_BOOKS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_BOOKS.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            bookListPanelHandle.navigateToCard(TYPICAL_BOOKS.get(i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            Book expectedBook \u003d TYPICAL_BOOKS.get(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            BookCardHandle actualCard \u003d bookListPanelHandle.getBookCardHandle(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            assertCardDisplaysBook(expectedBook, actualCard);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void selection_modelSelectedBookChanged_selectionChanges() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        initUi(TYPICAL_BOOKS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        Book secondBook \u003d TYPICAL_BOOKS.get(INDEX_SECOND_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        guiRobot.interact(() -\u003e selectedBook.set(secondBook));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        BookCardHandle expectedBook \u003d bookListPanelHandle.getBookCardHandle(INDEX_SECOND_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        BookCardHandle selectedBook \u003d bookListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertCardEquals(expectedBook, selectedBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Verifies that creating and deleting large number of books in {@code BookListPanel} requires lesser than"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        ObservableList\u003cBook\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }, \"Creation and deletion of book cards exceeded time limit\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Returns a list of books containing {@code bookCount} books that is used to populate the"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * {@code BookListPanel}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private ObservableList\u003cBook\u003e createBackingList(int bookCount) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        ObservableList\u003cBook\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        for (int i \u003d 0; i \u003c bookCount; i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            BookName name \u003d new BookName(i + \"a\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            Author author \u003d new Author(\"john\" + i);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            Rating rating \u003d new Rating(Integer.toString(i % 10));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            Book book \u003d new Book(name, author, rating, Collections.emptySet());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            backingList.add(book);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Initializes {@code bookListPanelHandle} with a {@code BookListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code BookListPanel}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private void initUi(ObservableList\u003cBook\u003e backingList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        BookListPanel bookListPanel \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            new BookListPanel(backingList, selectedBook, selectedBook::set);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        uiPartRule.setUiPart(bookListPanel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        bookListPanelHandle \u003d new BookListPanelHandle(getChildNode(bookListPanel.getRoot(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            BookListPanelHandle.BOOK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 96,
      "0blivious": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d HelpCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String thirdCommand \u003d \"help\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String thirdCommand \u003d \"help\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     *      - the text is helped \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 154,
      "0blivious": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": " * A GUI unit test class for BookShelf."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "0blivious": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.storage.JsonBookShelfStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        JsonBookShelfStorage jsonBookShelfStorage \u003d new JsonBookShelfStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonBookShelfStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 3,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ReviewBrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertPanelDisplaysReview;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import guitests.guihandles.BookBrowserPanelHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.testutil.ReviewBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class ReviewBrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private Review review \u003d new ReviewBuilder().build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private SimpleObjectProperty\u003cReview\u003e selectedReview \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private ReviewBrowserPanel browserPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private BookBrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new ReviewBrowserPanel(selectedReview));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        browserPanelHandle \u003d new BookBrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        guiRobot.interact(() -\u003e selectedReview.set(review));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertPanelDisplaysReview(review, browserPanelHandle);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 15,
      "Jiangqinhua": 15,
      "0blivious": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ReviewCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysReview;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import guitests.guihandles.ReviewCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.testutil.ReviewBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class ReviewCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Review review \u003d new ReviewBuilder().build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ReviewCard reviewCard \u003d new ReviewCard(review, 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        uiPartRule.setUiPart(reviewCard);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertCardDisplay(reviewCard, review);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Review review \u003d new ReviewBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ReviewCard reviewCard \u003d new ReviewCard(review, 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // same person, same index -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ReviewCard copy \u003d new ReviewCard(review, 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(reviewCard.equals(copy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTrue(reviewCard.equals(reviewCard));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(reviewCard.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(reviewCard.equals(0));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // different review, same index -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Review differentReview \u003d new ReviewBuilder().withReviewTitle(\"differentTitle\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(reviewCard.equals(new ReviewCard(differentReview, 0)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // same person, different index -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertFalse(reviewCard.equals(new ReviewCard(review, 1)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Asserts that {@code reviewCard} displays the details of {@code expectedReview} correctly and matches"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * {@code expectedName}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private void assertCardDisplay(ReviewCard reviewCard, Review expectedReview) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ReviewCardHandle reviewCardHandle \u003d new ReviewCardHandle(reviewCard.getRoot());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // verify person details are displayed correctly"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertCardDisplaysReview(expectedReview, reviewCardHandle);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ReviewListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.getTypicalReviews;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_REVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysReview;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertReviewCardEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import guitests.guihandles.ReviewCardHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import guitests.guihandles.ReviewListPanelHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.ReviewTitle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "public class ReviewListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private static final ObservableList\u003cReview\u003e TYPICAL_REVIEWS \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            FXCollections.observableList(getTypicalReviews());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private final SimpleObjectProperty\u003cReview\u003e selectedReview \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private ReviewListPanelHandle reviewListPanelHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        initUi(TYPICAL_REVIEWS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_REVIEWS.size(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            reviewListPanelHandle.navigateToCard(TYPICAL_REVIEWS.get(i));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            Review expectedReview \u003d TYPICAL_REVIEWS.get(i);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            ReviewCardHandle actualCard \u003d reviewListPanelHandle.getReviewCardHandle(i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            assertCardDisplaysReview(expectedReview, actualCard);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void selection_modelSelectedReviewChanged_selectionChanges() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        initUi(TYPICAL_REVIEWS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        Review secondReview \u003d TYPICAL_REVIEWS.get(INDEX_SECOND_REVIEW.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        guiRobot.interact(() -\u003e selectedReview.set(secondReview));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ReviewCardHandle expectedReview \u003d reviewListPanelHandle.getReviewCardHandle(INDEX_SECOND_REVIEW.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ReviewCardHandle selectedReview \u003d reviewListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertReviewCardEquals(expectedReview, selectedReview);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Verifies that creating and deleting large number of Reviews in {@code ReviewListPanel} requires lesser than"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ObservableList\u003cReview\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }, \"Creation and deletion of Review cards exceeded time limit\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns a list of Reviews containing {@code reviewCount} Reviews that is used to populate the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * {@code ReviewListPanel}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private ObservableList\u003cReview\u003e createBackingList(int reviewCount) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        ObservableList\u003cReview\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        for (int i \u003d 0; i \u003c reviewCount; i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            ReviewTitle name \u003d new ReviewTitle(i + \"a\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            BookName bookName \u003d new BookName(i + \"Alice\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "            String reviewMessage \u003d \"message\" + i;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            Review review \u003d new Review(name, bookName, reviewMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            backingList.add(review);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Initializes {@code ReviewListPanelHandle} with a {@code ReviewListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code ReviewListPanel}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    private void initUi(ObservableList\u003cReview\u003e backingList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ReviewListPanel reviewListPanel \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                new ReviewListPanel(backingList, selectedReview, selectedReview::set);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        uiPartRule.setUiPart(reviewListPanel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        reviewListPanelHandle \u003d new ReviewListPanelHandle(getChildNode(reviewListPanel.getRoot(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "                ReviewListPanelHandle.REVIEW_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 92,
      "0blivious": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private final BookShelf bookShelf \u003d new BookShelf();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, bookShelf);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        guiRobot.interact(() -\u003e bookShelf.addBook(ALI));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "0blivious": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import guitests.guihandles.BookBrowserPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import guitests.guihandles.BookCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import guitests.guihandles.BookListPanelHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import guitests.guihandles.ReviewCardHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import seedu.address.model.book.Review;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.ui.BookCard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static void assertCardEquals(BookCardHandle expectedCard, BookCardHandle actualCard) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedCard.getAuthor(), actualCard.getAuthor());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedCard.getRating(), actualCard.getRating());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedCard.getTags().forEach(tag -\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static void assertReviewCardEquals(ReviewCardHandle expectedCard, ReviewCardHandle actualCard) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertEquals(expectedCard.getBookName(), actualCard.getBookName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertEquals(expectedCard.getMessage(), actualCard.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertEquals(expectedCard.getDate(), actualCard.getDate());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedBook}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static void assertCardDisplaysBook(Book expectedBook, BookCardHandle actualCard) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedBook.getBookName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(expectedBook.getAuthor().fullName, actualCard.getAuthor());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(\"Rating:  \" + expectedBook.getRating().value, actualCard.getRating());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTagsEqual(expectedBook, actualCard);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedBook}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static void assertCardDisplaysReview(Review expectedReview, ReviewCardHandle actualCard) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertEquals(expectedReview.getBookName().fullName, actualCard.getBookName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertEquals(expectedReview.getTitle().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertEquals(expectedReview.getReviewMessage(), actualCard.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertEquals(expectedReview.getDateCreated(), actualCard.getDate());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     * Asserts that {@code actualPanel} displays the details of {@code expectedReview}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    public static void assertPanelDisplaysReview(Review expectedReview, BookBrowserPanelHandle actualPanel) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        assertEquals(expectedReview.getReviewMessage(), actualPanel.getMessageField());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * in {@code BookCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see BookCard #getTagColorStyleFor(String)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private static String getTagColorStyleFor(String tagName) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        switch (tagName) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        case \"popular\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return \"blue\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        case \"fantasy\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return \"orange\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        case \"classic\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return \"yellow\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        case \"novel\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return \"black\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        case \"romantic\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return \"blue\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        case \"children\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            return \"brown\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        case \"thriller\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return \"teal\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        case \"adventure\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return \"orange\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        case \"textbook\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return \"teal\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        case \"boring\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            return \"read\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            throw new AssertionError(tagName + \" does not have a color assigned.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * color."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static void assertTagsEqual(Book expectedBook, BookCardHandle actualCard) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        List\u003cString\u003e expectedTags \u003d expectedBook.getTags().stream()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            .map(tag -\u003e tag.tagName).collect(Collectors.toList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertEquals(expectedTags, actualCard.getTags());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        expectedTags.forEach(tag -\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Asserts that the list in {@code bookListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static void assertListMatching(BookListPanelHandle bookListPanelHandle, Book... books) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        for (int i \u003d 0; i \u003c books.length; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            bookListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            assertCardDisplaysBook(books[i], bookListPanelHandle.getBookCardHandle(i));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Asserts that the list in {@code bookListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static void assertListMatching(BookListPanelHandle bookListPanelHandle, List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertListMatching(bookListPanelHandle, books.toArray(new Book[0]));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Asserts the size of the list in {@code bookListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static void assertListSize(BookListPanelHandle bookListPanelHandle, int size) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        int numberOfPeople \u003d bookListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 31,
      "Jiangqinhua": 25,
      "-": 50,
      "0blivious": 50
    }
  },
  {
    "path": "src/test/java/systemtests/AddBookCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_CS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AUTHOR_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_CS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FANTASY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AUTHOR_CS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_CS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_CS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ALI;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOKTHIEF;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_LIFE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.SECRETLIFE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.TWILIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.AddBookCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookUtil;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class AddBookCommandSystemTest extends BookShelfSystemTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: add a book without tags to a non-empty book shelf, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book toAdd \u003d ALI;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String command \u003d \"   \" + AddBookCommand.COMMAND_WORD + \"  \" + NAME_DESC_ALICE + \"  \" + AUTHOR_DESC_ALICE + \" \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + RATING_DESC_ALICE + \"   \" + TAG_DESC_FANTASY + \" \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.addBook(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: add a book with all fields same as another book in the book shelf except name -\u003e added */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        toAdd \u003d new BookBuilder(ALI).withBookName(VALID_BOOKNAME_CS).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d AddBookCommand.COMMAND_WORD + NAME_DESC_CS + AUTHOR_DESC_ALICE + RATING_DESC_ALICE"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_FANTASY;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: add to empty book shelf -\u003e added */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deleteAllBooks();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(ALI);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: add a book with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        toAdd \u003d CS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d AddBookCommand.COMMAND_WORD + TAG_DESC_FANTASY + AUTHOR_DESC_CS + NAME_DESC_CS"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_TEXTBOOK + RATING_DESC_CS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: add a book, missing tags -\u003e added */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(SECRETLIFE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: filters the book list before adding -\u003e added */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBooksWithName(KEYWORD_MATCHING_LIFE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(TWILIGHT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* ------------------------ Perform add operation while a book card is selected --------------------------- */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: selects first card in the book list, add a book -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        selectBook(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(BOOKTHIEF);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: add a duplicate book -\u003e rejected */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d BookUtil.getAddBookCommand(SECRETLIFE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, AddBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: add a duplicate book except with different author -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        toAdd \u003d new BookBuilder(SECRETLIFE).withAuthor(VALID_AUTHOR_CS).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d BookUtil.getAddBookCommand(toAdd);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, AddBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: add a duplicate book except with different rating -\u003e rejected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        toAdd \u003d new BookBuilder(SECRETLIFE).withRating(VALID_RATING_CS).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d BookUtil.getAddBookCommand(toAdd);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, AddBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: add a duplicate book except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d BookUtil.getAddBookCommand(SECRETLIFE) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, AddBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d AddBookCommand.COMMAND_WORD + AUTHOR_DESC_ALICE + RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: missing author -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d AddBookCommand.COMMAND_WORD + NAME_DESC_ALICE + RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: missing rating -\u003e rejected */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d AddBookCommand.COMMAND_WORD + NAME_DESC_ALICE + AUTHOR_DESC_ALICE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d \"adds \" + BookUtil.getBookDetails(toAdd);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d AddBookCommand.COMMAND_WORD + INVALID_NAME_DESC + AUTHOR_DESC_ALICE + RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, BookName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid author -\u003e rejected */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d AddBookCommand.COMMAND_WORD + NAME_DESC_ALICE + INVALID_AUTHOR_DESC + RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid rating -\u003e rejected */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d AddBookCommand.COMMAND_WORD + NAME_DESC_ALICE + AUTHOR_DESC_ALICE + INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d AddBookCommand.COMMAND_WORD + NAME_DESC_ALICE + AUTHOR_DESC_ALICE + RATING_DESC_ALICE"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Executes the {@code AddBookCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddBookCommand} with the details of"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 4. {@code Storage} and {@code BookListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void assertCommandSuccess(Book toAdd) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(BookUtil.getAddBookCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Book)}. Executes {@code command}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see AddBookCommandSystemTest#assertCommandSuccess(Book)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void assertCommandSuccess(String command, Book toAdd) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.addBook(toAdd);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddBookCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Book)} except asserts that"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 2. {@code Storage} and {@code BookListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see AddBookCommandSystemTest#assertCommandSuccess(String, Book)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 4. {@code Storage} and {@code BookListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code BookShelfTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 3,
      "0blivious": 219
    }
  },
  {
    "path": "src/test/java/systemtests/BookSampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class BookSampleDataTest extends BookShelfSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    protected BookShelf getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void bookShelf_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Book[] expectedList \u003d SampleDataUtil.getSampleBooks();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertListMatching(getBookListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 50,
      "0blivious": 1
    }
  },
  {
    "path": "src/test/java/systemtests/BookShelfSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import guitests.guihandles.BookBrowserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import guitests.guihandles.BookListPanelHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.logic.commands.ListBookCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.ListReviewCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.testutil.TypicalBooks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": " * A system test class for BookShelf, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "public abstract class BookShelfSystemTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    protected BookShelf getInitialData() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        return TypicalBooks.getTypicalBookShelf();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public BookListPanelHandle getBookListPanel() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        return mainWindowHandle.getBookListPanel();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public BookBrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Displays all books in the book shelf."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    protected void showAllBooks() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        executeCommand(ListBookCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(getModel().getBookShelf().getBookList().size(), getModel().getFilteredBookList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Displays all books with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    protected void showBooksWithName(String keyword) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        executeCommand(ListBookCommand.COMMAND_WORD + \" \" + PREFIX_NAME + keyword);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertTrue(getModel().getFilteredBookList().size() \u003c getModel().getBookShelf().getBookList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Selects the book at {@code index} of the displayed list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    protected void selectBook(Index index) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        executeCommand(ListReviewCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertEquals(index.getZeroBased(), getBookListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Deletes all books in the book shelf."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    protected void deleteAllBooks() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertEquals(0, getModel().getBookShelf().getBookList().size());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same book objects as {@code expectedModel}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * and the book list panel displays the books in the model correctly."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertEquals(new BookShelf(expectedModel.getBookShelf()), testApp.readStorageBookShelf());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertListMatching(getBookListPanel(), expectedModel.getFilteredBookList());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Calls {@code BookBrowserPanelHandle}, {@code BookListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        // getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        getBookListPanel().rememberSelectedBookCard();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @see BookBrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    protected void assertSelectedBookCardDeselected() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertFalse(getBookListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the book in the book list panel at"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @see BookBrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see BookListPanelHandle#isSelectedBookCardChanged()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    protected void assertSelectedBookCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        getBookListPanel().navigateToCard(getBookListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        String selectedCardName \u003d getBookListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getBookListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the book list panel remain unchanged."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @see BookBrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see BookListPanelHandle#isSelectedBookCardChanged()"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    protected void assertSelectedBookCardUnchanged() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(getBookListPanel().isSelectedBookCardChanged());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertListMatching(getBookListPanel(), getModel().getFilteredBookList());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // assertEquals(ReviewBrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 5,
      "Jiangqinhua": 32,
      "EleenYang": 11,
      "-": 218,
      "0blivious": 13
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_PRIDE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class ClearCommandSystemTest extends BookShelfSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: clear non-empty book shelf, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: undo clearing book shelf -\u003e original book shelf restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: redo clearing book shelf -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: selects first card in book list and clears book shelf -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original book shelf"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        selectBook(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: filters the book list before clearing -\u003e entire book shelf cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original book shelf"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBooksWithName(KEYWORD_MATCHING_PRIDE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: clear empty book shelf -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 4,
      "-": 78,
      "0blivious": 19
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteBookCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.DeleteBookCommand.MESSAGE_DELETE_BOOK_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TestUtil.getBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_LIFE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.DeleteBookCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class DeleteBookCommandSystemTest extends BookShelfSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteBookCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: delete the first book in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String command \u003d \"     \" + DeleteBookCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_BOOK.getOneBased() + \"     \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book deletedBook \u003d removeBook(expectedModel, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_BOOK_SUCCESS, deletedBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: delete the last book in the list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index lastBookIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(lastBookIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: undo deleting the last book in the list -\u003e last book restored */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: redo deleting the last book in the list -\u003e last book deleted again */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        removeBook(modelBeforeDeletingLast, lastBookIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: delete the middle book in the list -\u003e deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index middleBookIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(middleBookIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: filtered book list, delete index within bounds of book shelf and book list -\u003e deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBooksWithName(KEYWORD_MATCHING_LIFE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index index \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredBookList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: filtered book list, delete index within bounds of book shelf but out of bounds of book list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBooksWithName(KEYWORD_MATCHING_LIFE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        int invalidIndex \u003d getModel().getBookShelf().getBookList().size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d DeleteBookCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* --------------------- Performing delete operation while a book card is selected ------------------------ */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: delete the selected book -\u003e book list panel selects the book before the deleted book */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showAllBooks();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        selectBook(selectedIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d DeleteBookCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        deletedBook \u003d removeBook(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_BOOK_SUCCESS, deletedBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d DeleteBookCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d DeleteBookCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                getModel().getBookShelf().getBookList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d DeleteBookCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(DeleteBookCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(DeleteBookCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Removes the {@code Book} at the specified {@code index} in {@code model}\u0027s book shelf."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @return the removed book"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private Book removeBook(Model model, Index index) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book targetBook \u003d getBook(model, index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.deleteBook(targetBook);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return targetBook;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Deletes the book at {@code toDelete} by creating a default {@code DeleteBookCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see DeleteBookCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book deletedBook \u003d removeBook(expectedModel, toDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_BOOK_SUCCESS, deletedBook);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                DeleteBookCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see DeleteBookCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see BookShelfSystemTest#assertSelectedBookCardChanged(Index)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            assertSelectedBookCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 4,
      "-": 128,
      "0blivious": 61
    }
  },
  {
    "path": "src/test/java/systemtests/EditBookCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0blivious"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_CS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AUTHOR_DESC_LIFE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AUTHOR_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BOOKNAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_LIFE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_TEST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_ALICE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_CS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_LIFE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FANTASY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_ALICE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKNAME_TEST;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_TEXTBOOK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.CS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_LIFE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.SECRETLIFE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.EditBookCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Author;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.BookName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Rating;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.testutil.BookUtil;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class EditBookCommandSystemTest extends BookShelfSystemTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Index index \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String command \u003d \" \" + EditBookCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_CS + \"  \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + AUTHOR_DESC_CS + \" \" + RATING_DESC_CS + \"  \" + \" \" + TAG_DESC_TEXTBOOK + \" \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book editedBook \u003d new BookBuilder(CS).withTags(VALID_TAG_TEXTBOOK).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, index, editedBook);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: undo editing the last book in the list -\u003e last book restored */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: redo editing the last book in the list -\u003e last book edited again */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.setBook(getModel().getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased()), editedBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: edit a book with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d EditBookCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + NAME_DESC_CS + AUTHOR_DESC_CS + RATING_DESC_CS"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_FANTASY + TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, index, CS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: edit a book with new values same as another book\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(getModel().getBookShelf().getBookList().contains(CS));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        index \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertNotEquals(getModel().getFilteredBookList().get(index.getZeroBased()), CS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d EditBookCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_ALICE"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + AUTHOR_DESC_CS + RATING_DESC_CS"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_FANTASY + TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedBook \u003d new BookBuilder(CS).withBookName(VALID_BOOKNAME_ALICE).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, index, editedBook);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        index \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d EditBookCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book bookToEdit \u003d getModel().getFilteredBookList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedBook \u003d new BookBuilder(bookToEdit).withTags().build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, index, editedBook);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: filtered book list, edit index within bounds of book shelf and book list -\u003e edited */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBooksWithName(KEYWORD_MATCHING_LIFE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        index \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredBookList().size());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d EditBookCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_TEST;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        bookToEdit \u003d getModel().getFilteredBookList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        editedBook \u003d new BookBuilder(bookToEdit).withBookName(VALID_BOOKNAME_TEST).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, index, editedBook);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: filtered book list, edit index within bounds of book shelf but out of bounds of book list"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        showBooksWithName(KEYWORD_MATCHING_LIFE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        int invalidIndex \u003d getModel().getBookShelf().getBookList().size();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(EditBookCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_CS,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(EditBookCommand.COMMAND_WORD + \" 0\" + NAME_DESC_CS,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(EditBookCommand.COMMAND_WORD + \" -1\" + NAME_DESC_CS,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredBookList().size() + 1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(EditBookCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_CS,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(EditBookCommand.COMMAND_WORD + NAME_DESC_CS,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(EditBookCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                EditBookCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(EditBookCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                        + INDEX_FIRST_BOOK.getOneBased() + INVALID_BOOKNAME_DESC,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                BookName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid author -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(EditBookCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                        + INDEX_FIRST_BOOK.getOneBased() + INVALID_AUTHOR_DESC,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                Author.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid rating -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(EditBookCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                        + \" \" + INDEX_FIRST_BOOK.getOneBased() + INVALID_RATING_DESC,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(EditBookCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                        + INDEX_FIRST_BOOK.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: edit a book with new values same as another book\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        executeCommand(BookUtil.getAddBookCommand(SECRETLIFE));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertTrue(getModel().getBookShelf().getBookList().contains(SECRETLIFE));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        index \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertFalse(getModel().getFilteredBookList().get(index.getZeroBased()).equals(CS));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d EditBookCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + NAME_DESC_LIFE + AUTHOR_DESC_LIFE + RATING_DESC_LIFE;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, EditBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: edit a book with new values same as another book\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d EditBookCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + NAME_DESC_LIFE + AUTHOR_DESC_LIFE + RATING_DESC_LIFE"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, EditBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: edit a book with new values same as another book\u0027s values but with different author -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d EditBookCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + NAME_DESC_LIFE + AUTHOR_DESC_ALICE + RATING_DESC_LIFE"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_FANTASY + TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, EditBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: edit a book with new values same as another book\u0027s values but with different rating -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d EditBookCommand.COMMAND_WORD + \" \" + index.getOneBased()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + NAME_DESC_LIFE + AUTHOR_DESC_LIFE + RATING_DESC_ALICE"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_FANTASY"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                + TAG_DESC_TEXTBOOK;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandFailure(command, EditBookCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Book, Index)} except that"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see EditBookCommandSystemTest#assertCommandSuccess(String, Index, Book, Index)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Book editedBook) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedBook, null);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditBookCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the book at index {@code toEdit} being"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * updated to values specified {@code editedBook}.\u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see EditBookCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            Book editedBook, Index expectedSelectedBookCardIndex) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.setBook(expectedModel.getFilteredBookList().get(toEdit.getZeroBased()), editedBook);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                String.format(EditBookCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook), expectedSelectedBookCardIndex);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see EditBookCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code expectedSelectedBookCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see BookShelfSystemTest#assertSelectedBookCardChanged(Index)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            Index expectedSelectedBookCardIndex) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        expectedModel.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        if (expectedSelectedBookCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            assertSelectedBookCardChanged(expectedSelectedBookCardIndex);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "0blivious"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "0blivious"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0blivious": 274
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.DeleteBookCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.ListBookCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class HelpCommandSystemTest extends BookShelfSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        getBookListPanel().click();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        //"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        //        getBrowserPanel().click();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        //        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Miaaaaa97"
        },
        "content": "        //        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        executeCommand(ListBookCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        // assertNotEquals(ReviewBrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertListMatching(getBookListPanel(), getModel().getFilteredBookList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        executeCommand(DeleteBookCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Miaaaaa97": 4,
      "EleenYang": 6,
      "-": 93,
      "0blivious": 2
    }
  },
  {
    "path": "src/test/java/systemtests/ListBookCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_BOOKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.BOOKTHIEF;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.HUNGERGAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_COLLINS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_FANTASY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_LIFE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_SIX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.KEYWORD_MATCHING_ZUSAK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.LIFEPI;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.LIFEWAO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.MIDDLESEX;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.DeleteBookCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.ListBookCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class ListBookCommandSystemTest extends BookShelfSystemTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find multiple books in book shelf, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * -\u003e 2 books found"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String command \u003d \"   \" + ListBookCommand.COMMAND_WORD + \" \" + PREFIX_NAME + KEYWORD_MATCHING_LIFE + \"   \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ModelHelper.setFilteredBookList(expectedModel, LIFEPI, LIFEWAO);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: repeat previous find command where book list is displaying the books we are finding"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "         * -\u003e 2 books found"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_NAME + KEYWORD_MATCHING_LIFE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: find book where book list is not displaying the book we are finding -\u003e 1 book found */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_AUTHOR + KEYWORD_MATCHING_COLLINS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ModelHelper.setFilteredBookList(expectedModel, HUNGERGAME);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find multiple books in book shelf, 2 keywords -\u003e 2 books found */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_AUTHOR + KEYWORD_MATCHING_ZUSAK + \"   \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d command + PREFIX_AUTHOR + KEYWORD_MATCHING_COLLINS + \"   \";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ModelHelper.setFilteredBookList(expectedModel, BOOKTHIEF, HUNGERGAME);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find multiple books in book shelf, 2 keywords in reversed order -\u003e 2 books found */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_AUTHOR + KEYWORD_MATCHING_COLLINS + \"   \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d command + PREFIX_AUTHOR + KEYWORD_MATCHING_ZUSAK + \"   \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find multiple books in book shelf, 2 keywords with 1 repeat -\u003e 2 books found */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_AUTHOR + KEYWORD_MATCHING_ZUSAK + \"   \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d command + PREFIX_AUTHOR + KEYWORD_MATCHING_COLLINS + \"   \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d command + PREFIX_AUTHOR + KEYWORD_MATCHING_ZUSAK;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: find multiple books in book shelf, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0blivious"
        },
        "content": "         * -\u003e 2 books found"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_AUTHOR + KEYWORD_MATCHING_ZUSAK + \"   \";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d command + PREFIX_AUTHOR + KEYWORD_MATCHING_COLLINS + \"   \";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d command + PREFIX_AUTHOR + \"NoKeywordMatching\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: undo previous list command -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: redo previous list command -\u003e rejected */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: find same books in book shelf after deleting 1 of them -\u003e 1 book found */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        command \u003d DeleteBookCommand.COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertFalse(getModel().getBookShelf().getBookList().contains(BOOKTHIEF));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_AUTHOR + KEYWORD_MATCHING_COLLINS + \"   \";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ModelHelper.setFilteredBookList(expectedModel, HUNGERGAME);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find book in book shelf, keyword is same as name but of different case -\u003e 1 book found */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_AUTHOR + \"cOLLIns\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find book in book shelf, keyword is substring of name -\u003e 0 books found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"Hun\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ModelHelper.setFilteredBookList(expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        /* Case: find book in book shelf, author name is substring of keyword -\u003e 0 books found */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_AUTHOR + \"CollinsMoreLetters\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ModelHelper.setFilteredBookList(expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find book not in book shelf -\u003e 0 books found */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \"NoBooksFound\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find rating of book in book shelf -\u003e 2 books found */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_RATING + KEYWORD_MATCHING_SIX;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ModelHelper.setFilteredBookList(expectedModel, HUNGERGAME, MIDDLESEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find tag of BOOK in book shelf -\u003e 2 books found */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_TAG + KEYWORD_MATCHING_FANTASY;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        ModelHelper.setFilteredBookList(expectedModel, HUNGERGAME, LIFEPI);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: find BOOK in empty book shelf -\u003e 0 books found */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        deleteAllBooks();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d ListBookCommand.COMMAND_WORD + \" \" + PREFIX_TAG + KEYWORD_MATCHING_FANTASY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        ModelHelper.setFilteredBookList(expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        command \u003d \"LIstBOOk\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * box displays {@code Messages#MESSAGE_BOOKS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                MESSAGE_BOOKS_LISTED_OVERVIEW, expectedModel.getFilteredBookList().size());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 164,
      "0blivious": 25
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static final Predicate\u003cBook\u003e PREDICATE_MATCHING_NO_BOOKS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public static void setFilteredBookList(Model model, List\u003cBook\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Optional\u003cPredicate\u003cBook\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0blivious"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getBookPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        model.updateFilteredBookList(predicate.orElse(PREDICATE_MATCHING_NO_BOOKS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * @see ModelHelper#setFilteredBookList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public static void setFilteredBookList(Model model, Book... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        setFilteredBookList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0blivious"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Book} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    private static Predicate\u003cBook\u003e getBookPredicateMatching(Book other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        return book -\u003e book.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 2,
      "-": 27,
      "0blivious": 10
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.BookShelf;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0blivious"
        },
        "content": "public class SampleDataTest extends BookShelfSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    protected BookShelf getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public void bookShelf_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        Book[] expectedList \u003d SampleDataUtil.getSampleBooks();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0blivious"
        },
        "content": "        assertListMatching(getBookListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "0blivious": 7
    }
  },
  {
    "path": "src/test/java/systemtests/SortBookCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FIRST_SUBORDER_ASC_WITH_PREFIX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SORT_TYPE_WITH_PREFIX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORDER_ASC_WITHOUT_PREFIX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORDER_DES_WITHOUT_PREFIX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORDER_DES_WITH_PREFIX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SECOND_SUBORDER_DES_WITH_PREFIX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_AUTHOR_WITHOUT_PREFIX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_AUTHOR_WITH_PREFIX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_NAME_WITHOUT_PREFIX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_NAME_WITH_PREFIX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_RATING_WITHOUT_PREFIX;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_RATING_WITH_PREFIX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SORT_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.THIRD_SUBORDER_ASC_WITH_PREFIX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.logic.commands.SortBookCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "public class SortBookCommandSystemTest extends BookShelfSystemTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        List\u003cString\u003e sortTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        /* ----------------------------------- Perform valid sort operations ---------------------------------------- */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        /* Case: sort list by rating without specify order */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        String command \u003d SortBookCommand.COMMAND_WORD + SORT_RATING_WITH_PREFIX;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        String mainOrder \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes.add(SORT_RATING_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        model.sortBook(sortTypes, mainOrder, map);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertCommandSuccess(command, model, SortBookCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        /* Case: sort list by rating with specify order */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        command \u003d SortBookCommand.COMMAND_WORD + SORT_RATING_WITH_PREFIX + ORDER_DES_WITH_PREFIX;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes.add(SORT_RATING_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        mainOrder \u003d SORT_RATING_WITHOUT_PREFIX;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        model.sortBook(sortTypes, mainOrder, map);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertCommandSuccess(command, model, SortBookCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        /* Case: sort list by author and rating with mainOrder*/"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        command \u003d SortBookCommand.COMMAND_WORD + SORT_AUTHOR_WITH_PREFIX"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            + SORT_RATING_WITH_PREFIX + ORDER_DES_WITH_PREFIX;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes.add(SORT_AUTHOR_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes.add(SORT_RATING_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        mainOrder \u003d ORDER_DES_WITHOUT_PREFIX;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        model.sortBook(sortTypes, mainOrder, map);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertCommandSuccess(command, model, SortBookCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        /* Case: sort list by author and rating with mainOrder and subOrder */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        command \u003d SortBookCommand.COMMAND_WORD + SORT_AUTHOR_WITH_PREFIX"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            + SORT_RATING_WITH_PREFIX + ORDER_DES_WITH_PREFIX"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            + FIRST_SUBORDER_ASC_WITH_PREFIX + SECOND_SUBORDER_DES_WITH_PREFIX;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes.add(SORT_AUTHOR_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes.add(SORT_RATING_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        mainOrder \u003d ORDER_DES_WITHOUT_PREFIX;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map.put(SORT_AUTHOR_WITHOUT_PREFIX, ORDER_ASC_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map.put(SORT_RATING_WITHOUT_PREFIX, ORDER_DES_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        model.sortBook(sortTypes, mainOrder, map);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertCommandSuccess(command, model, SortBookCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        /* Case: sort list by rating, book name and author with subOrder */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        command \u003d SortBookCommand.COMMAND_WORD + SORT_RATING_WITH_PREFIX"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            + SORT_NAME_WITH_PREFIX + SORT_AUTHOR_WITH_PREFIX"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            + FIRST_SUBORDER_ASC_WITH_PREFIX + SECOND_SUBORDER_DES_WITH_PREFIX + THIRD_SUBORDER_ASC_WITH_PREFIX;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes.add(SORT_RATING_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes.add(SORT_NAME_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        sortTypes.add(SORT_AUTHOR_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        mainOrder \u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map.put(SORT_RATING_WITHOUT_PREFIX, ORDER_ASC_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map.put(SORT_NAME_WITHOUT_PREFIX, ORDER_DES_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        map.put(SORT_AUTHOR_WITHOUT_PREFIX, ORDER_ASC_WITHOUT_PREFIX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        model.sortBook(sortTypes, mainOrder, map);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertCommandSuccess(command, model, SortBookCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        /* ----------------------------------- Perform invalid sort operations -------------------------------------- */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        /* Case: sort list without st */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        command \u003d SortBookCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        /* Case: sort list with unknown st type */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        command \u003d SortBookCommand.COMMAND_WORD + INVALID_SORT_TYPE_WITH_PREFIX;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        /* Case: sort list with extra attributes */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        command \u003d SortBookCommand.COMMAND_WORD + SORT_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        /* Case: sort list with extra sub order */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        command \u003d SortBookCommand.COMMAND_WORD + SORT_RATING_WITH_PREFIX"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "            + FIRST_SUBORDER_ASC_WITH_PREFIX + SECOND_SUBORDER_DES_WITH_PREFIX;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortBookCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * 2. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * 4. {@code Storage} and {@code BookListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * {@code BookShelfTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jiangqinhua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jiangqinhua": 152
    }
  },
  {
    "path": "src/test/java/systemtests/SummaryCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.commands.SummaryCommand.MESSAGE_NO_AUTHOR_PREFERED;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTHOR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import static seedu.address.testutil.TypicalBooks.ANOTHER_ERIKA_WORK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.AddBookCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.SummaryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "import seedu.address.model.book.Book;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "public class SummaryCommandSystemTest extends BookShelfSystemTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private static final String command \u003d SummaryCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    public void summary() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String expectedResultMessage \u003d \"You\u0027ve read 8 books.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + MESSAGE_NO_AUTHOR_PREFERED"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"Book(s) receive a rating of 10 from you: To Kill a Mocking Bird\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "            + \"You prefer books that you labeled as fantasy(including The Hunger Games, Life of Pi)\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: undo previous summary command -\u003e rejected */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String undoCommand \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandFailure(undoCommand, expectedResultMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: redo previous summary command -\u003e rejected */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String redoCommand \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandFailure(redoCommand, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        /* Case: get the summary of the book shelf after 1 book deleted -\u003e summary changes */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Book toAdd \u003d ANOTHER_ERIKA_WORK;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        String addCommand \u003d AddBookCommand.COMMAND_WORD + \" \" + PREFIX_NAME + toAdd.getBookName().fullName"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                + \" \" + PREFIX_AUTHOR + toAdd.getAuthor().fullName"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                + \" \" + PREFIX_RATING + toAdd.getRating().value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        executeCommand(addCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        expectedModel.addBook(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assert(expectedModel.getBookShelf().getBookList().size() \u003d\u003d 9);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        expectedResultMessage \u003d \"You\u0027ve read 9 books.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                + \"You prefer books by Erika Leonard, as you\u0027ve read: \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                + \"Fifty Shades of Grey, Fifty Shades Darker\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                + \"Book(s) receive a rating of 10 from you: To Kill a Mocking Bird\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "                + \"You prefer books that you labeled as fantasy(including The Hunger Games, Life of Pi)\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * box displays with a summary of the book in the book shelf"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EleenYang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * {@code BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     * @see BookShelfSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertSelectedBookCardUnchanged();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EleenYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EleenYang": 88
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0blivious"
        },
        "content": "import seedu.address.model.ReadOnlyBookShelf;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0blivious"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyBookShelf\u003e bookShelf, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0blivious"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(bookShelf, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "0blivious": 3
    }
  }
]
